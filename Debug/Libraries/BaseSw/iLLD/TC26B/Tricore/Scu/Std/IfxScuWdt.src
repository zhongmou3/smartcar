	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 99835728"
	.compiler_invocation	"ctc --dep-file=Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\.IfxScuWdt.o.d --fp-model=c,f,l,n,r,S,T,z -D__CPU__=tc26x -D__CPU_TC26X__ --core=tc1.6.x --iso=99 -ID:\\smartcar\\smartcar -ID:\\smartcar\\smartcar\\CODE -ID:\\smartcar\\smartcar\\Libraries -ID:\\smartcar\\smartcar\\Libraries\\BaseSw -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Build -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Impl -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\DataHandling -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\InternalMux -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_PinMap -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Asc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Lin -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Spi -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6 -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Icu -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\PwmBc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\PwmHl -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Timer -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\TPwm -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif\\Cam -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Irq -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Dsadc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Rdc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts\\Dts -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Emem -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Emem\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray\\Eray -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth\\Phy_Pef7071 -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce\\Crc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Flash -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Flash\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12 -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12\\IncrEnc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\Pwm -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\Timer -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tim -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tim\\In -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\Pwm -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\Timer -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Trig -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl\\Hssl -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\I2c -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom\\Driver -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc\\Msc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican\\Can -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Io -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5 -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5\\Psi5 -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s\\Psi5s -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\SpiMaster -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\SpiSlave -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent\\Sent -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Smu -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Smu\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Src -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm\\Timer -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Adc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra\\Platform -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra\\Platform\\Tricore -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra\\Platform\\Tricore\\Compilers -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra\\Sfr -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra\\Sfr\\TC26B -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra\\Sfr\\TC26B\\_Reg -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Service -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Service\\CpuGeneric -ID:\\smartcar\\smartcar\\Libraries\\seekfree_libraries -ID:\\smartcar\\smartcar\\Libraries\\seekfree_libraries\\common -ID:\\smartcar\\smartcar\\Libraries\\seekfree_peripheral -ID:\\smartcar\\smartcar\\USER -g2 --make-target=Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.o -t0 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O0 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.src ..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c"
	.compiler_name		"ctc"
	;source	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c'

	
$TC16X
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_changeCpuWatchdogPassword',code,cluster('IfxScuWdt_changeCpuWatchdogPassword')
	.sect	'.text.IfxScuWdt.IfxScuWdt_changeCpuWatchdogPassword'
	.align	2
	
	.global	IfxScuWdt_changeCpuWatchdogPassword

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	     2   * \file IfxScuWdt.c
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	     3   * \brief SCU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	     4   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	     5   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	     6   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	     7   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	     9   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    10   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    12   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    13   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    14   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    15   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    16  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    19  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    20   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    21   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    22   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    23   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    24   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    25   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    26  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    27   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    31   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    32   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    33  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    40   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    41  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    42   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    44   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    45  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    46  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    47  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    48  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    49  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    50  #include "IfxScuWdt.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    51  #include "Cpu/Std/IfxCpu.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    52  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    53  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    54  /*----------------------------------Macros------------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    55  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    56  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    57  /** \brief Reset password of watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    58   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    59  #define IFXSCUWDT_RESET_PASSWORD (0x3CU)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    60  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    61  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    62  /*-------------------------Function Implementations---------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    63  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    64  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    65  void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword)
; Function IfxScuWdt_changeCpuWatchdogPassword
.L112:
IfxScuWdt_changeCpuWatchdogPassword:	.type	func

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    44   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    45   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    46   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    47   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    48   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    49   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    50   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    51   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    52   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    53   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    54   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    55   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    56   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    57   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    58   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    59   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    60   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    61   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    63  #ifndef IFXCPU_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    64  #define IFXCPU_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    65  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    66  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    67  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    68  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    69  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    70  #include "_Impl/IfxCpu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    71  #include "IfxSrc_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    72  #include "IfxScu_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    73  #include "IfxStm_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    74  #include "_Impl/IfxScu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    75  #include "_Utilities/Ifx_Assert.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    76  #include "Scu/Std/IfxScuWdt.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    77  #include "Scu/Std/IfxScuCcu.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    78  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    79  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    80  /*-----------------------------------Macros-----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    81  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    82  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    83  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    84   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    85   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    86   * the CPU number.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    87   * Example usage:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    88   *  \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    89   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    90   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    91   *  \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    92   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    93  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    94  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    95  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    96   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    97   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    98   * the CPU number.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    99   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   100   *   Example usage:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   101   *   \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   102   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   103   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   104   *   \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   105   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   106  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   107  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   108  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   109  /*------------------------------Type Definitions------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   110  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   111  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   112  /** \brief Lock type Spin lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   113   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   114  typedef unsigned int IfxCpu_spinLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   115  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Lock type Mutex lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   117   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   118  typedef unsigned int IfxCpu_mutexLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   119  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   120  /** \brief Event used for synchronisation.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   121   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   122  typedef unsigned int IfxCpu_syncEvent;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   123  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   124  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   125  /*--------------------------------Enumerations--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   127  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   128  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   129   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   130  /** \brief Enumeration for the Cpu mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   131   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   132  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   133  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_halt,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_run,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_idle,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   137      IfxCpu_CoreMode_sleep,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   138      IfxCpu_CoreMode_stby,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   139      IfxCpu_CoreMode_unknown
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   140  } IfxCpu_CoreMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   141  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance conunter modes
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   143   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   144  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   145  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   148  } IfxCpu_CounterMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   149  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   150  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   151  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   152  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   153  /*-----------------------------Data Structures--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   154  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   155  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   156  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   157   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   158  /** \brief counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   159   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   160  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   161  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   162      uint32  counter;        /**< \brief Counter value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   163      boolean overlfow;       /**< \brief sticky overlfow */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_Counter;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   166  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   167  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   168  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   169   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   170  /** \brief Performance counter result
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   171   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   172  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   173  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_Perf;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   181  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   182  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   183  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   184   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   185  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   187  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   188  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief API to get the address for CPU HW module register memory map
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   191   * \param cpu Resource index of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   192   * \return CPU module register address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   193   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   194  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   195  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief API to get core id of the CPU of the caller.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   197   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   198   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   199   * \return Resource index of the CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   200   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   201  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   202  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   203  /** \brief API to get cpu index of the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   204   * Note: This api can be used whereever cpu no/index is needed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   205   * \return Resource index of the CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   206   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   207  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   208  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   209  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   210   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   211   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   212   * shall not be used to initialize the CSA of another CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   213   * \param csaBegin Pointer to start of context save area
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   214   * \param csaEnd Pointer to end of context save area
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   215   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   216   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   217  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   219  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   220   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   221   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   222  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   224  /** \brief Triggers Software Reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   225   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   226   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   227  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   228  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   229  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   230  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   231  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   232  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   233  /** \brief API to get current mode of CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   234   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   235   * \return Current mode of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   236   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   237  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   238  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   239  /** \brief API to get current mode of CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   240   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   241   * \return Resource index of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   242   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   243  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   244  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   245  /** \brief API to set mode of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   246   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   247   * \param mode CPU mode to be set by this API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   248   * \return Success status of the activity (setting the core mode).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   249   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   250   * \retval FALSE: If the activity can't be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   251   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   252  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   253  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   254  /** \brief API to set the program counter for the CPU specified.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   255   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   256   * \param programCounter Program counter value to be set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   257   * \return success status of the activity (setting program counter value).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   258   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   259   * \retval FALSE: If the activity can't be performed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   260   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   261  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   262  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   263  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   264   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   265   * \param programCounter Program counter value to start the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   266   * \return success status of the activity (setting program counter value).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   268   * \retval FALSE: If the activity can't be performed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   269   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   270  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   271  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   272  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   273  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   274  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   275   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   277  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   278  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   279  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   280  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   281  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   282   * This API provides the status of CPU where this API is called
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   283   * \return Status of global interrupt enable bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   284   * \retval TRUE: Global interrupts enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   285   * \retval FALSE: Global interrupts disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   286   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   287  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   288  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   289  /** \brief API to disable global interrupt and return the previous status.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   290   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   291   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   292   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   293   * \return Previous status of global interrupt enable bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   294   * \retval TRUE: Previously, global interrupts enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   295   * \retval FALSE: Previously, global interrupts disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   296   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   297  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   298  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   299  /** \brief API to enable global interrupt.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   300   * This API simply enables the global interrupt.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   301   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   302   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   303  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   304  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   305  /** \brief Disable the Global Interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   306   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   311   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   312   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   313   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   314   * \param enabled Previous status of the global interrupt enable bit
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   315   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   329   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   330   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   331   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   332   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   333   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   334   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   335  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   336  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   337  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   338   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   339   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   340   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   341   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to invalidate the program cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   352   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   353   * \return Status TRUE/FALSE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enable Command to enable or bypass the data cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   362   * TRUE: Enable the data cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   363   * FALSE: Bypass the data cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   364   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   369   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   371   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   372   * \param enable Command to enable or bypass the program cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   373   * TRUE: Enable the program cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   374   * FALSE: Bypass the program cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   375   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   376   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   377  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   378  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   379  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   380  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   381  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   382   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   384  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   385  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   386  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   387  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   388  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   389   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   390   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   391   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   392   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   393   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   394  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   395  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   396  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   397   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   398   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   399   * It cannot be used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   400   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   401   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   402   * reading the counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   403   * \return Status of sticky overflow bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   404   * \retval TRUE: Sticky overflow bit is set.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   405   * \retval FALSE: Sticky overflow bit is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   406   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   408  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   410   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   413   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   414   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   415  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   416  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   417  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   418   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   419   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   420   * It cannot be used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   421   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   422   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   423   * reading the counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   424   * \return Status of sticky overflow bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   425   * \retval TRUE: Sticky overflow bit is set.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   426   * \retval FALSE: Sticky overflow bit is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   427   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   428  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   429  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   430  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   431   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   432   * \return counter value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   433   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   434  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   435  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   436  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   437   * This is generic function to get sticky overflow bit of any performance counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   438   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief Reset and start instruction, clock and multi counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   445   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   446   * \param mode Counter mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   448   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   450  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   452   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   455   * \param enable enable Command to enable or disable the performance counter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   456   * TRUE: Enable the performance counter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   457   * FALSE: Disable the performance counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   458   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   459   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   460  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   461  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   462  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   463  /** \brief Stop instruction and clock counters, return their values
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   464   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   465   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   466   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   467   * \return Performance counter result
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   468   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   470  #endif
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   471  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   472  /** \brief API to update clock counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   473   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   474   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   475   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   476   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   477   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   478   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   479  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   480  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   481  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   482   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   483   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   484   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   485   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   486   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief API to update performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   491   * This is generic function to update any of the performance counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   492   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   493   * \param count Count
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   498  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   499  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   500  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   501   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   502  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   503  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   504  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   505  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   506  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   507  /** \brief API to acquire the mutex (binary semaphore).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   508   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   509   * This API can be used to acquire/get the mutex.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   510   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   511   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   512   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   513   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   514   *    IfxCpu_mutexLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   515   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   516   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   517   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   518   *      IfxCpu_releaseMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   519   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   520   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   521   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   522   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   523  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   524  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   525  /** \brief API to unlock the mutex .
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   526   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   527   * This API can be used to unlock the previously acquired mutex
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   528   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   529   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   530   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   531   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   532   *    IfxCpu_mutexLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   533   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   534   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   535   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   536   *      IfxCpu_releaseMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   537   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   538   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   539   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   540   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   541  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   542  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   543  /** \brief API to unlock the resource .
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   544   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   545   * This API can be used to unlock the previously acquired lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   546   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   547   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   548   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   549  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   550  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   551  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   552   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   553   * This API can be used to spin lock for the lock for the given timeout period.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   554   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   555   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   556   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   557   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   558   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   559   *    IfxCpu_spinLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   560   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   561   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   562   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   563   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   564   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   565   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   566   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   567   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   568  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   569  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   570  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   572  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   573   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   574  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   575  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   577  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   578  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   579  /** \brief API to get random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   580   * \param seed Pointer to seed value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   581   * \return random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   582   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   583  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   584  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   585  /** \brief API to get random value with in the range
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   586   * \param seed Pointer to seed value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   587   * \param min minimum range value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   588   * \param max maximum range value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   589   * \return random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   590   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   591  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   592  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   593  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   594   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   595   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   596   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   597   * CORE_ID register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   598   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   600   * e.g:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   601   * 1. Check for synchronisation between core 0 and core 5
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   602   * # define 0x41U
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   603   * 2. Check for synchronisation between core 0 to core 5
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   604   * # define 0x5FU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   605   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   606   * Note:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   607   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   608   * Core 0: 0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   609   * Core 1: 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   610   * Core 2: 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   611   * Core 3: 3
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   612   * Core 4: 4
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   613   * Core 5: 6
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   614   * \param event Synchronous Event
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   615   * \param timeoutMilliSec timeout in millisec
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   616   * \return Error condition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   617   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   618   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   619   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   620   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   621   * // Global variable. preferably located in  shared memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   622   * IfxCpu_syncEvent event;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   623   * boolean errorVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   624   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   625   * // Below code should be repeated in Each core
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   626   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   627   * // Upon reaching Synchonisation point
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   628   * IfxCpu_emitEvent(&event);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   629   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   630   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   631   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   632   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   633   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   634  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   635  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   636  /** \brief This function sets a bit corresponding to the core in the event.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   637   * \param event Synchronous Event
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   638   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   639   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   640   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   641   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   642   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   643  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   644  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   645  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   646  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   647  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   648  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   649  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   650  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   651  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   652  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   653      Ifx_CPU_ICR reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   654      reg.U = __mfcr(CPU_ICR);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   655      return reg.B.IE != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   656  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   657  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   658  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   659  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   660  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   661      boolean enabled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   662      enabled = IfxCpu_areInterruptsEnabled();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   663      __disable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   664      __nop();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   665      return enabled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   666  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   667  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   668  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   670  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   671      __enable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   672  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   673  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   674  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   675  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   676  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   677      uint32 cpu_pmaVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   678      uint16 checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   679      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   680      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   681  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   682      /*resolve the restrictions*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   683      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   684      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   685  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   686      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   687      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   688          segmentNumberMask |= checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   689      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   690  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   691      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   692  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   693      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   694  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   695      /*The CPU_PMA registers are ENDINIT protected*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   696      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   697      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   698      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   699      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   700      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   701      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   702      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   703  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   704  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   705  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   707  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   708      uint32 cpu_pmaVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   709      uint16 checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   710      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   711      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   712  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   713      /*resolve the restrictions*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   714      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   715      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   716  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   717      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   718      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   719          segmentNumberMask |= checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   720      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   721  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   722      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   723  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   724      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   725  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   726      /*The CPU_PMA registers are ENDINIT protected*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   727      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   728      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   729      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   730      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   731      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   732      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   733      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   734  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   735  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   736  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   737  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   738  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   739      __disable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   740      __nop();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   741  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   742  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   743  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   744  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   745  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   746      Ifx_CPU *module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   747  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   748      if (cpu < IfxCpu_ResourceCpu_none)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   749      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   750          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   751      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   752      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   753      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   754          module = NULL_PTR;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   755      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   756  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   757      return module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   758  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   759  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   760  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   761  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   762  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   763      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   764  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   765  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   766  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   767  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   768  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   769      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   770  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   771  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   772  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   773  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   774  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   775      Ifx_CPU_CORE_ID reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   776      reg.U = __mfcr(CPU_CORE_ID);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   778  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   780  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   781  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   782  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   783      Ifx_CPU_CORE_ID reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   784      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L420:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   785      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	and	d15,#7
.L421:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   785      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;      (inlined)
	j	.L2

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   786  }      (inlined)
.L2:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    66  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    67      Ifx_SCU_WDTCPU     *watchdog = &MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()];
	mul	d15,d15,#12
	mov.a	a15,d15
	movh.a	a3,#61443
	add.a	a3,a15
	lea	a15,[a3]24832
.L422:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    68  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    69      /* Read Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    70      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    71      wdt_con0.U = watchdog->CON0.U;
	ld.w	d15,[a15]
.L423:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    72  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    73      if (wdt_con0.B.LCK)
	jz.t	d15:1,.L3
.L680:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    74      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    75          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    76          wdt_con0.B.ENDINIT = 1;
	or	d15,#1
.L681:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    77          wdt_con0.B.LCK     = 0;
	insert	d15,d15,#0,#1,#1
.L682:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    78          wdt_con0.B.PW      = password;
	insert	d15,d15,d4,#2,#14
.L683:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    79  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    80          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    81          watchdog->CON0.U = wdt_con0.U;
	st.w	[a15],d15
.L3:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    82      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    83  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    84      /* Set new Password, ENDINT and LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    85      wdt_con0.B.ENDINIT = 1;
	or	d15,#1
.L684:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    86      wdt_con0.B.LCK     = 1;
	or	d15,#2
.L685:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    87      wdt_con0.B.PW      = newPassword;
	insert	d15,d15,d5,#2,#14
.L686:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    88      watchdog->CON0.U   = wdt_con0.U;
	st.w	[a15],d15
.L687:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    89  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    90      /* read back ENDINIT and wait until it has been set */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    91      while (watchdog->CON0.B.ENDINIT == 0)
	j	.L4
.L5:
.L4:
	ld.w	d15,[a15]
.L688:
	jz.t	d15:0,.L5
.L689:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    92      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    93  }
	ret
.L322:
	
__IfxScuWdt_changeCpuWatchdogPassword_function_end:
	.size	IfxScuWdt_changeCpuWatchdogPassword,__IfxScuWdt_changeCpuWatchdogPassword_function_end-IfxScuWdt_changeCpuWatchdogPassword
.L196:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_changeCpuWatchdogReload',code,cluster('IfxScuWdt_changeCpuWatchdogReload')
	.sect	'.text.IfxScuWdt.IfxScuWdt_changeCpuWatchdogReload'
	.align	2
	
	.global	IfxScuWdt_changeCpuWatchdogReload

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    94  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    95  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    96  void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload)
; Function IfxScuWdt_changeCpuWatchdogReload
.L114:
IfxScuWdt_changeCpuWatchdogReload:	.type	func

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    44   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    45   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    46   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    47   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    48   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    49   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    50   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    51   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    52   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    53   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    54   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    55   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    56   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    57   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    58   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    59   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    60   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    61   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    63  #ifndef IFXCPU_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    64  #define IFXCPU_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    65  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    66  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    67  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    68  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    69  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    70  #include "_Impl/IfxCpu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    71  #include "IfxSrc_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    72  #include "IfxScu_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    73  #include "IfxStm_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    74  #include "_Impl/IfxScu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    75  #include "_Utilities/Ifx_Assert.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    76  #include "Scu/Std/IfxScuWdt.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    77  #include "Scu/Std/IfxScuCcu.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    78  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    79  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    80  /*-----------------------------------Macros-----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    81  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    82  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    83  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    84   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    85   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    86   * the CPU number.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    87   * Example usage:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    88   *  \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    89   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    90   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    91   *  \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    92   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    93  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    94  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    95  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    96   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    97   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    98   * the CPU number.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    99   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   100   *   Example usage:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   101   *   \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   102   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   103   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   104   *   \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   105   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   106  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   107  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   108  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   109  /*------------------------------Type Definitions------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   110  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   111  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   112  /** \brief Lock type Spin lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   113   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   114  typedef unsigned int IfxCpu_spinLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   115  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Lock type Mutex lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   117   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   118  typedef unsigned int IfxCpu_mutexLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   119  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   120  /** \brief Event used for synchronisation.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   121   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   122  typedef unsigned int IfxCpu_syncEvent;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   123  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   124  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   125  /*--------------------------------Enumerations--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   127  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   128  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   129   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   130  /** \brief Enumeration for the Cpu mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   131   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   132  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   133  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_halt,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_run,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_idle,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   137      IfxCpu_CoreMode_sleep,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   138      IfxCpu_CoreMode_stby,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   139      IfxCpu_CoreMode_unknown
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   140  } IfxCpu_CoreMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   141  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance conunter modes
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   143   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   144  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   145  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   148  } IfxCpu_CounterMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   149  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   150  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   151  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   152  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   153  /*-----------------------------Data Structures--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   154  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   155  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   156  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   157   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   158  /** \brief counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   159   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   160  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   161  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   162      uint32  counter;        /**< \brief Counter value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   163      boolean overlfow;       /**< \brief sticky overlfow */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_Counter;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   166  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   167  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   168  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   169   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   170  /** \brief Performance counter result
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   171   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   172  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   173  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_Perf;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   181  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   182  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   183  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   184   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   185  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   187  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   188  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief API to get the address for CPU HW module register memory map
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   191   * \param cpu Resource index of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   192   * \return CPU module register address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   193   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   194  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   195  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief API to get core id of the CPU of the caller.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   197   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   198   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   199   * \return Resource index of the CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   200   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   201  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   202  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   203  /** \brief API to get cpu index of the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   204   * Note: This api can be used whereever cpu no/index is needed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   205   * \return Resource index of the CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   206   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   207  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   208  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   209  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   210   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   211   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   212   * shall not be used to initialize the CSA of another CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   213   * \param csaBegin Pointer to start of context save area
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   214   * \param csaEnd Pointer to end of context save area
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   215   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   216   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   217  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   219  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   220   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   221   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   222  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   224  /** \brief Triggers Software Reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   225   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   226   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   227  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   228  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   229  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   230  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   231  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   232  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   233  /** \brief API to get current mode of CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   234   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   235   * \return Current mode of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   236   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   237  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   238  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   239  /** \brief API to get current mode of CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   240   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   241   * \return Resource index of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   242   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   243  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   244  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   245  /** \brief API to set mode of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   246   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   247   * \param mode CPU mode to be set by this API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   248   * \return Success status of the activity (setting the core mode).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   249   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   250   * \retval FALSE: If the activity can't be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   251   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   252  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   253  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   254  /** \brief API to set the program counter for the CPU specified.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   255   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   256   * \param programCounter Program counter value to be set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   257   * \return success status of the activity (setting program counter value).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   258   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   259   * \retval FALSE: If the activity can't be performed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   260   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   261  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   262  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   263  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   264   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   265   * \param programCounter Program counter value to start the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   266   * \return success status of the activity (setting program counter value).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   268   * \retval FALSE: If the activity can't be performed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   269   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   270  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   271  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   272  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   273  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   274  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   275   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   277  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   278  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   279  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   280  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   281  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   282   * This API provides the status of CPU where this API is called
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   283   * \return Status of global interrupt enable bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   284   * \retval TRUE: Global interrupts enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   285   * \retval FALSE: Global interrupts disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   286   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   287  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   288  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   289  /** \brief API to disable global interrupt and return the previous status.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   290   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   291   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   292   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   293   * \return Previous status of global interrupt enable bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   294   * \retval TRUE: Previously, global interrupts enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   295   * \retval FALSE: Previously, global interrupts disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   296   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   297  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   298  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   299  /** \brief API to enable global interrupt.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   300   * This API simply enables the global interrupt.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   301   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   302   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   303  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   304  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   305  /** \brief Disable the Global Interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   306   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   311   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   312   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   313   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   314   * \param enabled Previous status of the global interrupt enable bit
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   315   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   329   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   330   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   331   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   332   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   333   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   334   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   335  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   336  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   337  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   338   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   339   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   340   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   341   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to invalidate the program cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   352   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   353   * \return Status TRUE/FALSE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enable Command to enable or bypass the data cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   362   * TRUE: Enable the data cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   363   * FALSE: Bypass the data cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   364   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   369   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   371   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   372   * \param enable Command to enable or bypass the program cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   373   * TRUE: Enable the program cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   374   * FALSE: Bypass the program cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   375   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   376   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   377  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   378  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   379  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   380  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   381  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   382   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   384  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   385  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   386  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   387  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   388  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   389   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   390   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   391   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   392   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   393   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   394  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   395  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   396  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   397   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   398   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   399   * It cannot be used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   400   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   401   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   402   * reading the counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   403   * \return Status of sticky overflow bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   404   * \retval TRUE: Sticky overflow bit is set.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   405   * \retval FALSE: Sticky overflow bit is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   406   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   408  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   410   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   413   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   414   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   415  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   416  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   417  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   418   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   419   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   420   * It cannot be used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   421   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   422   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   423   * reading the counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   424   * \return Status of sticky overflow bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   425   * \retval TRUE: Sticky overflow bit is set.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   426   * \retval FALSE: Sticky overflow bit is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   427   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   428  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   429  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   430  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   431   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   432   * \return counter value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   433   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   434  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   435  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   436  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   437   * This is generic function to get sticky overflow bit of any performance counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   438   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief Reset and start instruction, clock and multi counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   445   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   446   * \param mode Counter mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   448   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   450  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   452   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   455   * \param enable enable Command to enable or disable the performance counter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   456   * TRUE: Enable the performance counter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   457   * FALSE: Disable the performance counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   458   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   459   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   460  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   461  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   462  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   463  /** \brief Stop instruction and clock counters, return their values
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   464   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   465   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   466   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   467   * \return Performance counter result
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   468   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   470  #endif
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   471  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   472  /** \brief API to update clock counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   473   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   474   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   475   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   476   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   477   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   478   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   479  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   480  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   481  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   482   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   483   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   484   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   485   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   486   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief API to update performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   491   * This is generic function to update any of the performance counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   492   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   493   * \param count Count
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   498  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   499  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   500  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   501   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   502  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   503  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   504  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   505  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   506  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   507  /** \brief API to acquire the mutex (binary semaphore).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   508   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   509   * This API can be used to acquire/get the mutex.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   510   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   511   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   512   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   513   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   514   *    IfxCpu_mutexLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   515   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   516   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   517   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   518   *      IfxCpu_releaseMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   519   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   520   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   521   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   522   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   523  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   524  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   525  /** \brief API to unlock the mutex .
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   526   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   527   * This API can be used to unlock the previously acquired mutex
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   528   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   529   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   530   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   531   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   532   *    IfxCpu_mutexLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   533   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   534   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   535   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   536   *      IfxCpu_releaseMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   537   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   538   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   539   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   540   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   541  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   542  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   543  /** \brief API to unlock the resource .
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   544   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   545   * This API can be used to unlock the previously acquired lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   546   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   547   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   548   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   549  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   550  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   551  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   552   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   553   * This API can be used to spin lock for the lock for the given timeout period.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   554   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   555   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   556   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   557   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   558   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   559   *    IfxCpu_spinLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   560   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   561   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   562   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   563   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   564   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   565   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   566   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   567   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   568  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   569  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   570  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   572  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   573   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   574  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   575  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   577  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   578  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   579  /** \brief API to get random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   580   * \param seed Pointer to seed value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   581   * \return random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   582   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   583  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   584  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   585  /** \brief API to get random value with in the range
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   586   * \param seed Pointer to seed value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   587   * \param min minimum range value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   588   * \param max maximum range value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   589   * \return random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   590   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   591  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   592  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   593  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   594   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   595   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   596   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   597   * CORE_ID register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   598   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   600   * e.g:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   601   * 1. Check for synchronisation between core 0 and core 5
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   602   * # define 0x41U
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   603   * 2. Check for synchronisation between core 0 to core 5
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   604   * # define 0x5FU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   605   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   606   * Note:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   607   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   608   * Core 0: 0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   609   * Core 1: 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   610   * Core 2: 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   611   * Core 3: 3
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   612   * Core 4: 4
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   613   * Core 5: 6
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   614   * \param event Synchronous Event
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   615   * \param timeoutMilliSec timeout in millisec
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   616   * \return Error condition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   617   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   618   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   619   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   620   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   621   * // Global variable. preferably located in  shared memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   622   * IfxCpu_syncEvent event;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   623   * boolean errorVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   624   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   625   * // Below code should be repeated in Each core
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   626   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   627   * // Upon reaching Synchonisation point
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   628   * IfxCpu_emitEvent(&event);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   629   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   630   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   631   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   632   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   633   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   634  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   635  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   636  /** \brief This function sets a bit corresponding to the core in the event.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   637   * \param event Synchronous Event
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   638   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   639   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   640   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   641   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   642   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   643  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   644  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   645  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   646  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   647  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   648  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   649  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   650  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   651  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   652  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   653      Ifx_CPU_ICR reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   654      reg.U = __mfcr(CPU_ICR);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   655      return reg.B.IE != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   656  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   657  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   658  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   659  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   660  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   661      boolean enabled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   662      enabled = IfxCpu_areInterruptsEnabled();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   663      __disable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   664      __nop();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   665      return enabled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   666  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   667  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   668  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   670  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   671      __enable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   672  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   673  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   674  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   675  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   676  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   677      uint32 cpu_pmaVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   678      uint16 checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   679      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   680      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   681  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   682      /*resolve the restrictions*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   683      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   684      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   685  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   686      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   687      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   688          segmentNumberMask |= checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   689      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   690  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   691      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   692  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   693      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   694  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   695      /*The CPU_PMA registers are ENDINIT protected*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   696      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   697      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   698      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   699      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   700      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   701      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   702      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   703  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   704  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   705  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   707  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   708      uint32 cpu_pmaVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   709      uint16 checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   710      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   711      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   712  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   713      /*resolve the restrictions*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   714      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   715      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   716  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   717      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   718      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   719          segmentNumberMask |= checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   720      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   721  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   722      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   723  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   724      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   725  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   726      /*The CPU_PMA registers are ENDINIT protected*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   727      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   728      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   729      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   730      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   731      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   732      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   733      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   734  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   735  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   736  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   737  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   738  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   739      __disable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   740      __nop();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   741  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   742  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   743  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   744  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   745  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   746      Ifx_CPU *module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   747  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   748      if (cpu < IfxCpu_ResourceCpu_none)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   749      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   750          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   751      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   752      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   753      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   754          module = NULL_PTR;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   755      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   756  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   757      return module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   758  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   759  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   760  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   761  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   762  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   763      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   764  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   765  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   766  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   767  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   768  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   769      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   770  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   771  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   772  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   773  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   774  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   775      Ifx_CPU_CORE_ID reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   776      reg.U = __mfcr(CPU_CORE_ID);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   778  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   780  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   781  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   782  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   783      Ifx_CPU_CORE_ID reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   784      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L424:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   785      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	and	d15,#7
.L425:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   785      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;      (inlined)
	j	.L6

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   786  }      (inlined)
.L6:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    97  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    98      /* Select CPU Watchdog based on Core Id */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	    99      uint32              coreId = IfxCpu_getCoreIndex();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   100      Ifx_SCU_WDTCPU     *wdt    = &MODULE_SCU.WDTCPU[coreId];
	mul	d15,d15,#12
	mov.a	a15,d15
	movh.a	a3,#61443
	add.a	a3,a15
	lea	a15,[a3]24832
.L426:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   101  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   102      /* Read Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   103      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   104      wdt_con0.U = wdt->CON0.U;
	ld.w	d15,[a15]
.L427:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   105  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   106      if (wdt_con0.B.LCK)
	jz.t	d15:1,.L7
.L694:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   107      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   108          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   109          wdt_con0.B.ENDINIT = 1;
	or	d15,#1
.L695:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   110          wdt_con0.B.LCK     = 0;
	insert	d15,d15,#0,#1,#1
.L696:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   111          wdt_con0.B.PW      = password;
	insert	d15,d15,d4,#2,#14
.L697:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   112  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   113          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   114          wdt->CON0.U = wdt_con0.U;
	st.w	[a15],d15
.L7:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   115      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   116  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   117      /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   118      wdt_con0.B.ENDINIT = 1;
	or	d15,#1
.L698:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   119      wdt_con0.B.LCK     = 1;
	or	d15,#2
.L699:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   120      wdt_con0.B.REL     = reload;
	insert	d15,d15,d5,#16,#16
.L700:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   121      wdt->CON0.U        = wdt_con0.U;
	st.w	[a15],d15
.L701:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   122  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   123      /* read back ENDINIT and wait until it has been set */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   124      while (wdt->CON0.B.ENDINIT == 0)
	j	.L8
.L9:
.L8:
	ld.w	d15,[a15]
.L702:
	jz.t	d15:0,.L9
.L703:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   125      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   126  }
	ret
.L328:
	
__IfxScuWdt_changeCpuWatchdogReload_function_end:
	.size	IfxScuWdt_changeCpuWatchdogReload,__IfxScuWdt_changeCpuWatchdogReload_function_end-IfxScuWdt_changeCpuWatchdogReload
.L201:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_changeSafetyWatchdogPassword',code,cluster('IfxScuWdt_changeSafetyWatchdogPassword')
	.sect	'.text.IfxScuWdt.IfxScuWdt_changeSafetyWatchdogPassword'
	.align	2
	
	.global	IfxScuWdt_changeSafetyWatchdogPassword

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   127  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   128  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   129  void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword)
; Function IfxScuWdt_changeSafetyWatchdogPassword
.L116:
IfxScuWdt_changeSafetyWatchdogPassword:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   130  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   131      Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;
	movh.a	a15,#61443
.L428:
	lea	a15,[a15]@los(0xf00360f0)
.L708:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   132  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   133      /* Read Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   134      Ifx_SCU_WDTS_CON0 wdt_con0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   135      wdt_con0.U = watchdog->CON0.U;
	ld.w	d15,[a15]
.L429:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   136  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   137      if (wdt_con0.B.LCK)
	jz.t	d15:1,.L10
.L709:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   138      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   139          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   140          wdt_con0.B.ENDINIT = 1;
	or	d15,#1
.L710:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   141          wdt_con0.B.LCK     = 0;
	insert	d15,d15,#0,#1,#1
.L711:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   142          wdt_con0.B.PW      = password;
	insert	d15,d15,d4,#2,#14
.L712:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   143  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   144          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   145          watchdog->CON0.U = wdt_con0.U;
	st.w	[a15],d15
.L10:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   146      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   147  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   148      /* Set new Password, ENDINT and LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   149      wdt_con0.B.ENDINIT = 1;
	or	d15,#1
.L713:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   150      wdt_con0.B.LCK     = 1;
	or	d15,#2
.L714:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   151      wdt_con0.B.PW      = newPassword;
	insert	d15,d15,d5,#2,#14
.L715:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   152      watchdog->CON0.U   = wdt_con0.U;
	st.w	[a15],d15
.L716:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   153  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   154      /* read back ENDINIT and wait until it has been set */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   155      while (watchdog->CON0.B.ENDINIT == 0)
	j	.L11
.L12:
.L11:
	ld.w	d15,[a15]
.L717:
	jz.t	d15:0,.L12
.L718:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   156      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   157  }
	ret
.L336:
	
__IfxScuWdt_changeSafetyWatchdogPassword_function_end:
	.size	IfxScuWdt_changeSafetyWatchdogPassword,__IfxScuWdt_changeSafetyWatchdogPassword_function_end-IfxScuWdt_changeSafetyWatchdogPassword
.L206:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_changeSafetyWatchdogReload',code,cluster('IfxScuWdt_changeSafetyWatchdogReload')
	.sect	'.text.IfxScuWdt.IfxScuWdt_changeSafetyWatchdogReload'
	.align	2
	
	.global	IfxScuWdt_changeSafetyWatchdogReload

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   158  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   159  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   160  void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload)
; Function IfxScuWdt_changeSafetyWatchdogReload
.L118:
IfxScuWdt_changeSafetyWatchdogReload:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   161  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   162      /* Initialize pointer to Safety Watchdog */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   163      Ifx_SCU_WDTS     *wdt = &MODULE_SCU.WDTS;
	movh.a	a15,#61443
.L430:
	lea	a15,[a15]@los(0xf00360f0)
.L723:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   164  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   165      /* Read Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   166      Ifx_SCU_WDTS_CON0 wdt_con0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   167      wdt_con0.U = wdt->CON0.U;
	ld.w	d15,[a15]
.L431:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   168  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   169      if (wdt_con0.B.LCK)
	jz.t	d15:1,.L13
.L724:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   170      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   171          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   172          wdt_con0.B.ENDINIT = 1;
	or	d15,#1
.L725:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   173          wdt_con0.B.LCK     = 0;
	insert	d15,d15,#0,#1,#1
.L726:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   174          wdt_con0.B.PW      = password;
	insert	d15,d15,d4,#2,#14
.L727:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   175  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   176          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   177          wdt->CON0.U = wdt_con0.U;
	st.w	[a15],d15
.L13:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   178      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   179  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   180      /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   181      wdt_con0.B.ENDINIT = 1;
	or	d15,#1
.L728:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   182      wdt_con0.B.LCK     = 1;
	or	d15,#2
.L729:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   183      wdt_con0.B.REL     = reload;
	insert	d15,d15,d5,#16,#16
.L730:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   184      wdt->CON0.U        = wdt_con0.U;
	st.w	[a15],d15
.L731:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   185  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   186      /* read back ENDINIT and wait until it has been set */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   187      while (wdt->CON0.B.ENDINIT == 0)
	j	.L14
.L15:
.L14:
	ld.w	d15,[a15]
.L732:
	jz.t	d15:0,.L15
.L733:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   188      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   189  }
	ret
.L341:
	
__IfxScuWdt_changeSafetyWatchdogReload_function_end:
	.size	IfxScuWdt_changeSafetyWatchdogReload,__IfxScuWdt_changeSafetyWatchdogReload_function_end-IfxScuWdt_changeSafetyWatchdogReload
.L211:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_clearCpuEndinit',code,cluster('IfxScuWdt_clearCpuEndinit')
	.sect	'.text.IfxScuWdt.IfxScuWdt_clearCpuEndinit'
	.align	2
	
	.global	IfxScuWdt_clearCpuEndinit

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   190  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   191  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   192  void IfxScuWdt_clearCpuEndinit(uint16 password)
; Function IfxScuWdt_clearCpuEndinit
.L120:
IfxScuWdt_clearCpuEndinit:	.type	func

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    44   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    45   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    46   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    47   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    48   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    49   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    50   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    51   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    52   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    53   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    54   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    55   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    56   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    57   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    58   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    59   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    60   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    61   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    63  #ifndef IFXCPU_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    64  #define IFXCPU_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    65  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    66  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    67  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    68  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    69  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    70  #include "_Impl/IfxCpu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    71  #include "IfxSrc_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    72  #include "IfxScu_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    73  #include "IfxStm_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    74  #include "_Impl/IfxScu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    75  #include "_Utilities/Ifx_Assert.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    76  #include "Scu/Std/IfxScuWdt.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    77  #include "Scu/Std/IfxScuCcu.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    78  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    79  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    80  /*-----------------------------------Macros-----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    81  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    82  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    83  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    84   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    85   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    86   * the CPU number.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    87   * Example usage:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    88   *  \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    89   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    90   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    91   *  \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    92   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    93  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    94  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    95  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    96   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    97   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    98   * the CPU number.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    99   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   100   *   Example usage:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   101   *   \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   102   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   103   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   104   *   \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   105   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   106  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   107  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   108  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   109  /*------------------------------Type Definitions------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   110  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   111  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   112  /** \brief Lock type Spin lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   113   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   114  typedef unsigned int IfxCpu_spinLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   115  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Lock type Mutex lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   117   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   118  typedef unsigned int IfxCpu_mutexLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   119  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   120  /** \brief Event used for synchronisation.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   121   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   122  typedef unsigned int IfxCpu_syncEvent;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   123  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   124  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   125  /*--------------------------------Enumerations--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   127  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   128  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   129   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   130  /** \brief Enumeration for the Cpu mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   131   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   132  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   133  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_halt,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_run,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_idle,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   137      IfxCpu_CoreMode_sleep,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   138      IfxCpu_CoreMode_stby,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   139      IfxCpu_CoreMode_unknown
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   140  } IfxCpu_CoreMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   141  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance conunter modes
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   143   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   144  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   145  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   148  } IfxCpu_CounterMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   149  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   150  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   151  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   152  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   153  /*-----------------------------Data Structures--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   154  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   155  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   156  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   157   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   158  /** \brief counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   159   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   160  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   161  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   162      uint32  counter;        /**< \brief Counter value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   163      boolean overlfow;       /**< \brief sticky overlfow */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_Counter;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   166  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   167  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   168  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   169   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   170  /** \brief Performance counter result
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   171   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   172  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   173  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_Perf;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   181  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   182  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   183  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   184   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   185  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   187  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   188  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief API to get the address for CPU HW module register memory map
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   191   * \param cpu Resource index of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   192   * \return CPU module register address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   193   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   194  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   195  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief API to get core id of the CPU of the caller.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   197   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   198   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   199   * \return Resource index of the CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   200   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   201  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   202  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   203  /** \brief API to get cpu index of the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   204   * Note: This api can be used whereever cpu no/index is needed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   205   * \return Resource index of the CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   206   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   207  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   208  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   209  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   210   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   211   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   212   * shall not be used to initialize the CSA of another CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   213   * \param csaBegin Pointer to start of context save area
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   214   * \param csaEnd Pointer to end of context save area
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   215   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   216   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   217  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   219  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   220   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   221   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   222  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   224  /** \brief Triggers Software Reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   225   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   226   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   227  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   228  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   229  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   230  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   231  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   232  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   233  /** \brief API to get current mode of CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   234   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   235   * \return Current mode of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   236   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   237  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   238  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   239  /** \brief API to get current mode of CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   240   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   241   * \return Resource index of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   242   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   243  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   244  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   245  /** \brief API to set mode of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   246   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   247   * \param mode CPU mode to be set by this API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   248   * \return Success status of the activity (setting the core mode).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   249   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   250   * \retval FALSE: If the activity can't be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   251   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   252  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   253  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   254  /** \brief API to set the program counter for the CPU specified.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   255   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   256   * \param programCounter Program counter value to be set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   257   * \return success status of the activity (setting program counter value).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   258   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   259   * \retval FALSE: If the activity can't be performed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   260   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   261  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   262  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   263  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   264   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   265   * \param programCounter Program counter value to start the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   266   * \return success status of the activity (setting program counter value).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   268   * \retval FALSE: If the activity can't be performed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   269   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   270  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   271  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   272  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   273  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   274  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   275   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   277  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   278  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   279  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   280  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   281  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   282   * This API provides the status of CPU where this API is called
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   283   * \return Status of global interrupt enable bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   284   * \retval TRUE: Global interrupts enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   285   * \retval FALSE: Global interrupts disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   286   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   287  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   288  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   289  /** \brief API to disable global interrupt and return the previous status.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   290   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   291   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   292   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   293   * \return Previous status of global interrupt enable bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   294   * \retval TRUE: Previously, global interrupts enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   295   * \retval FALSE: Previously, global interrupts disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   296   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   297  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   298  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   299  /** \brief API to enable global interrupt.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   300   * This API simply enables the global interrupt.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   301   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   302   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   303  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   304  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   305  /** \brief Disable the Global Interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   306   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   311   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   312   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   313   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   314   * \param enabled Previous status of the global interrupt enable bit
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   315   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   329   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   330   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   331   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   332   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   333   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   334   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   335  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   336  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   337  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   338   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   339   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   340   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   341   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to invalidate the program cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   352   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   353   * \return Status TRUE/FALSE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enable Command to enable or bypass the data cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   362   * TRUE: Enable the data cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   363   * FALSE: Bypass the data cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   364   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   369   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   371   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   372   * \param enable Command to enable or bypass the program cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   373   * TRUE: Enable the program cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   374   * FALSE: Bypass the program cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   375   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   376   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   377  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   378  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   379  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   380  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   381  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   382   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   384  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   385  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   386  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   387  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   388  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   389   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   390   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   391   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   392   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   393   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   394  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   395  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   396  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   397   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   398   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   399   * It cannot be used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   400   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   401   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   402   * reading the counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   403   * \return Status of sticky overflow bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   404   * \retval TRUE: Sticky overflow bit is set.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   405   * \retval FALSE: Sticky overflow bit is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   406   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   408  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   410   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   413   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   414   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   415  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   416  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   417  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   418   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   419   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   420   * It cannot be used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   421   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   422   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   423   * reading the counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   424   * \return Status of sticky overflow bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   425   * \retval TRUE: Sticky overflow bit is set.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   426   * \retval FALSE: Sticky overflow bit is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   427   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   428  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   429  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   430  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   431   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   432   * \return counter value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   433   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   434  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   435  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   436  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   437   * This is generic function to get sticky overflow bit of any performance counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   438   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief Reset and start instruction, clock and multi counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   445   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   446   * \param mode Counter mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   448   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   450  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   452   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   455   * \param enable enable Command to enable or disable the performance counter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   456   * TRUE: Enable the performance counter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   457   * FALSE: Disable the performance counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   458   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   459   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   460  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   461  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   462  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   463  /** \brief Stop instruction and clock counters, return their values
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   464   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   465   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   466   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   467   * \return Performance counter result
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   468   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   470  #endif
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   471  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   472  /** \brief API to update clock counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   473   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   474   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   475   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   476   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   477   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   478   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   479  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   480  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   481  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   482   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   483   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   484   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   485   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   486   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief API to update performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   491   * This is generic function to update any of the performance counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   492   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   493   * \param count Count
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   498  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   499  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   500  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   501   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   502  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   503  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   504  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   505  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   506  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   507  /** \brief API to acquire the mutex (binary semaphore).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   508   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   509   * This API can be used to acquire/get the mutex.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   510   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   511   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   512   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   513   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   514   *    IfxCpu_mutexLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   515   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   516   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   517   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   518   *      IfxCpu_releaseMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   519   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   520   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   521   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   522   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   523  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   524  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   525  /** \brief API to unlock the mutex .
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   526   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   527   * This API can be used to unlock the previously acquired mutex
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   528   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   529   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   530   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   531   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   532   *    IfxCpu_mutexLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   533   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   534   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   535   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   536   *      IfxCpu_releaseMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   537   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   538   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   539   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   540   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   541  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   542  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   543  /** \brief API to unlock the resource .
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   544   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   545   * This API can be used to unlock the previously acquired lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   546   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   547   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   548   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   549  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   550  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   551  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   552   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   553   * This API can be used to spin lock for the lock for the given timeout period.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   554   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   555   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   556   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   557   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   558   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   559   *    IfxCpu_spinLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   560   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   561   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   562   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   563   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   564   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   565   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   566   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   567   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   568  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   569  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   570  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   572  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   573   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   574  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   575  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   577  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   578  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   579  /** \brief API to get random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   580   * \param seed Pointer to seed value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   581   * \return random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   582   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   583  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   584  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   585  /** \brief API to get random value with in the range
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   586   * \param seed Pointer to seed value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   587   * \param min minimum range value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   588   * \param max maximum range value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   589   * \return random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   590   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   591  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   592  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   593  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   594   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   595   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   596   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   597   * CORE_ID register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   598   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   600   * e.g:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   601   * 1. Check for synchronisation between core 0 and core 5
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   602   * # define 0x41U
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   603   * 2. Check for synchronisation between core 0 to core 5
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   604   * # define 0x5FU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   605   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   606   * Note:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   607   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   608   * Core 0: 0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   609   * Core 1: 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   610   * Core 2: 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   611   * Core 3: 3
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   612   * Core 4: 4
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   613   * Core 5: 6
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   614   * \param event Synchronous Event
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   615   * \param timeoutMilliSec timeout in millisec
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   616   * \return Error condition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   617   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   618   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   619   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   620   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   621   * // Global variable. preferably located in  shared memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   622   * IfxCpu_syncEvent event;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   623   * boolean errorVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   624   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   625   * // Below code should be repeated in Each core
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   626   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   627   * // Upon reaching Synchonisation point
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   628   * IfxCpu_emitEvent(&event);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   629   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   630   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   631   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   632   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   633   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   634  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   635  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   636  /** \brief This function sets a bit corresponding to the core in the event.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   637   * \param event Synchronous Event
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   638   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   639   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   640   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   641   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   642   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   643  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   644  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   645  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   646  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   647  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   648  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   649  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   650  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   651  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   652  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   653      Ifx_CPU_ICR reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   654      reg.U = __mfcr(CPU_ICR);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   655      return reg.B.IE != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   656  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   657  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   658  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   659  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   660  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   661      boolean enabled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   662      enabled = IfxCpu_areInterruptsEnabled();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   663      __disable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   664      __nop();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   665      return enabled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   666  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   667  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   668  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   670  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   671      __enable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   672  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   673  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   674  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   675  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   676  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   677      uint32 cpu_pmaVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   678      uint16 checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   679      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   680      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   681  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   682      /*resolve the restrictions*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   683      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   684      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   685  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   686      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   687      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   688          segmentNumberMask |= checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   689      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   690  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   691      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   692  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   693      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   694  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   695      /*The CPU_PMA registers are ENDINIT protected*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   696      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   697      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   698      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   699      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   700      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   701      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   702      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   703  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   704  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   705  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   707  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   708      uint32 cpu_pmaVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   709      uint16 checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   710      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   711      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   712  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   713      /*resolve the restrictions*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   714      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   715      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   716  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   717      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   718      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   719          segmentNumberMask |= checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   720      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   721  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   722      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   723  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   724      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   725  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   726      /*The CPU_PMA registers are ENDINIT protected*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   727      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   728      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   729      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   730      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   731      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   732      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   733      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   734  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   735  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   736  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   737  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   738  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   739      __disable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   740      __nop();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   741  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   742  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   743  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   744  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   745  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   746      Ifx_CPU *module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   747  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   748      if (cpu < IfxCpu_ResourceCpu_none)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   749      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   750          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   751      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   752      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   753      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   754          module = NULL_PTR;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   755      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   756  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   757      return module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   758  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   759  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   760  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   761  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   762  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   763      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   764  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   765  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   766  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   767  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   768  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   769      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   770  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   771  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   772  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   773  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   774  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   775      Ifx_CPU_CORE_ID reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   776      reg.U = __mfcr(CPU_CORE_ID);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   778  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   780  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   781  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   782  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   783      Ifx_CPU_CORE_ID reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   784      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L433:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   785      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	and	d15,#7
.L434:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   785      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;      (inlined)
	j	.L16

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   786  }      (inlined)
.L16:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   193  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   194      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
	mul	d15,d15,#12
	mov.a	a15,d15
	movh.a	a3,#61443
	add.a	a3,a15
	lea	a15,[a3]24832
.L290:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
	ld.w	d15,[a15]
.L616:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L17
.L617:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d15,d4,#2
	or	d15,#1
.L618:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L619:
	sha	d0,d0,#16
.L620:
	or	d15,d0
.L621:
	st.w	[a15],d15

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)      (inlined)
.L17:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d4,#2
.L432:
	or	d15,d4,#2
.L622:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L623:
	sha	d0,d0,#16
.L624:
	or	d15,d0
.L625:
	st.w	[a15],d15
.L626:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
	j	.L18
.L19:
.L18:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
	ld.w	d15,[a15]
	and	d15,#1
.L627:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
	jeq	d15,#1,.L19
.L291:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   195  }
	ret
.L282:
	
__IfxScuWdt_clearCpuEndinit_function_end:
	.size	IfxScuWdt_clearCpuEndinit,__IfxScuWdt_clearCpuEndinit_function_end-IfxScuWdt_clearCpuEndinit
.L176:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_clearSafetyEndinit',code,cluster('IfxScuWdt_clearSafetyEndinit')
	.sect	'.text.IfxScuWdt.IfxScuWdt_clearSafetyEndinit'
	.align	2
	
	.global	IfxScuWdt_clearSafetyEndinit

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   196  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   197  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   198  void IfxScuWdt_clearSafetyEndinit(uint16 password)
; Function IfxScuWdt_clearSafetyEndinit
.L122:
IfxScuWdt_clearSafetyEndinit:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   456      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   457  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   458  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   459  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   460  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   461  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf00360f0)
.L632:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L20
.L633:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   463      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   464          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   465          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   466                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   467                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
	sha	d15,d4,#2
	or	d15,#1
.L634:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   468                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	movh.a	a15,#61443
	ld.w	d0,[a15]@los(0xf00360f0)
	extr.u	d0,d0,#16,#16
.L635:
	sha	d0,d0,#16
.L636:
	or	d15,d0
.L637:
	movh.a	a15,#61443
	st.w	[a15]@los(0xf00360f0),d15

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)      (inlined)
.L20:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   469      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   470  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   471      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   472      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   473                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   474                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
	sha	d4,#2
.L435:
	or	d15,d4,#2
.L638:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   475                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	movh.a	a15,#61443
	ld.w	d0,[a15]@los(0xf00360f0)
	extr.u	d0,d0,#16,#16
.L639:
	sha	d0,d0,#16
.L640:
	or	d15,d0
.L641:
	movh.a	a15,#61443
	st.w	[a15]@los(0xf00360f0),d15
.L642:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)      (inlined)
	j	.L21
.L22:
.L21:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   476  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   477      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf00360f0)
	and	d15,#1
.L643:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)      (inlined)
	jeq	d15,#1,.L22
.L300:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   199  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   200      IfxScuWdt_clearSafetyEndinitInline(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   201  }
	ret
.L297:
	
__IfxScuWdt_clearSafetyEndinit_function_end:
	.size	IfxScuWdt_clearSafetyEndinit,__IfxScuWdt_clearSafetyEndinit_function_end-IfxScuWdt_clearSafetyEndinit
.L181:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_disableCpuWatchdog',code,cluster('IfxScuWdt_disableCpuWatchdog')
	.sect	'.text.IfxScuWdt.IfxScuWdt_disableCpuWatchdog'
	.align	2
	
	.global	IfxScuWdt_disableCpuWatchdog

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   203  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   204  void IfxScuWdt_disableCpuWatchdog(uint16 password)
; Function IfxScuWdt_disableCpuWatchdog
.L124:
IfxScuWdt_disableCpuWatchdog:	.type	func

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    44   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    45   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    46   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    47   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    48   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    49   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    50   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    51   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    52   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    53   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    54   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    55   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    56   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    57   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    58   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    59   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    60   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    61   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    63  #ifndef IFXCPU_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    64  #define IFXCPU_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    65  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    66  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    67  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    68  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    69  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    70  #include "_Impl/IfxCpu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    71  #include "IfxSrc_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    72  #include "IfxScu_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    73  #include "IfxStm_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    74  #include "_Impl/IfxScu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    75  #include "_Utilities/Ifx_Assert.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    76  #include "Scu/Std/IfxScuWdt.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    77  #include "Scu/Std/IfxScuCcu.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    78  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    79  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    80  /*-----------------------------------Macros-----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    81  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    82  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    83  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    84   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    85   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    86   * the CPU number.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    87   * Example usage:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    88   *  \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    89   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    90   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    91   *  \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    92   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    93  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    94  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    95  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    96   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    97   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    98   * the CPU number.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    99   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   100   *   Example usage:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   101   *   \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   102   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   103   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   104   *   \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   105   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   106  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   107  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   108  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   109  /*------------------------------Type Definitions------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   110  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   111  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   112  /** \brief Lock type Spin lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   113   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   114  typedef unsigned int IfxCpu_spinLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   115  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Lock type Mutex lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   117   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   118  typedef unsigned int IfxCpu_mutexLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   119  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   120  /** \brief Event used for synchronisation.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   121   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   122  typedef unsigned int IfxCpu_syncEvent;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   123  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   124  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   125  /*--------------------------------Enumerations--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   127  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   128  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   129   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   130  /** \brief Enumeration for the Cpu mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   131   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   132  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   133  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_halt,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_run,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_idle,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   137      IfxCpu_CoreMode_sleep,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   138      IfxCpu_CoreMode_stby,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   139      IfxCpu_CoreMode_unknown
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   140  } IfxCpu_CoreMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   141  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance conunter modes
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   143   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   144  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   145  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   148  } IfxCpu_CounterMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   149  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   150  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   151  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   152  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   153  /*-----------------------------Data Structures--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   154  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   155  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   156  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   157   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   158  /** \brief counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   159   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   160  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   161  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   162      uint32  counter;        /**< \brief Counter value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   163      boolean overlfow;       /**< \brief sticky overlfow */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_Counter;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   166  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   167  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   168  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   169   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   170  /** \brief Performance counter result
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   171   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   172  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   173  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_Perf;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   181  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   182  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   183  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   184   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   185  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   187  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   188  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief API to get the address for CPU HW module register memory map
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   191   * \param cpu Resource index of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   192   * \return CPU module register address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   193   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   194  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   195  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief API to get core id of the CPU of the caller.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   197   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   198   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   199   * \return Resource index of the CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   200   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   201  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   202  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   203  /** \brief API to get cpu index of the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   204   * Note: This api can be used whereever cpu no/index is needed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   205   * \return Resource index of the CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   206   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   207  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   208  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   209  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   210   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   211   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   212   * shall not be used to initialize the CSA of another CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   213   * \param csaBegin Pointer to start of context save area
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   214   * \param csaEnd Pointer to end of context save area
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   215   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   216   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   217  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   219  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   220   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   221   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   222  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   224  /** \brief Triggers Software Reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   225   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   226   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   227  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   228  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   229  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   230  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   231  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   232  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   233  /** \brief API to get current mode of CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   234   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   235   * \return Current mode of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   236   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   237  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   238  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   239  /** \brief API to get current mode of CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   240   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   241   * \return Resource index of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   242   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   243  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   244  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   245  /** \brief API to set mode of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   246   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   247   * \param mode CPU mode to be set by this API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   248   * \return Success status of the activity (setting the core mode).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   249   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   250   * \retval FALSE: If the activity can't be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   251   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   252  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   253  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   254  /** \brief API to set the program counter for the CPU specified.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   255   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   256   * \param programCounter Program counter value to be set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   257   * \return success status of the activity (setting program counter value).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   258   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   259   * \retval FALSE: If the activity can't be performed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   260   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   261  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   262  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   263  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   264   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   265   * \param programCounter Program counter value to start the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   266   * \return success status of the activity (setting program counter value).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   268   * \retval FALSE: If the activity can't be performed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   269   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   270  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   271  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   272  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   273  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   274  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   275   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   277  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   278  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   279  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   280  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   281  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   282   * This API provides the status of CPU where this API is called
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   283   * \return Status of global interrupt enable bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   284   * \retval TRUE: Global interrupts enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   285   * \retval FALSE: Global interrupts disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   286   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   287  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   288  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   289  /** \brief API to disable global interrupt and return the previous status.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   290   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   291   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   292   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   293   * \return Previous status of global interrupt enable bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   294   * \retval TRUE: Previously, global interrupts enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   295   * \retval FALSE: Previously, global interrupts disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   296   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   297  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   298  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   299  /** \brief API to enable global interrupt.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   300   * This API simply enables the global interrupt.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   301   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   302   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   303  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   304  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   305  /** \brief Disable the Global Interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   306   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   311   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   312   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   313   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   314   * \param enabled Previous status of the global interrupt enable bit
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   315   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   329   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   330   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   331   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   332   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   333   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   334   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   335  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   336  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   337  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   338   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   339   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   340   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   341   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to invalidate the program cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   352   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   353   * \return Status TRUE/FALSE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enable Command to enable or bypass the data cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   362   * TRUE: Enable the data cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   363   * FALSE: Bypass the data cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   364   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   369   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   371   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   372   * \param enable Command to enable or bypass the program cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   373   * TRUE: Enable the program cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   374   * FALSE: Bypass the program cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   375   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   376   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   377  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   378  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   379  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   380  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   381  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   382   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   384  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   385  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   386  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   387  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   388  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   389   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   390   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   391   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   392   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   393   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   394  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   395  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   396  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   397   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   398   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   399   * It cannot be used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   400   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   401   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   402   * reading the counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   403   * \return Status of sticky overflow bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   404   * \retval TRUE: Sticky overflow bit is set.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   405   * \retval FALSE: Sticky overflow bit is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   406   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   408  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   410   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   413   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   414   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   415  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   416  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   417  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   418   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   419   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   420   * It cannot be used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   421   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   422   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   423   * reading the counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   424   * \return Status of sticky overflow bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   425   * \retval TRUE: Sticky overflow bit is set.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   426   * \retval FALSE: Sticky overflow bit is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   427   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   428  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   429  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   430  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   431   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   432   * \return counter value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   433   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   434  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   435  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   436  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   437   * This is generic function to get sticky overflow bit of any performance counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   438   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief Reset and start instruction, clock and multi counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   445   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   446   * \param mode Counter mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   448   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   450  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   452   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   455   * \param enable enable Command to enable or disable the performance counter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   456   * TRUE: Enable the performance counter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   457   * FALSE: Disable the performance counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   458   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   459   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   460  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   461  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   462  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   463  /** \brief Stop instruction and clock counters, return their values
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   464   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   465   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   466   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   467   * \return Performance counter result
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   468   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   470  #endif
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   471  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   472  /** \brief API to update clock counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   473   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   474   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   475   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   476   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   477   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   478   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   479  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   480  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   481  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   482   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   483   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   484   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   485   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   486   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief API to update performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   491   * This is generic function to update any of the performance counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   492   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   493   * \param count Count
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   498  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   499  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   500  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   501   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   502  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   503  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   504  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   505  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   506  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   507  /** \brief API to acquire the mutex (binary semaphore).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   508   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   509   * This API can be used to acquire/get the mutex.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   510   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   511   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   512   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   513   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   514   *    IfxCpu_mutexLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   515   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   516   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   517   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   518   *      IfxCpu_releaseMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   519   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   520   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   521   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   522   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   523  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   524  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   525  /** \brief API to unlock the mutex .
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   526   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   527   * This API can be used to unlock the previously acquired mutex
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   528   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   529   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   530   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   531   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   532   *    IfxCpu_mutexLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   533   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   534   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   535   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   536   *      IfxCpu_releaseMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   537   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   538   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   539   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   540   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   541  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   542  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   543  /** \brief API to unlock the resource .
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   544   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   545   * This API can be used to unlock the previously acquired lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   546   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   547   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   548   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   549  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   550  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   551  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   552   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   553   * This API can be used to spin lock for the lock for the given timeout period.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   554   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   555   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   556   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   557   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   558   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   559   *    IfxCpu_spinLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   560   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   561   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   562   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   563   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   564   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   565   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   566   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   567   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   568  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   569  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   570  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   572  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   573   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   574  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   575  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   577  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   578  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   579  /** \brief API to get random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   580   * \param seed Pointer to seed value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   581   * \return random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   582   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   583  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   584  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   585  /** \brief API to get random value with in the range
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   586   * \param seed Pointer to seed value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   587   * \param min minimum range value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   588   * \param max maximum range value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   589   * \return random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   590   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   591  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   592  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   593  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   594   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   595   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   596   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   597   * CORE_ID register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   598   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   600   * e.g:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   601   * 1. Check for synchronisation between core 0 and core 5
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   602   * # define 0x41U
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   603   * 2. Check for synchronisation between core 0 to core 5
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   604   * # define 0x5FU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   605   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   606   * Note:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   607   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   608   * Core 0: 0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   609   * Core 1: 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   610   * Core 2: 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   611   * Core 3: 3
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   612   * Core 4: 4
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   613   * Core 5: 6
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   614   * \param event Synchronous Event
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   615   * \param timeoutMilliSec timeout in millisec
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   616   * \return Error condition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   617   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   618   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   619   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   620   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   621   * // Global variable. preferably located in  shared memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   622   * IfxCpu_syncEvent event;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   623   * boolean errorVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   624   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   625   * // Below code should be repeated in Each core
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   626   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   627   * // Upon reaching Synchonisation point
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   628   * IfxCpu_emitEvent(&event);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   629   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   630   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   631   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   632   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   633   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   634  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   635  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   636  /** \brief This function sets a bit corresponding to the core in the event.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   637   * \param event Synchronous Event
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   638   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   639   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   640   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   641   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   642   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   643  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   644  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   645  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   646  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   647  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   648  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   649  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   650  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   651  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   652  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   653      Ifx_CPU_ICR reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   654      reg.U = __mfcr(CPU_ICR);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   655      return reg.B.IE != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   656  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   657  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   658  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   659  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   660  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   661      boolean enabled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   662      enabled = IfxCpu_areInterruptsEnabled();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   663      __disable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   664      __nop();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   665      return enabled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   666  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   667  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   668  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   670  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   671      __enable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   672  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   673  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   674  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   675  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   676  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   677      uint32 cpu_pmaVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   678      uint16 checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   679      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   680      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   681  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   682      /*resolve the restrictions*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   683      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   684      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   685  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   686      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   687      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   688          segmentNumberMask |= checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   689      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   690  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   691      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   692  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   693      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   694  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   695      /*The CPU_PMA registers are ENDINIT protected*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   696      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   697      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   698      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   699      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   700      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   701      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   702      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   703  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   704  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   705  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   707  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   708      uint32 cpu_pmaVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   709      uint16 checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   710      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   711      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   712  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   713      /*resolve the restrictions*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   714      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   715      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   716  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   717      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   718      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   719          segmentNumberMask |= checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   720      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   721  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   722      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   723  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   724      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   725  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   726      /*The CPU_PMA registers are ENDINIT protected*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   727      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   728      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   729      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   730      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   731      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   732      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   733      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   734  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   735  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   736  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   737  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   738  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   739      __disable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   740      __nop();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   741  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   742  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   743  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   744  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   745  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   746      Ifx_CPU *module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   747  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   748      if (cpu < IfxCpu_ResourceCpu_none)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   749      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   750          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   751      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   752      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   753      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   754          module = NULL_PTR;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   755      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   756  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   757      return module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   758  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   759  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   760  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   761  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   762  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   763      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   764  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   765  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   766  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   767  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   768  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   769      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   770  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   771  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   772  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   773  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   774  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   775      Ifx_CPU_CORE_ID reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   776      reg.U = __mfcr(CPU_CORE_ID);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   778  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   780  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   781  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   782  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   783      Ifx_CPU_CORE_ID reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   784      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L437:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   785      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	and	d15,#7
.L438:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   785      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;      (inlined)
	j	.L23

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   786  }      (inlined)
.L23:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   205  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   206      /* Select CPU Watchdog based on Core Id */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   207      uint32          coreId = (uint32)IfxCpu_getCoreIndex();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   208      Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
	mul	d15,d15,#12
	mov.a	a15,d15
	movh.a	a3,#61443
	add.a	a3,a15
	lea	a15,[a3]24832
.L351:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
	ld.w	d15,[a15]
.L738:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L24
.L739:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d15,d4,#2
	or	d15,#1
.L740:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L741:
	sha	d0,d0,#16
.L742:
	or	d15,d0
.L743:
	st.w	[a15],d15

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)      (inlined)
.L24:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d15,d4,#2
	or	d15,#2
.L744:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L745:
	sha	d0,d0,#16
.L746:
	or	d15,d0
.L747:
	st.w	[a15],d15
.L748:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
	j	.L25
.L26:
.L25:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
	ld.w	d15,[a15]
	and	d15,#1
.L749:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
	jeq	d15,#1,.L26
.L352:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   209  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   210      IfxScuWdt_clearCpuEndinitInline(wdt, password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   211      wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
	ld.bu	d15,[a15]4
.L750:
	or	d15,#8
	st.b	[a15]4,d15
.L355:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   456      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   457  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   458  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   459  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   460  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   461  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   463      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   464          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   465          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   466                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   467                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   468                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   469      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   470  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   471      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   472      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   473                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   474                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   475                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   476  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   477      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   479      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   480  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   481  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   482  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   483  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   484  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   485      uint16 password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   486  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   487      /* Read Password from CON0 register
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   488       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   489       * to toggle them before returning password */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   490      password  = watchdog->CON0.B.PW;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   491      password ^= 0x003F;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   492  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   493      return password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   494  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   495  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   496  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   497  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   498  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   499      return (boolean)watchdog->CON0.B.ENDINIT;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   500  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   501  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   502  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   503  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   504  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   505      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   506  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   507  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   508  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   509  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   510  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   511      uint16        password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   512      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   513  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   514      /* Read Password from Safety WDT CON0 register
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   515       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   516       * to toggle them before returning password */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   517      password  = watchdog->CON0.B.PW;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   518      password ^= 0x003F;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   519  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   520      return password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   521  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   522  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   523  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   524  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   525  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   526      if (watchdog->CON0.B.LCK)
	ld.w	d15,[a15]
.L751:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   526      if (watchdog->CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L27
.L752:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   527      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   528          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   529          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   530                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   531                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d15,d4,#2
	or	d15,#1
.L753:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   532                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L754:
	sha	d0,d0,#16
.L755:
	or	d15,d0
.L756:
	st.w	[a15],d15

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   526      if (watchdog->CON0.B.LCK)      (inlined)
.L27:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   533      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   534  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   535      /* Set ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   536      watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   537                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   538                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d4,#2
.L436:
	or	d15,d4,#3
.L757:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   539                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L758:
	sha	d0,d0,#16
.L759:
	or	d15,d0
.L760:
	st.w	[a15],d15
.L761:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   542      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
	j	.L28
.L29:
.L28:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   540  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   541      /* read back ENDINIT and wait until it has been set */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   542      while (watchdog->CON0.B.ENDINIT == 0)
	ld.w	d15,[a15]
.L762:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   542      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
	jz.t	d15:0,.L29
.L356:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   212      IfxScuWdt_setCpuEndinitInline(wdt, password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   213  }
	ret
.L346:
	
__IfxScuWdt_disableCpuWatchdog_function_end:
	.size	IfxScuWdt_disableCpuWatchdog,__IfxScuWdt_disableCpuWatchdog_function_end-IfxScuWdt_disableCpuWatchdog
.L216:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_disableSafetyWatchdog',code,cluster('IfxScuWdt_disableSafetyWatchdog')
	.sect	'.text.IfxScuWdt.IfxScuWdt_disableSafetyWatchdog'
	.align	2
	
	.global	IfxScuWdt_disableSafetyWatchdog

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   214  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   215  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   216  void IfxScuWdt_disableSafetyWatchdog(uint16 password)
; Function IfxScuWdt_disableSafetyWatchdog
.L126:
IfxScuWdt_disableSafetyWatchdog:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   456      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   457  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   458  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   459  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   460  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   461  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf00360f0)
.L767:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L30
.L768:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   463      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   464          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   465          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   466                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   467                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
	sha	d15,d4,#2
	or	d15,#1
.L769:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   468                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	movh.a	a15,#61443
	ld.w	d0,[a15]@los(0xf00360f0)
	extr.u	d0,d0,#16,#16
.L770:
	sha	d0,d0,#16
.L771:
	or	d15,d0
.L772:
	movh.a	a15,#61443
	st.w	[a15]@los(0xf00360f0),d15

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)      (inlined)
.L30:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   469      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   470  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   471      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   472      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   473                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   474                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
	sha	d15,d4,#2
	or	d15,#2
.L773:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   475                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	movh.a	a15,#61443
	ld.w	d0,[a15]@los(0xf00360f0)
	extr.u	d0,d0,#16,#16
.L774:
	sha	d0,d0,#16
.L775:
	or	d15,d0
.L776:
	movh.a	a15,#61443
	st.w	[a15]@los(0xf00360f0),d15
.L777:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)      (inlined)
	j	.L31
.L32:
.L31:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   476  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   477      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf00360f0)
	and	d15,#1
.L778:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)      (inlined)
	jeq	d15,#1,.L32
.L361:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   217  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   218      IfxScuWdt_clearSafetyEndinitInline(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   219      SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
	movh.a	a15,#61443
	ld.bu	d15,[a15]@los(0xf00360f4)
.L779:
	or	d15,#8
	movh.a	a15,#61443
	st.b	[a15]@los(0xf00360f4),d15
.L363:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   456      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   457  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   458  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   459  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   460  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   461  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   463      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   464          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   465          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   466                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   467                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   468                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   469      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   470  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   471      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   472      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   473                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   474                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   475                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   476  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   477      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   479      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   480  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   481  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   482  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   483  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   484  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   485      uint16 password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   486  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   487      /* Read Password from CON0 register
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   488       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   489       * to toggle them before returning password */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   490      password  = watchdog->CON0.B.PW;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   491      password ^= 0x003F;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   492  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   493      return password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   494  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   495  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   496  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   497  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   498  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   499      return (boolean)watchdog->CON0.B.ENDINIT;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   500  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   501  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   502  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   503  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   504  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   505      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   506  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   507  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   508  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   509  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   510  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   511      uint16        password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   512      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   513  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   514      /* Read Password from Safety WDT CON0 register
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   515       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   516       * to toggle them before returning password */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   517      password  = watchdog->CON0.B.PW;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   518      password ^= 0x003F;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   519  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   520      return password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   521  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   522  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   523  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   524  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   525  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   526      if (watchdog->CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   527      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   528          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   529          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   530                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   531                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   532                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   533      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   534  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   535      /* Set ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   536      watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   537                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   538                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   539                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   540  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   541      /* read back ENDINIT and wait until it has been set */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   542      while (watchdog->CON0.B.ENDINIT == 0)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   543      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   544  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   545  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   546  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   547  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   548  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   549      if (SCU_WDTS_CON0.B.LCK)
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf00360f0)
.L780:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   549      if (SCU_WDTS_CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L33
.L781:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   550      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   551          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   552          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   553                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   554                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
	sha	d15,d4,#2
	or	d15,#1
.L782:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   555                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	movh.a	a15,#61443
	ld.w	d0,[a15]@los(0xf00360f0)
	extr.u	d0,d0,#16,#16
.L783:
	sha	d0,d0,#16
.L784:
	or	d15,d0
.L785:
	movh.a	a15,#61443
	st.w	[a15]@los(0xf00360f0),d15

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   549      if (SCU_WDTS_CON0.B.LCK)      (inlined)
.L33:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   556      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   557  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   558      /* Set ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   559      SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   560                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   561                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
	sha	d4,#2
.L439:
	or	d15,d4,#3
.L786:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   562                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	movh.a	a15,#61443
	ld.w	d0,[a15]@los(0xf00360f0)
	extr.u	d0,d0,#16,#16
.L787:
	sha	d0,d0,#16
.L788:
	or	d15,d0
.L789:
	movh.a	a15,#61443
	st.w	[a15]@los(0xf00360f0),d15
.L790:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   565      while (SCU_WDTS_CON0.B.ENDINIT == 0)      (inlined)
	j	.L34
.L35:
.L34:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   563  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   564      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   565      while (SCU_WDTS_CON0.B.ENDINIT == 0)
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf00360f0)
.L791:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   565      while (SCU_WDTS_CON0.B.ENDINIT == 0)      (inlined)
	jz.t	d15:0,.L35
.L364:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   220      IfxScuWdt_setSafetyEndinitInline(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   221  }
	ret
.L359:
	
__IfxScuWdt_disableSafetyWatchdog_function_end:
	.size	IfxScuWdt_disableSafetyWatchdog,__IfxScuWdt_disableSafetyWatchdog_function_end-IfxScuWdt_disableSafetyWatchdog
.L221:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_enableCpuWatchdog',code,cluster('IfxScuWdt_enableCpuWatchdog')
	.sect	'.text.IfxScuWdt.IfxScuWdt_enableCpuWatchdog'
	.align	2
	
	.global	IfxScuWdt_enableCpuWatchdog

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   222  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   223  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   224  void IfxScuWdt_enableCpuWatchdog(uint16 password)
; Function IfxScuWdt_enableCpuWatchdog
.L128:
IfxScuWdt_enableCpuWatchdog:	.type	func

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    44   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    45   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    46   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    47   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    48   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    49   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    50   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    51   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    52   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    53   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    54   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    55   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    56   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    57   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    58   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    59   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    60   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    61   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    63  #ifndef IFXCPU_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    64  #define IFXCPU_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    65  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    66  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    67  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    68  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    69  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    70  #include "_Impl/IfxCpu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    71  #include "IfxSrc_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    72  #include "IfxScu_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    73  #include "IfxStm_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    74  #include "_Impl/IfxScu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    75  #include "_Utilities/Ifx_Assert.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    76  #include "Scu/Std/IfxScuWdt.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    77  #include "Scu/Std/IfxScuCcu.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    78  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    79  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    80  /*-----------------------------------Macros-----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    81  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    82  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    83  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    84   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    85   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    86   * the CPU number.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    87   * Example usage:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    88   *  \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    89   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    90   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    91   *  \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    92   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    93  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    94  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    95  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    96   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    97   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    98   * the CPU number.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    99   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   100   *   Example usage:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   101   *   \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   102   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   103   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   104   *   \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   105   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   106  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   107  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   108  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   109  /*------------------------------Type Definitions------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   110  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   111  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   112  /** \brief Lock type Spin lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   113   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   114  typedef unsigned int IfxCpu_spinLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   115  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Lock type Mutex lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   117   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   118  typedef unsigned int IfxCpu_mutexLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   119  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   120  /** \brief Event used for synchronisation.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   121   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   122  typedef unsigned int IfxCpu_syncEvent;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   123  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   124  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   125  /*--------------------------------Enumerations--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   127  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   128  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   129   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   130  /** \brief Enumeration for the Cpu mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   131   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   132  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   133  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_halt,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_run,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_idle,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   137      IfxCpu_CoreMode_sleep,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   138      IfxCpu_CoreMode_stby,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   139      IfxCpu_CoreMode_unknown
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   140  } IfxCpu_CoreMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   141  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance conunter modes
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   143   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   144  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   145  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   148  } IfxCpu_CounterMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   149  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   150  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   151  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   152  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   153  /*-----------------------------Data Structures--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   154  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   155  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   156  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   157   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   158  /** \brief counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   159   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   160  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   161  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   162      uint32  counter;        /**< \brief Counter value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   163      boolean overlfow;       /**< \brief sticky overlfow */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_Counter;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   166  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   167  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   168  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   169   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   170  /** \brief Performance counter result
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   171   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   172  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   173  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_Perf;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   181  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   182  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   183  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   184   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   185  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   187  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   188  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief API to get the address for CPU HW module register memory map
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   191   * \param cpu Resource index of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   192   * \return CPU module register address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   193   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   194  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   195  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief API to get core id of the CPU of the caller.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   197   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   198   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   199   * \return Resource index of the CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   200   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   201  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   202  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   203  /** \brief API to get cpu index of the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   204   * Note: This api can be used whereever cpu no/index is needed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   205   * \return Resource index of the CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   206   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   207  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   208  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   209  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   210   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   211   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   212   * shall not be used to initialize the CSA of another CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   213   * \param csaBegin Pointer to start of context save area
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   214   * \param csaEnd Pointer to end of context save area
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   215   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   216   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   217  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   219  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   220   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   221   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   222  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   224  /** \brief Triggers Software Reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   225   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   226   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   227  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   228  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   229  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   230  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   231  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   232  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   233  /** \brief API to get current mode of CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   234   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   235   * \return Current mode of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   236   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   237  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   238  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   239  /** \brief API to get current mode of CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   240   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   241   * \return Resource index of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   242   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   243  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   244  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   245  /** \brief API to set mode of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   246   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   247   * \param mode CPU mode to be set by this API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   248   * \return Success status of the activity (setting the core mode).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   249   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   250   * \retval FALSE: If the activity can't be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   251   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   252  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   253  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   254  /** \brief API to set the program counter for the CPU specified.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   255   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   256   * \param programCounter Program counter value to be set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   257   * \return success status of the activity (setting program counter value).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   258   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   259   * \retval FALSE: If the activity can't be performed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   260   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   261  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   262  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   263  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   264   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   265   * \param programCounter Program counter value to start the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   266   * \return success status of the activity (setting program counter value).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   268   * \retval FALSE: If the activity can't be performed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   269   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   270  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   271  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   272  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   273  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   274  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   275   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   277  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   278  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   279  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   280  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   281  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   282   * This API provides the status of CPU where this API is called
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   283   * \return Status of global interrupt enable bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   284   * \retval TRUE: Global interrupts enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   285   * \retval FALSE: Global interrupts disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   286   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   287  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   288  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   289  /** \brief API to disable global interrupt and return the previous status.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   290   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   291   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   292   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   293   * \return Previous status of global interrupt enable bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   294   * \retval TRUE: Previously, global interrupts enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   295   * \retval FALSE: Previously, global interrupts disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   296   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   297  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   298  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   299  /** \brief API to enable global interrupt.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   300   * This API simply enables the global interrupt.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   301   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   302   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   303  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   304  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   305  /** \brief Disable the Global Interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   306   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   311   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   312   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   313   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   314   * \param enabled Previous status of the global interrupt enable bit
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   315   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   329   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   330   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   331   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   332   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   333   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   334   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   335  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   336  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   337  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   338   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   339   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   340   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   341   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to invalidate the program cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   352   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   353   * \return Status TRUE/FALSE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enable Command to enable or bypass the data cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   362   * TRUE: Enable the data cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   363   * FALSE: Bypass the data cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   364   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   369   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   371   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   372   * \param enable Command to enable or bypass the program cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   373   * TRUE: Enable the program cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   374   * FALSE: Bypass the program cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   375   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   376   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   377  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   378  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   379  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   380  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   381  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   382   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   384  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   385  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   386  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   387  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   388  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   389   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   390   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   391   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   392   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   393   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   394  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   395  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   396  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   397   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   398   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   399   * It cannot be used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   400   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   401   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   402   * reading the counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   403   * \return Status of sticky overflow bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   404   * \retval TRUE: Sticky overflow bit is set.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   405   * \retval FALSE: Sticky overflow bit is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   406   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   408  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   410   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   413   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   414   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   415  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   416  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   417  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   418   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   419   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   420   * It cannot be used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   421   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   422   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   423   * reading the counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   424   * \return Status of sticky overflow bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   425   * \retval TRUE: Sticky overflow bit is set.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   426   * \retval FALSE: Sticky overflow bit is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   427   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   428  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   429  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   430  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   431   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   432   * \return counter value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   433   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   434  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   435  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   436  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   437   * This is generic function to get sticky overflow bit of any performance counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   438   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief Reset and start instruction, clock and multi counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   445   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   446   * \param mode Counter mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   448   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   450  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   452   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   455   * \param enable enable Command to enable or disable the performance counter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   456   * TRUE: Enable the performance counter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   457   * FALSE: Disable the performance counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   458   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   459   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   460  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   461  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   462  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   463  /** \brief Stop instruction and clock counters, return their values
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   464   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   465   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   466   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   467   * \return Performance counter result
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   468   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   470  #endif
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   471  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   472  /** \brief API to update clock counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   473   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   474   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   475   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   476   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   477   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   478   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   479  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   480  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   481  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   482   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   483   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   484   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   485   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   486   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief API to update performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   491   * This is generic function to update any of the performance counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   492   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   493   * \param count Count
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   498  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   499  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   500  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   501   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   502  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   503  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   504  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   505  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   506  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   507  /** \brief API to acquire the mutex (binary semaphore).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   508   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   509   * This API can be used to acquire/get the mutex.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   510   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   511   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   512   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   513   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   514   *    IfxCpu_mutexLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   515   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   516   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   517   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   518   *      IfxCpu_releaseMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   519   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   520   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   521   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   522   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   523  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   524  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   525  /** \brief API to unlock the mutex .
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   526   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   527   * This API can be used to unlock the previously acquired mutex
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   528   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   529   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   530   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   531   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   532   *    IfxCpu_mutexLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   533   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   534   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   535   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   536   *      IfxCpu_releaseMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   537   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   538   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   539   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   540   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   541  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   542  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   543  /** \brief API to unlock the resource .
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   544   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   545   * This API can be used to unlock the previously acquired lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   546   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   547   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   548   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   549  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   550  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   551  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   552   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   553   * This API can be used to spin lock for the lock for the given timeout period.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   554   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   555   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   556   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   557   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   558   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   559   *    IfxCpu_spinLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   560   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   561   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   562   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   563   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   564   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   565   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   566   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   567   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   568  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   569  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   570  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   572  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   573   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   574  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   575  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   577  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   578  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   579  /** \brief API to get random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   580   * \param seed Pointer to seed value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   581   * \return random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   582   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   583  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   584  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   585  /** \brief API to get random value with in the range
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   586   * \param seed Pointer to seed value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   587   * \param min minimum range value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   588   * \param max maximum range value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   589   * \return random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   590   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   591  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   592  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   593  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   594   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   595   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   596   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   597   * CORE_ID register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   598   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   600   * e.g:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   601   * 1. Check for synchronisation between core 0 and core 5
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   602   * # define 0x41U
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   603   * 2. Check for synchronisation between core 0 to core 5
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   604   * # define 0x5FU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   605   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   606   * Note:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   607   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   608   * Core 0: 0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   609   * Core 1: 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   610   * Core 2: 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   611   * Core 3: 3
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   612   * Core 4: 4
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   613   * Core 5: 6
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   614   * \param event Synchronous Event
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   615   * \param timeoutMilliSec timeout in millisec
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   616   * \return Error condition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   617   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   618   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   619   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   620   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   621   * // Global variable. preferably located in  shared memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   622   * IfxCpu_syncEvent event;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   623   * boolean errorVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   624   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   625   * // Below code should be repeated in Each core
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   626   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   627   * // Upon reaching Synchonisation point
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   628   * IfxCpu_emitEvent(&event);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   629   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   630   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   631   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   632   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   633   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   634  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   635  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   636  /** \brief This function sets a bit corresponding to the core in the event.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   637   * \param event Synchronous Event
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   638   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   639   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   640   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   641   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   642   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   643  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   644  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   645  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   646  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   647  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   648  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   649  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   650  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   651  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   652  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   653      Ifx_CPU_ICR reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   654      reg.U = __mfcr(CPU_ICR);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   655      return reg.B.IE != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   656  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   657  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   658  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   659  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   660  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   661      boolean enabled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   662      enabled = IfxCpu_areInterruptsEnabled();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   663      __disable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   664      __nop();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   665      return enabled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   666  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   667  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   668  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   670  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   671      __enable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   672  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   673  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   674  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   675  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   676  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   677      uint32 cpu_pmaVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   678      uint16 checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   679      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   680      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   681  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   682      /*resolve the restrictions*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   683      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   684      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   685  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   686      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   687      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   688          segmentNumberMask |= checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   689      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   690  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   691      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   692  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   693      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   694  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   695      /*The CPU_PMA registers are ENDINIT protected*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   696      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   697      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   698      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   699      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   700      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   701      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   702      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   703  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   704  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   705  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   707  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   708      uint32 cpu_pmaVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   709      uint16 checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   710      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   711      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   712  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   713      /*resolve the restrictions*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   714      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   715      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   716  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   717      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   718      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   719          segmentNumberMask |= checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   720      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   721  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   722      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   723  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   724      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   725  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   726      /*The CPU_PMA registers are ENDINIT protected*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   727      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   728      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   729      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   730      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   731      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   732      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   733      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   734  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   735  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   736  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   737  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   738  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   739      __disable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   740      __nop();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   741  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   742  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   743  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   744  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   745  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   746      Ifx_CPU *module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   747  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   748      if (cpu < IfxCpu_ResourceCpu_none)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   749      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   750          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   751      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   752      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   753      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   754          module = NULL_PTR;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   755      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   756  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   757      return module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   758  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   759  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   760  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   761  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   762  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   763      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   764  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   765  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   766  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   767  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   768  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   769      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   770  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   771  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   772  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   773  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   774  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   775      Ifx_CPU_CORE_ID reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   776      reg.U = __mfcr(CPU_CORE_ID);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   778  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   780  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   781  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   782  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   783      Ifx_CPU_CORE_ID reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   784      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L441:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   785      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	and	d15,#7
.L442:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   785      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;      (inlined)
	j	.L36

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   786  }      (inlined)
.L36:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   225  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   226      /* Select CPU Watchdog based on Core Id */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   227      uint32          coreId = (uint32)IfxCpu_getCoreIndex();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   228      Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
	mul	d15,d15,#12
	mov.a	a15,d15
	movh.a	a3,#61443
	add.a	a3,a15
	lea	a15,[a3]24832
.L371:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
	ld.w	d15,[a15]
.L796:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L37
.L797:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d15,d4,#2
	or	d15,#1
.L798:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L799:
	sha	d0,d0,#16
.L800:
	or	d15,d0
.L801:
	st.w	[a15],d15

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)      (inlined)
.L37:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d15,d4,#2
	or	d15,#2
.L802:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L803:
	sha	d0,d0,#16
.L804:
	or	d15,d0
.L805:
	st.w	[a15],d15
.L806:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
	j	.L38
.L39:
.L38:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
	ld.w	d15,[a15]
	and	d15,#1
.L807:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
	jeq	d15,#1,.L39
.L372:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   229  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   230      IfxScuWdt_clearCpuEndinitInline(wdt, password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   231      wdt->CON1.B.DR = 0;         //Clear DR bit in Config_1 register
	ld.bu	d15,[a15]4
.L808:
	insert	d15,d15,#0,#3,#1
	st.b	[a15]4,d15
.L375:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   456      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   457  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   458  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   459  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   460  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   461  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   463      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   464          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   465          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   466                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   467                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   468                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   469      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   470  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   471      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   472      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   473                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   474                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   475                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   476  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   477      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   479      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   480  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   481  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   482  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   483  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   484  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   485      uint16 password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   486  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   487      /* Read Password from CON0 register
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   488       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   489       * to toggle them before returning password */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   490      password  = watchdog->CON0.B.PW;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   491      password ^= 0x003F;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   492  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   493      return password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   494  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   495  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   496  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   497  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   498  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   499      return (boolean)watchdog->CON0.B.ENDINIT;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   500  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   501  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   502  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   503  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   504  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   505      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   506  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   507  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   508  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   509  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   510  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   511      uint16        password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   512      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   513  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   514      /* Read Password from Safety WDT CON0 register
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   515       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   516       * to toggle them before returning password */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   517      password  = watchdog->CON0.B.PW;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   518      password ^= 0x003F;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   519  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   520      return password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   521  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   522  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   523  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   524  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   525  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   526      if (watchdog->CON0.B.LCK)
	ld.w	d15,[a15]
.L809:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   526      if (watchdog->CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L40
.L810:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   527      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   528          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   529          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   530                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   531                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d15,d4,#2
	or	d15,#1
.L811:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   532                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L812:
	sha	d0,d0,#16
.L813:
	or	d15,d0
.L814:
	st.w	[a15],d15

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   526      if (watchdog->CON0.B.LCK)      (inlined)
.L40:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   533      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   534  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   535      /* Set ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   536      watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   537                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   538                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d4,#2
.L440:
	or	d15,d4,#3
.L815:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   539                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L816:
	sha	d0,d0,#16
.L817:
	or	d15,d0
.L818:
	st.w	[a15],d15
.L819:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   542      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
	j	.L41
.L42:
.L41:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   540  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   541      /* read back ENDINIT and wait until it has been set */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   542      while (watchdog->CON0.B.ENDINIT == 0)
	ld.w	d15,[a15]
.L820:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   542      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
	jz.t	d15:0,.L42
.L376:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   232      IfxScuWdt_setCpuEndinitInline(wdt, password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   233  }
	ret
.L366:
	
__IfxScuWdt_enableCpuWatchdog_function_end:
	.size	IfxScuWdt_enableCpuWatchdog,__IfxScuWdt_enableCpuWatchdog_function_end-IfxScuWdt_enableCpuWatchdog
.L226:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_enableSafetyWatchdog',code,cluster('IfxScuWdt_enableSafetyWatchdog')
	.sect	'.text.IfxScuWdt.IfxScuWdt_enableSafetyWatchdog'
	.align	2
	
	.global	IfxScuWdt_enableSafetyWatchdog

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   234  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   235  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   236  void IfxScuWdt_enableSafetyWatchdog(uint16 password)
; Function IfxScuWdt_enableSafetyWatchdog
.L130:
IfxScuWdt_enableSafetyWatchdog:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   456      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   457  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   458  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   459  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   460  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   461  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf00360f0)
.L825:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L43
.L826:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   463      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   464          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   465          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   466                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   467                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
	sha	d15,d4,#2
	or	d15,#1
.L827:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   468                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	movh.a	a15,#61443
	ld.w	d0,[a15]@los(0xf00360f0)
	extr.u	d0,d0,#16,#16
.L828:
	sha	d0,d0,#16
.L829:
	or	d15,d0
.L830:
	movh.a	a15,#61443
	st.w	[a15]@los(0xf00360f0),d15

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)      (inlined)
.L43:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   469      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   470  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   471      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   472      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   473                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   474                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
	sha	d15,d4,#2
	or	d15,#2
.L831:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   475                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	movh.a	a15,#61443
	ld.w	d0,[a15]@los(0xf00360f0)
	extr.u	d0,d0,#16,#16
.L832:
	sha	d0,d0,#16
.L833:
	or	d15,d0
.L834:
	movh.a	a15,#61443
	st.w	[a15]@los(0xf00360f0),d15
.L835:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)      (inlined)
	j	.L44
.L45:
.L44:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   476  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   477      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf00360f0)
	and	d15,#1
.L836:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)      (inlined)
	jeq	d15,#1,.L45
.L381:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   237  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   238      IfxScuWdt_clearSafetyEndinitInline(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   239      SCU_WDTS_CON1.B.DR = 0;     //Clear DR bit in Config_1 register
	movh.a	a15,#61443
	ld.bu	d15,[a15]@los(0xf00360f4)
.L837:
	insert	d15,d15,#0,#3,#1
	movh.a	a15,#61443
	st.b	[a15]@los(0xf00360f4),d15
.L383:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   456      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   457  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   458  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   459  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   460  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   461  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   463      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   464          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   465          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   466                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   467                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   468                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   469      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   470  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   471      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   472      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   473                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   474                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   475                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   476  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   477      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   479      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   480  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   481  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   482  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   483  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   484  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   485      uint16 password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   486  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   487      /* Read Password from CON0 register
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   488       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   489       * to toggle them before returning password */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   490      password  = watchdog->CON0.B.PW;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   491      password ^= 0x003F;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   492  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   493      return password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   494  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   495  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   496  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   497  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   498  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   499      return (boolean)watchdog->CON0.B.ENDINIT;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   500  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   501  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   502  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   503  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   504  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   505      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   506  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   507  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   508  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   509  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   510  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   511      uint16        password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   512      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   513  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   514      /* Read Password from Safety WDT CON0 register
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   515       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   516       * to toggle them before returning password */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   517      password  = watchdog->CON0.B.PW;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   518      password ^= 0x003F;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   519  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   520      return password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   521  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   522  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   523  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   524  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   525  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   526      if (watchdog->CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   527      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   528          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   529          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   530                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   531                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   532                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   533      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   534  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   535      /* Set ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   536      watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   537                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   538                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   539                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   540  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   541      /* read back ENDINIT and wait until it has been set */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   542      while (watchdog->CON0.B.ENDINIT == 0)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   543      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   544  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   545  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   546  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   547  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   548  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   549      if (SCU_WDTS_CON0.B.LCK)
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf00360f0)
.L838:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   549      if (SCU_WDTS_CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L46
.L839:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   550      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   551          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   552          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   553                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   554                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
	sha	d15,d4,#2
	or	d15,#1
.L840:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   555                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	movh.a	a15,#61443
	ld.w	d0,[a15]@los(0xf00360f0)
	extr.u	d0,d0,#16,#16
.L841:
	sha	d0,d0,#16
.L842:
	or	d15,d0
.L843:
	movh.a	a15,#61443
	st.w	[a15]@los(0xf00360f0),d15

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   549      if (SCU_WDTS_CON0.B.LCK)      (inlined)
.L46:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   556      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   557  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   558      /* Set ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   559      SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   560                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   561                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
	sha	d4,#2
.L443:
	or	d15,d4,#3
.L844:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   562                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	movh.a	a15,#61443
	ld.w	d0,[a15]@los(0xf00360f0)
	extr.u	d0,d0,#16,#16
.L845:
	sha	d0,d0,#16
.L846:
	or	d15,d0
.L847:
	movh.a	a15,#61443
	st.w	[a15]@los(0xf00360f0),d15
.L848:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   565      while (SCU_WDTS_CON0.B.ENDINIT == 0)      (inlined)
	j	.L47
.L48:
.L47:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   563  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   564      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   565      while (SCU_WDTS_CON0.B.ENDINIT == 0)
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf00360f0)
.L849:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   565      while (SCU_WDTS_CON0.B.ENDINIT == 0)      (inlined)
	jz.t	d15:0,.L48
.L384:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   240      IfxScuWdt_setSafetyEndinitInline(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   241  }
	ret
.L379:
	
__IfxScuWdt_enableSafetyWatchdog_function_end:
	.size	IfxScuWdt_enableSafetyWatchdog,__IfxScuWdt_enableSafetyWatchdog_function_end-IfxScuWdt_enableSafetyWatchdog
.L231:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_getCpuWatchdogPassword',code,cluster('IfxScuWdt_getCpuWatchdogPassword')
	.sect	'.text.IfxScuWdt.IfxScuWdt_getCpuWatchdogPassword'
	.align	2
	
	.global	IfxScuWdt_getCpuWatchdogPassword

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   242  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   243  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   244  uint16 IfxScuWdt_getCpuWatchdogPassword(void)
; Function IfxScuWdt_getCpuWatchdogPassword
.L132:
IfxScuWdt_getCpuWatchdogPassword:	.type	func

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    44   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    45   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    46   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    47   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    48   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    49   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    50   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    51   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    52   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    53   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    54   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    55   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    56   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    57   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    58   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    59   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    60   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    61   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    63  #ifndef IFXCPU_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    64  #define IFXCPU_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    65  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    66  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    67  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    68  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    69  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    70  #include "_Impl/IfxCpu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    71  #include "IfxSrc_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    72  #include "IfxScu_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    73  #include "IfxStm_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    74  #include "_Impl/IfxScu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    75  #include "_Utilities/Ifx_Assert.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    76  #include "Scu/Std/IfxScuWdt.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    77  #include "Scu/Std/IfxScuCcu.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    78  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    79  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    80  /*-----------------------------------Macros-----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    81  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    82  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    83  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    84   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    85   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    86   * the CPU number.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    87   * Example usage:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    88   *  \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    89   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    90   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    91   *  \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    92   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    93  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    94  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    95  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    96   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    97   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    98   * the CPU number.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    99   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   100   *   Example usage:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   101   *   \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   102   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   103   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   104   *   \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   105   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   106  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   107  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   108  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   109  /*------------------------------Type Definitions------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   110  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   111  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   112  /** \brief Lock type Spin lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   113   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   114  typedef unsigned int IfxCpu_spinLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   115  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Lock type Mutex lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   117   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   118  typedef unsigned int IfxCpu_mutexLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   119  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   120  /** \brief Event used for synchronisation.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   121   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   122  typedef unsigned int IfxCpu_syncEvent;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   123  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   124  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   125  /*--------------------------------Enumerations--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   127  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   128  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   129   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   130  /** \brief Enumeration for the Cpu mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   131   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   132  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   133  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_halt,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_run,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_idle,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   137      IfxCpu_CoreMode_sleep,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   138      IfxCpu_CoreMode_stby,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   139      IfxCpu_CoreMode_unknown
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   140  } IfxCpu_CoreMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   141  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance conunter modes
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   143   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   144  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   145  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   148  } IfxCpu_CounterMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   149  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   150  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   151  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   152  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   153  /*-----------------------------Data Structures--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   154  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   155  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   156  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   157   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   158  /** \brief counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   159   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   160  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   161  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   162      uint32  counter;        /**< \brief Counter value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   163      boolean overlfow;       /**< \brief sticky overlfow */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_Counter;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   166  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   167  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   168  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   169   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   170  /** \brief Performance counter result
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   171   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   172  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   173  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_Perf;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   181  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   182  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   183  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   184   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   185  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   187  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   188  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief API to get the address for CPU HW module register memory map
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   191   * \param cpu Resource index of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   192   * \return CPU module register address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   193   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   194  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   195  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief API to get core id of the CPU of the caller.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   197   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   198   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   199   * \return Resource index of the CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   200   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   201  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   202  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   203  /** \brief API to get cpu index of the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   204   * Note: This api can be used whereever cpu no/index is needed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   205   * \return Resource index of the CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   206   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   207  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   208  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   209  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   210   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   211   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   212   * shall not be used to initialize the CSA of another CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   213   * \param csaBegin Pointer to start of context save area
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   214   * \param csaEnd Pointer to end of context save area
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   215   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   216   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   217  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   219  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   220   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   221   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   222  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   224  /** \brief Triggers Software Reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   225   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   226   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   227  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   228  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   229  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   230  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   231  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   232  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   233  /** \brief API to get current mode of CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   234   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   235   * \return Current mode of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   236   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   237  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   238  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   239  /** \brief API to get current mode of CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   240   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   241   * \return Resource index of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   242   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   243  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   244  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   245  /** \brief API to set mode of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   246   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   247   * \param mode CPU mode to be set by this API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   248   * \return Success status of the activity (setting the core mode).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   249   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   250   * \retval FALSE: If the activity can't be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   251   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   252  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   253  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   254  /** \brief API to set the program counter for the CPU specified.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   255   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   256   * \param programCounter Program counter value to be set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   257   * \return success status of the activity (setting program counter value).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   258   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   259   * \retval FALSE: If the activity can't be performed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   260   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   261  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   262  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   263  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   264   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   265   * \param programCounter Program counter value to start the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   266   * \return success status of the activity (setting program counter value).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   268   * \retval FALSE: If the activity can't be performed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   269   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   270  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   271  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   272  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   273  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   274  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   275   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   277  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   278  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   279  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   280  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   281  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   282   * This API provides the status of CPU where this API is called
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   283   * \return Status of global interrupt enable bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   284   * \retval TRUE: Global interrupts enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   285   * \retval FALSE: Global interrupts disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   286   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   287  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   288  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   289  /** \brief API to disable global interrupt and return the previous status.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   290   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   291   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   292   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   293   * \return Previous status of global interrupt enable bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   294   * \retval TRUE: Previously, global interrupts enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   295   * \retval FALSE: Previously, global interrupts disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   296   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   297  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   298  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   299  /** \brief API to enable global interrupt.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   300   * This API simply enables the global interrupt.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   301   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   302   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   303  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   304  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   305  /** \brief Disable the Global Interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   306   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   311   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   312   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   313   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   314   * \param enabled Previous status of the global interrupt enable bit
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   315   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   329   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   330   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   331   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   332   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   333   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   334   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   335  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   336  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   337  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   338   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   339   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   340   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   341   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to invalidate the program cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   352   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   353   * \return Status TRUE/FALSE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enable Command to enable or bypass the data cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   362   * TRUE: Enable the data cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   363   * FALSE: Bypass the data cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   364   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   369   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   371   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   372   * \param enable Command to enable or bypass the program cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   373   * TRUE: Enable the program cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   374   * FALSE: Bypass the program cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   375   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   376   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   377  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   378  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   379  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   380  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   381  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   382   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   384  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   385  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   386  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   387  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   388  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   389   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   390   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   391   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   392   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   393   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   394  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   395  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   396  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   397   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   398   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   399   * It cannot be used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   400   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   401   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   402   * reading the counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   403   * \return Status of sticky overflow bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   404   * \retval TRUE: Sticky overflow bit is set.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   405   * \retval FALSE: Sticky overflow bit is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   406   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   408  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   410   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   413   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   414   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   415  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   416  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   417  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   418   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   419   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   420   * It cannot be used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   421   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   422   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   423   * reading the counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   424   * \return Status of sticky overflow bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   425   * \retval TRUE: Sticky overflow bit is set.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   426   * \retval FALSE: Sticky overflow bit is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   427   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   428  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   429  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   430  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   431   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   432   * \return counter value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   433   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   434  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   435  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   436  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   437   * This is generic function to get sticky overflow bit of any performance counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   438   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief Reset and start instruction, clock and multi counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   445   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   446   * \param mode Counter mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   448   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   450  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   452   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   455   * \param enable enable Command to enable or disable the performance counter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   456   * TRUE: Enable the performance counter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   457   * FALSE: Disable the performance counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   458   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   459   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   460  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   461  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   462  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   463  /** \brief Stop instruction and clock counters, return their values
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   464   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   465   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   466   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   467   * \return Performance counter result
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   468   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   470  #endif
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   471  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   472  /** \brief API to update clock counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   473   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   474   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   475   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   476   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   477   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   478   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   479  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   480  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   481  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   482   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   483   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   484   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   485   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   486   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief API to update performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   491   * This is generic function to update any of the performance counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   492   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   493   * \param count Count
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   498  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   499  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   500  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   501   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   502  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   503  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   504  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   505  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   506  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   507  /** \brief API to acquire the mutex (binary semaphore).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   508   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   509   * This API can be used to acquire/get the mutex.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   510   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   511   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   512   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   513   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   514   *    IfxCpu_mutexLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   515   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   516   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   517   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   518   *      IfxCpu_releaseMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   519   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   520   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   521   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   522   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   523  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   524  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   525  /** \brief API to unlock the mutex .
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   526   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   527   * This API can be used to unlock the previously acquired mutex
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   528   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   529   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   530   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   531   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   532   *    IfxCpu_mutexLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   533   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   534   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   535   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   536   *      IfxCpu_releaseMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   537   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   538   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   539   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   540   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   541  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   542  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   543  /** \brief API to unlock the resource .
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   544   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   545   * This API can be used to unlock the previously acquired lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   546   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   547   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   548   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   549  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   550  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   551  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   552   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   553   * This API can be used to spin lock for the lock for the given timeout period.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   554   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   555   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   556   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   557   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   558   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   559   *    IfxCpu_spinLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   560   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   561   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   562   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   563   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   564   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   565   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   566   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   567   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   568  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   569  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   570  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   572  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   573   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   574  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   575  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   577  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   578  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   579  /** \brief API to get random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   580   * \param seed Pointer to seed value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   581   * \return random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   582   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   583  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   584  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   585  /** \brief API to get random value with in the range
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   586   * \param seed Pointer to seed value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   587   * \param min minimum range value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   588   * \param max maximum range value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   589   * \return random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   590   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   591  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   592  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   593  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   594   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   595   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   596   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   597   * CORE_ID register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   598   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   600   * e.g:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   601   * 1. Check for synchronisation between core 0 and core 5
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   602   * # define 0x41U
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   603   * 2. Check for synchronisation between core 0 to core 5
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   604   * # define 0x5FU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   605   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   606   * Note:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   607   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   608   * Core 0: 0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   609   * Core 1: 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   610   * Core 2: 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   611   * Core 3: 3
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   612   * Core 4: 4
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   613   * Core 5: 6
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   614   * \param event Synchronous Event
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   615   * \param timeoutMilliSec timeout in millisec
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   616   * \return Error condition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   617   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   618   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   619   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   620   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   621   * // Global variable. preferably located in  shared memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   622   * IfxCpu_syncEvent event;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   623   * boolean errorVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   624   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   625   * // Below code should be repeated in Each core
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   626   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   627   * // Upon reaching Synchonisation point
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   628   * IfxCpu_emitEvent(&event);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   629   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   630   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   631   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   632   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   633   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   634  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   635  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   636  /** \brief This function sets a bit corresponding to the core in the event.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   637   * \param event Synchronous Event
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   638   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   639   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   640   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   641   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   642   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   643  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   644  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   645  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   646  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   647  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   648  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   649  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   650  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   651  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   652  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   653      Ifx_CPU_ICR reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   654      reg.U = __mfcr(CPU_ICR);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   655      return reg.B.IE != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   656  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   657  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   658  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   659  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   660  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   661      boolean enabled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   662      enabled = IfxCpu_areInterruptsEnabled();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   663      __disable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   664      __nop();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   665      return enabled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   666  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   667  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   668  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   670  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   671      __enable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   672  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   673  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   674  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   675  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   676  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   677      uint32 cpu_pmaVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   678      uint16 checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   679      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   680      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   681  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   682      /*resolve the restrictions*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   683      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   684      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   685  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   686      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   687      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   688          segmentNumberMask |= checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   689      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   690  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   691      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   692  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   693      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   694  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   695      /*The CPU_PMA registers are ENDINIT protected*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   696      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   697      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   698      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   699      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   700      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   701      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   702      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   703  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   704  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   705  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   707  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   708      uint32 cpu_pmaVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   709      uint16 checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   710      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   711      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   712  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   713      /*resolve the restrictions*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   714      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   715      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   716  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   717      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   718      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   719          segmentNumberMask |= checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   720      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   721  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   722      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   723  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   724      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   725  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   726      /*The CPU_PMA registers are ENDINIT protected*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   727      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   728      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   729      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   730      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   731      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   732      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   733      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   734  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   735  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   736  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   737  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   738  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   739      __disable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   740      __nop();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   741  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   742  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   743  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   744  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   745  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   746      Ifx_CPU *module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   747  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   748      if (cpu < IfxCpu_ResourceCpu_none)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   749      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   750          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   751      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   752      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   753      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   754          module = NULL_PTR;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   755      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   756  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   757      return module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   758  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   759  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   760  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   761  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   762  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   763      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   764  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   765  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   766  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   767  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   768  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   769      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   770  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   771  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   772  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   773  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   774  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   775      Ifx_CPU_CORE_ID reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   776      reg.U = __mfcr(CPU_CORE_ID);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   778  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   780  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   781  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   782  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   783      Ifx_CPU_CORE_ID reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   784      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L444:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   785      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	and	d15,#7
.L445:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   785      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;      (inlined)
	j	.L49

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   786  }      (inlined)
.L49:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   245  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   246      return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
	mul	d15,d15,#12
	mov.a	a15,d15
	movh.a	a3,#61443
	add.a	a3,a15
	lea	a15,[a3]24832
.L389:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   456      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   457  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   458  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   459  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   460  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   461  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   463      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   464          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   465          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   466                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   467                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   468                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   469      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   470  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   471      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   472      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   473                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   474                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   475                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   476  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   477      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   479      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   480  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   481  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   482  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   483  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   484  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   485      uint16 password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   486  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   487      /* Read Password from CON0 register
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   488       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   489       * to toggle them before returning password */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   490      password  = watchdog->CON0.B.PW;
	ld.w	d15,[a15]
	extr.u	d15,d15,#2,#14
.L446:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   491      password ^= 0x003F;
	xor	d2,d15,#63
.L447:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   493      return password;      (inlined)
	j	.L50

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   494  }      (inlined)
.L50:
	j	.L51

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   247  }
.L51:
	ret
.L386:
	
__IfxScuWdt_getCpuWatchdogPassword_function_end:
	.size	IfxScuWdt_getCpuWatchdogPassword,__IfxScuWdt_getCpuWatchdogPassword_function_end-IfxScuWdt_getCpuWatchdogPassword
.L236:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_getCpuWatchdogEndInit',code,cluster('IfxScuWdt_getCpuWatchdogEndInit')
	.sect	'.text.IfxScuWdt.IfxScuWdt_getCpuWatchdogEndInit'
	.align	2
	
	.global	IfxScuWdt_getCpuWatchdogEndInit

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   248  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   249  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   250  boolean IfxScuWdt_getCpuWatchdogEndInit(void)
; Function IfxScuWdt_getCpuWatchdogEndInit
.L134:
IfxScuWdt_getCpuWatchdogEndInit:	.type	func

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    44   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    45   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    46   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    47   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    48   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    49   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    50   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    51   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    52   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    53   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    54   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    55   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    56   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    57   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    58   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    59   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    60   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    61   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    63  #ifndef IFXCPU_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    64  #define IFXCPU_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    65  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    66  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    67  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    68  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    69  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    70  #include "_Impl/IfxCpu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    71  #include "IfxSrc_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    72  #include "IfxScu_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    73  #include "IfxStm_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    74  #include "_Impl/IfxScu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    75  #include "_Utilities/Ifx_Assert.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    76  #include "Scu/Std/IfxScuWdt.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    77  #include "Scu/Std/IfxScuCcu.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    78  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    79  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    80  /*-----------------------------------Macros-----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    81  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    82  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    83  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    84   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    85   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    86   * the CPU number.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    87   * Example usage:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    88   *  \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    89   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    90   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    91   *  \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    92   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    93  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    94  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    95  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    96   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    97   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    98   * the CPU number.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    99   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   100   *   Example usage:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   101   *   \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   102   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   103   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   104   *   \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   105   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   106  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   107  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   108  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   109  /*------------------------------Type Definitions------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   110  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   111  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   112  /** \brief Lock type Spin lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   113   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   114  typedef unsigned int IfxCpu_spinLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   115  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Lock type Mutex lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   117   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   118  typedef unsigned int IfxCpu_mutexLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   119  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   120  /** \brief Event used for synchronisation.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   121   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   122  typedef unsigned int IfxCpu_syncEvent;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   123  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   124  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   125  /*--------------------------------Enumerations--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   127  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   128  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   129   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   130  /** \brief Enumeration for the Cpu mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   131   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   132  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   133  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_halt,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_run,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_idle,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   137      IfxCpu_CoreMode_sleep,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   138      IfxCpu_CoreMode_stby,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   139      IfxCpu_CoreMode_unknown
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   140  } IfxCpu_CoreMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   141  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance conunter modes
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   143   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   144  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   145  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   148  } IfxCpu_CounterMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   149  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   150  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   151  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   152  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   153  /*-----------------------------Data Structures--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   154  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   155  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   156  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   157   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   158  /** \brief counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   159   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   160  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   161  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   162      uint32  counter;        /**< \brief Counter value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   163      boolean overlfow;       /**< \brief sticky overlfow */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_Counter;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   166  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   167  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   168  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   169   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   170  /** \brief Performance counter result
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   171   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   172  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   173  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_Perf;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   181  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   182  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   183  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   184   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   185  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   187  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   188  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief API to get the address for CPU HW module register memory map
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   191   * \param cpu Resource index of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   192   * \return CPU module register address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   193   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   194  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   195  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief API to get core id of the CPU of the caller.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   197   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   198   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   199   * \return Resource index of the CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   200   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   201  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   202  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   203  /** \brief API to get cpu index of the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   204   * Note: This api can be used whereever cpu no/index is needed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   205   * \return Resource index of the CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   206   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   207  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   208  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   209  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   210   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   211   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   212   * shall not be used to initialize the CSA of another CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   213   * \param csaBegin Pointer to start of context save area
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   214   * \param csaEnd Pointer to end of context save area
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   215   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   216   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   217  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   219  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   220   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   221   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   222  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   224  /** \brief Triggers Software Reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   225   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   226   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   227  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   228  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   229  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   230  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   231  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   232  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   233  /** \brief API to get current mode of CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   234   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   235   * \return Current mode of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   236   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   237  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   238  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   239  /** \brief API to get current mode of CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   240   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   241   * \return Resource index of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   242   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   243  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   244  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   245  /** \brief API to set mode of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   246   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   247   * \param mode CPU mode to be set by this API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   248   * \return Success status of the activity (setting the core mode).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   249   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   250   * \retval FALSE: If the activity can't be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   251   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   252  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   253  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   254  /** \brief API to set the program counter for the CPU specified.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   255   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   256   * \param programCounter Program counter value to be set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   257   * \return success status of the activity (setting program counter value).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   258   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   259   * \retval FALSE: If the activity can't be performed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   260   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   261  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   262  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   263  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   264   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   265   * \param programCounter Program counter value to start the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   266   * \return success status of the activity (setting program counter value).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   268   * \retval FALSE: If the activity can't be performed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   269   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   270  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   271  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   272  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   273  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   274  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   275   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   277  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   278  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   279  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   280  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   281  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   282   * This API provides the status of CPU where this API is called
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   283   * \return Status of global interrupt enable bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   284   * \retval TRUE: Global interrupts enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   285   * \retval FALSE: Global interrupts disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   286   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   287  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   288  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   289  /** \brief API to disable global interrupt and return the previous status.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   290   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   291   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   292   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   293   * \return Previous status of global interrupt enable bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   294   * \retval TRUE: Previously, global interrupts enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   295   * \retval FALSE: Previously, global interrupts disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   296   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   297  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   298  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   299  /** \brief API to enable global interrupt.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   300   * This API simply enables the global interrupt.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   301   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   302   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   303  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   304  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   305  /** \brief Disable the Global Interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   306   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   311   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   312   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   313   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   314   * \param enabled Previous status of the global interrupt enable bit
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   315   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   329   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   330   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   331   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   332   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   333   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   334   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   335  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   336  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   337  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   338   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   339   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   340   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   341   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to invalidate the program cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   352   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   353   * \return Status TRUE/FALSE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enable Command to enable or bypass the data cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   362   * TRUE: Enable the data cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   363   * FALSE: Bypass the data cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   364   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   369   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   371   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   372   * \param enable Command to enable or bypass the program cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   373   * TRUE: Enable the program cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   374   * FALSE: Bypass the program cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   375   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   376   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   377  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   378  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   379  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   380  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   381  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   382   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   384  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   385  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   386  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   387  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   388  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   389   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   390   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   391   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   392   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   393   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   394  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   395  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   396  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   397   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   398   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   399   * It cannot be used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   400   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   401   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   402   * reading the counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   403   * \return Status of sticky overflow bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   404   * \retval TRUE: Sticky overflow bit is set.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   405   * \retval FALSE: Sticky overflow bit is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   406   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   408  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   410   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   413   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   414   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   415  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   416  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   417  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   418   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   419   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   420   * It cannot be used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   421   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   422   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   423   * reading the counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   424   * \return Status of sticky overflow bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   425   * \retval TRUE: Sticky overflow bit is set.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   426   * \retval FALSE: Sticky overflow bit is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   427   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   428  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   429  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   430  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   431   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   432   * \return counter value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   433   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   434  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   435  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   436  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   437   * This is generic function to get sticky overflow bit of any performance counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   438   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief Reset and start instruction, clock and multi counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   445   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   446   * \param mode Counter mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   448   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   450  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   452   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   455   * \param enable enable Command to enable or disable the performance counter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   456   * TRUE: Enable the performance counter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   457   * FALSE: Disable the performance counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   458   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   459   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   460  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   461  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   462  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   463  /** \brief Stop instruction and clock counters, return their values
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   464   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   465   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   466   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   467   * \return Performance counter result
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   468   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   470  #endif
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   471  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   472  /** \brief API to update clock counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   473   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   474   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   475   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   476   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   477   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   478   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   479  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   480  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   481  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   482   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   483   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   484   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   485   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   486   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief API to update performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   491   * This is generic function to update any of the performance counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   492   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   493   * \param count Count
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   498  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   499  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   500  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   501   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   502  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   503  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   504  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   505  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   506  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   507  /** \brief API to acquire the mutex (binary semaphore).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   508   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   509   * This API can be used to acquire/get the mutex.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   510   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   511   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   512   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   513   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   514   *    IfxCpu_mutexLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   515   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   516   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   517   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   518   *      IfxCpu_releaseMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   519   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   520   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   521   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   522   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   523  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   524  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   525  /** \brief API to unlock the mutex .
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   526   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   527   * This API can be used to unlock the previously acquired mutex
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   528   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   529   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   530   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   531   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   532   *    IfxCpu_mutexLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   533   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   534   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   535   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   536   *      IfxCpu_releaseMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   537   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   538   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   539   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   540   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   541  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   542  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   543  /** \brief API to unlock the resource .
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   544   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   545   * This API can be used to unlock the previously acquired lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   546   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   547   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   548   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   549  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   550  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   551  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   552   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   553   * This API can be used to spin lock for the lock for the given timeout period.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   554   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   555   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   556   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   557   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   558   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   559   *    IfxCpu_spinLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   560   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   561   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   562   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   563   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   564   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   565   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   566   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   567   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   568  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   569  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   570  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   572  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   573   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   574  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   575  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   577  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   578  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   579  /** \brief API to get random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   580   * \param seed Pointer to seed value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   581   * \return random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   582   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   583  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   584  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   585  /** \brief API to get random value with in the range
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   586   * \param seed Pointer to seed value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   587   * \param min minimum range value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   588   * \param max maximum range value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   589   * \return random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   590   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   591  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   592  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   593  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   594   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   595   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   596   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   597   * CORE_ID register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   598   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   600   * e.g:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   601   * 1. Check for synchronisation between core 0 and core 5
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   602   * # define 0x41U
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   603   * 2. Check for synchronisation between core 0 to core 5
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   604   * # define 0x5FU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   605   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   606   * Note:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   607   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   608   * Core 0: 0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   609   * Core 1: 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   610   * Core 2: 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   611   * Core 3: 3
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   612   * Core 4: 4
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   613   * Core 5: 6
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   614   * \param event Synchronous Event
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   615   * \param timeoutMilliSec timeout in millisec
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   616   * \return Error condition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   617   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   618   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   619   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   620   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   621   * // Global variable. preferably located in  shared memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   622   * IfxCpu_syncEvent event;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   623   * boolean errorVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   624   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   625   * // Below code should be repeated in Each core
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   626   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   627   * // Upon reaching Synchonisation point
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   628   * IfxCpu_emitEvent(&event);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   629   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   630   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   631   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   632   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   633   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   634  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   635  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   636  /** \brief This function sets a bit corresponding to the core in the event.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   637   * \param event Synchronous Event
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   638   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   639   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   640   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   641   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   642   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   643  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   644  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   645  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   646  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   647  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   648  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   649  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   650  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   651  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   652  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   653      Ifx_CPU_ICR reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   654      reg.U = __mfcr(CPU_ICR);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   655      return reg.B.IE != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   656  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   657  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   658  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   659  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   660  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   661      boolean enabled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   662      enabled = IfxCpu_areInterruptsEnabled();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   663      __disable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   664      __nop();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   665      return enabled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   666  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   667  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   668  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   670  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   671      __enable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   672  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   673  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   674  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   675  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   676  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   677      uint32 cpu_pmaVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   678      uint16 checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   679      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   680      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   681  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   682      /*resolve the restrictions*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   683      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   684      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   685  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   686      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   687      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   688          segmentNumberMask |= checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   689      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   690  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   691      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   692  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   693      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   694  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   695      /*The CPU_PMA registers are ENDINIT protected*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   696      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   697      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   698      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   699      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   700      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   701      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   702      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   703  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   704  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   705  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   707  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   708      uint32 cpu_pmaVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   709      uint16 checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   710      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   711      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   712  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   713      /*resolve the restrictions*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   714      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   715      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   716  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   717      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   718      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   719          segmentNumberMask |= checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   720      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   721  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   722      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   723  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   724      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   725  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   726      /*The CPU_PMA registers are ENDINIT protected*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   727      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   728      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   729      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   730      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   731      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   732      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   733      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   734  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   735  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   736  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   737  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   738  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   739      __disable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   740      __nop();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   741  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   742  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   743  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   744  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   745  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   746      Ifx_CPU *module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   747  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   748      if (cpu < IfxCpu_ResourceCpu_none)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   749      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   750          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   751      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   752      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   753      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   754          module = NULL_PTR;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   755      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   756  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   757      return module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   758  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   759  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   760  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   761  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   762  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   763      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   764  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   765  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   766  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   767  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   768  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   769      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   770  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   771  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   772  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   773  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   774  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   775      Ifx_CPU_CORE_ID reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   776      reg.U = __mfcr(CPU_CORE_ID);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   778  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   780  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   781  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   782  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   783      Ifx_CPU_CORE_ID reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   784      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L448:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   785      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	and	d15,#7
.L449:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   785      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;      (inlined)
	j	.L52

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   786  }      (inlined)
.L52:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   251  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   252      return (boolean)IfxScuWdt_getCpuWatchdogEndInitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
	mul	d15,d15,#12
	mov.a	a15,d15
	movh.a	a3,#61443
	add.a	a3,a15
	lea	a15,[a3]24832
.L398:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   456      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   457  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   458  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   459  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   460  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   461  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   463      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   464          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   465          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   466                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   467                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   468                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   469      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   470  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   471      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   472      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   473                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   474                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   475                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   476  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   477      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   479      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   480  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   481  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   482  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   483  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   484  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   485      uint16 password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   486  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   487      /* Read Password from CON0 register
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   488       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   489       * to toggle them before returning password */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   490      password  = watchdog->CON0.B.PW;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   491      password ^= 0x003F;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   492  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   493      return password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   494  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   495  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   496  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   497  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   498  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   499      return (boolean)watchdog->CON0.B.ENDINIT;
	ld.w	d15,[a15]
	and	d2,d15,#1
.L858:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   499      return (boolean)watchdog->CON0.B.ENDINIT;      (inlined)
	j	.L53

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   500  }      (inlined)
.L53:
	j	.L54

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   253  }
.L54:
	ret
.L395:
	
__IfxScuWdt_getCpuWatchdogEndInit_function_end:
	.size	IfxScuWdt_getCpuWatchdogEndInit,__IfxScuWdt_getCpuWatchdogEndInit_function_end-IfxScuWdt_getCpuWatchdogEndInit
.L241:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_getSafetyWatchdogPassword',code,cluster('IfxScuWdt_getSafetyWatchdogPassword')
	.sect	'.text.IfxScuWdt.IfxScuWdt_getSafetyWatchdogPassword'
	.align	2
	
	.global	IfxScuWdt_getSafetyWatchdogPassword

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   254  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   255  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   256  uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
; Function IfxScuWdt_getSafetyWatchdogPassword
.L136:
IfxScuWdt_getSafetyWatchdogPassword:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   456      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   457  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   458  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   459  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   460  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   461  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   463      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   464          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   465          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   466                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   467                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   468                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   469      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   470  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   471      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   472      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   473                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   474                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   475                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   476  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   477      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   479      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   480  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   481  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   482  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   483  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   484  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   485      uint16 password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   486  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   487      /* Read Password from CON0 register
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   488       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   489       * to toggle them before returning password */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   490      password  = watchdog->CON0.B.PW;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   491      password ^= 0x003F;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   492  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   493      return password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   494  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   495  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   496  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   497  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   498  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   499      return (boolean)watchdog->CON0.B.ENDINIT;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   500  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   501  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   502  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   503  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   504  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   505      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   506  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   507  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   508  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   509  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   510  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   511      uint16        password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   512      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
	movh.a	a15,#61443
.L450:
	lea	a15,[a15]@los(0xf00360f0)
.L863:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   513  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   514      /* Read Password from Safety WDT CON0 register
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   515       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   516       * to toggle them before returning password */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   517      password  = watchdog->CON0.B.PW;
	ld.w	d15,[a15]
	extr.u	d15,d15,#2,#14
.L451:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   518      password ^= 0x003F;
	xor	d2,d15,#63
.L452:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   520      return password;      (inlined)
	j	.L55

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   521  }      (inlined)
.L55:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   257  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   258      return IfxScuWdt_getSafetyWatchdogPasswordInline();
	j	.L56

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   259  }
.L56:
	ret
.L402:
	
__IfxScuWdt_getSafetyWatchdogPassword_function_end:
	.size	IfxScuWdt_getSafetyWatchdogPassword,__IfxScuWdt_getSafetyWatchdogPassword_function_end-IfxScuWdt_getSafetyWatchdogPassword
.L246:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_initConfig',code,cluster('IfxScuWdt_initConfig')
	.sect	'.text.IfxScuWdt.IfxScuWdt_initConfig'
	.align	2
	
	.global	IfxScuWdt_initConfig

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   260  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   261  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   262  void IfxScuWdt_initConfig(IfxScuWdt_Config *config)
; Function IfxScuWdt_initConfig
.L138:
IfxScuWdt_initConfig:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   263  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   264      config->password                      = IFXSCUWDT_RESET_PASSWORD;
	mov	d15,#60
.L484:
	st.h	[a4],d15
.L485:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   265      config->reload                        = 0xFFFC;
	mov.u	d15,#65532
.L486:
	st.h	[a4]2,d15
.L487:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   266      config->inputFrequency                = IfxScu_WDTCON1_IR_divBy16384;
	mov	d15,#0
.L488:
	st.b	[a4]4,d15
.L489:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   267      config->disableWatchdog               = FALSE;
	mov	d15,#0
.L490:
	st.b	[a4]5,d15
.L491:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   268      config->enableSmuRestriction          = FALSE;
	mov	d15,#0
.L492:
	st.b	[a4]6,d15
.L493:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   269      config->enableAutomaticPasswordChange = FALSE;
	mov	d15,#0
.L494:
	st.b	[a4]7,d15
.L495:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   270      config->enableTimerCheck              = FALSE;
	mov	d15,#0
.L496:
	st.b	[a4]8,d15
.L497:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   271      config->enableTimerCheckTolerance     = FALSE;
	mov	d15,#0
.L498:
	st.b	[a4]9,d15
.L499:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   272      config->clrInternalResetFlag          = FALSE;
	mov	d15,#0
.L500:
	st.b	[a4]10,d15
.L501:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   273  }
	ret
.L262:
	
__IfxScuWdt_initConfig_function_end:
	.size	IfxScuWdt_initConfig,__IfxScuWdt_initConfig_function_end-IfxScuWdt_initConfig
.L161:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_initCpuWatchdog',code,cluster('IfxScuWdt_initCpuWatchdog')
	.sect	'.text.IfxScuWdt.IfxScuWdt_initCpuWatchdog'
	.align	2
	
	.global	IfxScuWdt_initCpuWatchdog

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   274  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   275  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   276  void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config)
; Function IfxScuWdt_initCpuWatchdog
.L140:
IfxScuWdt_initCpuWatchdog:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   277  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   278      Ifx_SCU_WDTCPU_CON0 wdt_con0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   279      Ifx_SCU_WDTCPU_CON1 wdt_con1;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   280  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   281      /* Read Config_0 register and clear wdt_con1 variable */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   282      wdt_con0.U = wdt->CON0.U;
	ld.w	d15,[a4]
.L454:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   283      wdt_con1.U = 0;
	mov	d1,#0
.L455:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   284  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   285      if (wdt_con0.B.LCK)
	jz.t	d15:1,.L57
.L506:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   286      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   287          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   288          wdt_con0.B.ENDINIT = 1;
	or	d15,#1
.L507:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   289          wdt_con0.B.LCK     = 0;
	insert	d15,d15,#0,#1,#1
.L508:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   290          wdt_con0.B.PW     ^= 0x003F;
	extr.u	d0,d15,#2,#14
	xor	d0,d0,#63
	insert	d15,d15,d0,#2,#14
.L509:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   291  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   292          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   293          wdt->CON0.U = wdt_con0.U;
	st.w	[a4],d15
.L57:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   294      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   295  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   296      /* Initialize CON0 register, with modify access, with user defined parameters
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   297       * Clear ENDINT bit to unprotect CON1 register for initialization
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   298       * see Table 3 (Modify Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   299      wdt_con0.B.ENDINIT = 0;
	insert	d15,d15,#0,#0,#1
.L510:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   300      wdt_con0.B.LCK     = 1;
	or	d15,#2
.L511:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   301      wdt_con0.B.PW      = config->password; //user defined password
	ld.hu	d0,[a5]0
.L512:
	insert	d15,d15,d0,#2,#14
.L513:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   302      wdt_con0.B.REL     = config->reload;   //user defined reload value
	ld.hu	d0,[a5]2
.L514:
	insert	d15,d15,d0,#16,#16
.L515:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   303  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   304      /* Modify access ready - write WDT_CON0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   305      wdt->CON0.U = wdt_con0.U;
	st.w	[a4],d15
.L516:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   306  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   307      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   308      while (wdt->CON0.B.ENDINIT == 1)
	j	.L58
.L59:
.L58:
	ld.w	d15,[a4]
	and	d15,#1
.L517:
	jeq	d15,#1,.L59
.L518:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   309      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   310  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   311      /* Initialize CON1 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   312      switch (config->inputFrequency)
	ld.bu	d15,[a5]4
.L519:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   313      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   314      case IfxScu_WDTCON1_IR_divBy16384:
	mov	d0,#0
	jeq	d15,d0,.L60
.L520:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   315          wdt_con1.B.IR0 = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   316          wdt_con1.B.IR1 = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   317          break;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   318      case IfxScu_WDTCON1_IR_divBy256:
	mov	d0,#1
	jeq	d15,d0,.L61
.L521:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   319          wdt_con1.B.IR0 = 1;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   320          wdt_con1.B.IR1 = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   321          break;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   322      case IfxScu_WDTCON1_IR_divBy64:
	mov	d0,#2
	jeq	d15,d0,.L62
	j	.L63
.L60:
	mov	d0,#0
.L522:
	insert	d1,d1,d0,#2,#1
.L523:
	mov	d15,#0
.L524:
	insert	d1,d1,d15,#5,#1
.L525:
	j	.L64
.L61:
	mov	d15,#1
.L526:
	insert	d1,d1,d15,#2,#1
.L527:
	mov	d15,#0
.L528:
	insert	d1,d1,d15,#5,#1
.L529:
	j	.L65
.L62:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   323          wdt_con1.B.IR0 = 0;
	mov	d15,#0
.L530:
	insert	d1,d1,d15,#2,#1
.L531:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   324          wdt_con1.B.IR1 = 1;
	mov	d15,#1
.L532:
	insert	d1,d1,d15,#5,#1
.L533:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   325          break;
	j	.L66
.L63:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   326      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   327  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   328      wdt_con1.B.DR   = config->disableWatchdog ? 1 : 0;
.L66:
.L65:
.L64:
	ld.bu	d15,[a5]5
.L534:
	jeq	d15,#0,.L67
.L535:
	mov	d15,#1
.L536:
	j	.L68
.L67:
	mov	d15,#0
.L68:
	insert	d1,d1,d15,#3,#1
.L537:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   329      wdt_con1.B.UR   = config->enableSmuRestriction ? 1 : 0;
	ld.bu	d15,[a5]6
.L538:
	jeq	d15,#0,.L69
.L539:
	mov	d15,#1
.L540:
	j	.L70
.L69:
	mov	d15,#0
.L70:
	insert	d1,d1,d15,#6,#1
.L541:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   330      wdt_con1.B.PAR  = config->enableAutomaticPasswordChange ? 1 : 0;
	ld.bu	d15,[a5]7
.L542:
	jeq	d15,#0,.L71
.L543:
	mov	d15,#1
.L544:
	j	.L72
.L71:
	mov	d15,#0
.L72:
	insert	d1,d1,d15,#7,#1
.L545:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   331      wdt_con1.B.TCR  = config->enableTimerCheck ? 1 : 0;
	ld.bu	d15,[a5]8
.L546:
	jeq	d15,#0,.L73
.L547:
	mov	d15,#1
.L548:
	j	.L74
.L73:
	mov	d15,#0
.L74:
	insert	d1,d1,d15,#8,#1
.L549:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   332      wdt_con1.B.TCTR = config->enableTimerCheckTolerance ? 1 : 0;
	ld.bu	d15,[a5]9
.L550:
	jeq	d15,#0,.L75
.L551:
	mov	d15,#1
.L552:
	j	.L76
.L75:
	mov	d15,#0
.L76:
	insert	d1,d1,d15,#9,#7
.L553:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   333  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   334      /* Finally write CON1 with user defined configuration */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   335      wdt->CON1.U = wdt_con1.U;
	st.w	[a4]4,d1
.L554:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   336  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   337      /* Initialization finished - set CPU ENDINIT protection */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   338      IfxScuWdt_setCpuEndinit(config->password);
	ld.hu	d4,[a5]0
	call	IfxScuWdt_setCpuEndinit
.L453:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   339  }
	ret
.L265:
	
__IfxScuWdt_initCpuWatchdog_function_end:
	.size	IfxScuWdt_initCpuWatchdog,__IfxScuWdt_initCpuWatchdog_function_end-IfxScuWdt_initCpuWatchdog
.L166:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_initSafetyWatchdog',code,cluster('IfxScuWdt_initSafetyWatchdog')
	.sect	'.text.IfxScuWdt.IfxScuWdt_initSafetyWatchdog'
	.align	2
	
	.global	IfxScuWdt_initSafetyWatchdog

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   340  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   341  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   342  void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config)
; Function IfxScuWdt_initSafetyWatchdog
.L142:
IfxScuWdt_initSafetyWatchdog:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   343  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   344      Ifx_SCU_WDTS_CON0 wdt_con0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   345      Ifx_SCU_WDTS_CON1 wdt_con1;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   346  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   347      /* Read Config_0 register and clear wdt_con1 variable */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   348      wdt_con0.U = wdt->CON0.U;
	ld.w	d15,[a4]
.L457:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   349      wdt_con1.U = 0;
	mov	d1,#0
.L458:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   350  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   351      if (wdt_con0.B.LCK)
	jz.t	d15:1,.L77
.L559:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   352      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   353          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   354          wdt_con0.B.ENDINIT = 1;
	or	d15,#1
.L560:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   355          wdt_con0.B.LCK     = 0;
	insert	d15,d15,#0,#1,#1
.L561:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   356          wdt_con0.B.PW     ^= 0x003F;
	extr.u	d0,d15,#2,#14
	xor	d0,d0,#63
	insert	d15,d15,d0,#2,#14
.L562:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   357  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   358          /* Password ready. Store it to WDT_CON0 to unprotect the register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   359          wdt->CON0.U = wdt_con0.U;
	st.w	[a4],d15
.L77:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   360      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   361  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   362      /* Initialize CON0 register, with modify access, with user defined parameters
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   363       * Clear ENDINT bit to unprotect CON1 register for initialization
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   364       * see Table 3 (Modify Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   365      wdt_con0.B.ENDINIT = 0;
	insert	d15,d15,#0,#0,#1
.L563:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   366      wdt_con0.B.LCK     = 1;
	or	d15,#2
.L564:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   367      wdt_con0.B.PW      = config->password; //user defined password
	ld.hu	d0,[a5]0
.L565:
	insert	d15,d15,d0,#2,#14
.L566:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   368      wdt_con0.B.REL     = config->reload;   //user defined reload value
	ld.hu	d0,[a5]2
.L567:
	insert	d15,d15,d0,#16,#16
.L568:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   369  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   370      /* Modify access ready - write WDT_CON0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   371      wdt->CON0.U = wdt_con0.U;
	st.w	[a4],d15
.L569:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   372  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   373      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   374      while (wdt->CON0.B.ENDINIT == 1)
	j	.L78
.L79:
.L78:
	ld.w	d15,[a4]
	and	d15,#1
.L570:
	jeq	d15,#1,.L79
.L571:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   375      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   376  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   377      /* Initialize CON1 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   378      switch (config->inputFrequency)
	ld.bu	d15,[a5]4
.L572:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   379      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   380      case IfxScu_WDTCON1_IR_divBy16384:
	mov	d0,#0
	jeq	d15,d0,.L80
.L573:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   381          wdt_con1.B.IR0 = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   382          wdt_con1.B.IR1 = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   383          break;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   384      case IfxScu_WDTCON1_IR_divBy256:
	mov	d0,#1
	jeq	d15,d0,.L81
.L574:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   385          wdt_con1.B.IR0 = 1;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   386          wdt_con1.B.IR1 = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   387          break;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   388      case IfxScu_WDTCON1_IR_divBy64:
	mov	d0,#2
	jeq	d15,d0,.L82
	j	.L83
.L80:
	mov	d0,#0
.L575:
	insert	d1,d1,d0,#2,#1
.L576:
	mov	d15,#0
.L577:
	insert	d1,d1,d15,#5,#1
.L578:
	j	.L84
.L81:
	mov	d15,#1
.L579:
	insert	d1,d1,d15,#2,#1
.L580:
	mov	d15,#0
.L581:
	insert	d1,d1,d15,#5,#1
.L582:
	j	.L85
.L82:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   389          wdt_con1.B.IR0 = 0;
	mov	d15,#0
.L583:
	insert	d1,d1,d15,#2,#1
.L584:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   390          wdt_con1.B.IR1 = 1;
	mov	d15,#1
.L585:
	insert	d1,d1,d15,#5,#1
.L586:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   391          break;
	j	.L86
.L83:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   392      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   393  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   394      wdt_con1.B.DR     = config->disableWatchdog ? 1 : 0;
.L86:
.L85:
.L84:
	ld.bu	d15,[a5]5
.L587:
	jeq	d15,#0,.L87
.L588:
	mov	d15,#1
.L589:
	j	.L88
.L87:
	mov	d15,#0
.L88:
	insert	d1,d1,d15,#3,#1
.L590:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   395      wdt_con1.B.UR     = config->enableSmuRestriction ? 1 : 0;
	ld.bu	d15,[a5]6
.L591:
	jeq	d15,#0,.L89
.L592:
	mov	d15,#1
.L593:
	j	.L90
.L89:
	mov	d15,#0
.L90:
	insert	d1,d1,d15,#6,#1
.L594:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   396      wdt_con1.B.PAR    = config->enableAutomaticPasswordChange ? 1 : 0;
	ld.bu	d15,[a5]7
.L595:
	jeq	d15,#0,.L91
.L596:
	mov	d15,#1
.L597:
	j	.L92
.L91:
	mov	d15,#0
.L92:
	insert	d1,d1,d15,#7,#1
.L598:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   397      wdt_con1.B.TCR    = config->enableTimerCheck ? 1 : 0;
	ld.bu	d15,[a5]8
.L599:
	jeq	d15,#0,.L93
.L600:
	mov	d15,#1
.L601:
	j	.L94
.L93:
	mov	d15,#0
.L94:
	insert	d1,d1,d15,#8,#1
.L602:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   398      wdt_con1.B.TCTR   = config->enableTimerCheckTolerance ? 1 : 0;
	ld.bu	d15,[a5]9
.L603:
	jeq	d15,#0,.L95
.L604:
	mov	d15,#1
.L605:
	j	.L96
.L95:
	mov	d15,#0
.L96:
	insert	d1,d1,d15,#9,#7
.L606:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   399      wdt_con1.B.CLRIRF = config->clrInternalResetFlag ? 0 : 1;
	ld.bu	d15,[a5]10
.L607:
	jeq	d15,#0,.L97
.L608:
	mov	d15,#0
.L609:
	j	.L98
.L97:
	mov	d15,#1
.L98:
	insert	d1,d1,d15,#0,#1
.L610:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   400  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   401      /* Finally write CON1 with user defined configuration */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   402      wdt->CON1.U = wdt_con1.U;
	st.w	[a4]4,d1
.L611:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   403  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   404      /* Initialization finished - set Safety ENDINIT protection */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   405      IfxScuWdt_setSafetyEndinit(config->password);
	ld.hu	d4,[a5]0
	call	IfxScuWdt_setSafetyEndinit
.L456:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   406  }
	ret
.L274:
	
__IfxScuWdt_initSafetyWatchdog_function_end:
	.size	IfxScuWdt_initSafetyWatchdog,__IfxScuWdt_initSafetyWatchdog_function_end-IfxScuWdt_initSafetyWatchdog
.L171:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_serviceCpuWatchdog',code,cluster('IfxScuWdt_serviceCpuWatchdog')
	.sect	'.text.IfxScuWdt.IfxScuWdt_serviceCpuWatchdog'
	.align	2
	
	.global	IfxScuWdt_serviceCpuWatchdog

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   407  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   408  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   409  void IfxScuWdt_serviceCpuWatchdog(uint16 password)
; Function IfxScuWdt_serviceCpuWatchdog
.L144:
IfxScuWdt_serviceCpuWatchdog:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   410  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   411      IfxScuWdt_setCpuEndinit(password);
	call	IfxScuWdt_setCpuEndinit
.L459:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   412  }
	ret
.L407:
	
__IfxScuWdt_serviceCpuWatchdog_function_end:
	.size	IfxScuWdt_serviceCpuWatchdog,__IfxScuWdt_serviceCpuWatchdog_function_end-IfxScuWdt_serviceCpuWatchdog
.L251:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_serviceSafetyWatchdog',code,cluster('IfxScuWdt_serviceSafetyWatchdog')
	.sect	'.text.IfxScuWdt.IfxScuWdt_serviceSafetyWatchdog'
	.align	2
	
	.global	IfxScuWdt_serviceSafetyWatchdog

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   413  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   414  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   415  void IfxScuWdt_serviceSafetyWatchdog(uint16 password)
; Function IfxScuWdt_serviceSafetyWatchdog
.L146:
IfxScuWdt_serviceSafetyWatchdog:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   416  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   417      IfxScuWdt_setSafetyEndinit(password);
	call	IfxScuWdt_setSafetyEndinit
.L460:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   418  }
	ret
.L409:
	
__IfxScuWdt_serviceSafetyWatchdog_function_end:
	.size	IfxScuWdt_serviceSafetyWatchdog,__IfxScuWdt_serviceSafetyWatchdog_function_end-IfxScuWdt_serviceSafetyWatchdog
.L256:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_setCpuEndinit',code,cluster('IfxScuWdt_setCpuEndinit')
	.sect	'.text.IfxScuWdt.IfxScuWdt_setCpuEndinit'
	.align	2
	
	.global	IfxScuWdt_setCpuEndinit

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   419  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   420  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   421  void IfxScuWdt_setCpuEndinit(uint16 password)
; Function IfxScuWdt_setCpuEndinit
.L148:
IfxScuWdt_setCpuEndinit:	.type	func

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    44   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    45   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    46   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    47   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    48   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    49   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    50   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    51   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    52   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    53   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    54   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    55   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    56   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    57   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    58   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    59   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    60   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    61   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    63  #ifndef IFXCPU_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    64  #define IFXCPU_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    65  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    66  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    67  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    68  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    69  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    70  #include "_Impl/IfxCpu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    71  #include "IfxSrc_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    72  #include "IfxScu_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    73  #include "IfxStm_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    74  #include "_Impl/IfxScu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    75  #include "_Utilities/Ifx_Assert.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    76  #include "Scu/Std/IfxScuWdt.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    77  #include "Scu/Std/IfxScuCcu.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    78  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    79  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    80  /*-----------------------------------Macros-----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    81  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    82  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    83  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    84   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    85   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    86   * the CPU number.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    87   * Example usage:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    88   *  \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    89   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    90   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    91   *  \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    92   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    93  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    94  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    95  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    96   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    97   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    98   * the CPU number.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    99   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   100   *   Example usage:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   101   *   \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   102   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   103   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   104   *   \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   105   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   106  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   107  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   108  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   109  /*------------------------------Type Definitions------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   110  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   111  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   112  /** \brief Lock type Spin lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   113   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   114  typedef unsigned int IfxCpu_spinLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   115  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Lock type Mutex lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   117   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   118  typedef unsigned int IfxCpu_mutexLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   119  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   120  /** \brief Event used for synchronisation.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   121   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   122  typedef unsigned int IfxCpu_syncEvent;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   123  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   124  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   125  /*--------------------------------Enumerations--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   127  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   128  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   129   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   130  /** \brief Enumeration for the Cpu mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   131   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   132  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   133  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_halt,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_run,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_idle,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   137      IfxCpu_CoreMode_sleep,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   138      IfxCpu_CoreMode_stby,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   139      IfxCpu_CoreMode_unknown
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   140  } IfxCpu_CoreMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   141  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance conunter modes
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   143   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   144  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   145  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   148  } IfxCpu_CounterMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   149  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   150  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   151  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   152  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   153  /*-----------------------------Data Structures--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   154  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   155  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   156  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   157   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   158  /** \brief counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   159   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   160  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   161  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   162      uint32  counter;        /**< \brief Counter value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   163      boolean overlfow;       /**< \brief sticky overlfow */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_Counter;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   166  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   167  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   168  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   169   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   170  /** \brief Performance counter result
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   171   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   172  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   173  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_Perf;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   181  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   182  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   183  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   184   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   185  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   187  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   188  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief API to get the address for CPU HW module register memory map
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   191   * \param cpu Resource index of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   192   * \return CPU module register address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   193   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   194  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   195  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief API to get core id of the CPU of the caller.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   197   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   198   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   199   * \return Resource index of the CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   200   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   201  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   202  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   203  /** \brief API to get cpu index of the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   204   * Note: This api can be used whereever cpu no/index is needed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   205   * \return Resource index of the CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   206   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   207  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   208  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   209  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   210   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   211   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   212   * shall not be used to initialize the CSA of another CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   213   * \param csaBegin Pointer to start of context save area
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   214   * \param csaEnd Pointer to end of context save area
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   215   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   216   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   217  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   219  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   220   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   221   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   222  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   224  /** \brief Triggers Software Reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   225   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   226   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   227  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   228  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   229  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   230  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   231  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   232  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   233  /** \brief API to get current mode of CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   234   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   235   * \return Current mode of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   236   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   237  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   238  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   239  /** \brief API to get current mode of CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   240   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   241   * \return Resource index of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   242   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   243  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   244  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   245  /** \brief API to set mode of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   246   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   247   * \param mode CPU mode to be set by this API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   248   * \return Success status of the activity (setting the core mode).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   249   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   250   * \retval FALSE: If the activity can't be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   251   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   252  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   253  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   254  /** \brief API to set the program counter for the CPU specified.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   255   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   256   * \param programCounter Program counter value to be set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   257   * \return success status of the activity (setting program counter value).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   258   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   259   * \retval FALSE: If the activity can't be performed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   260   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   261  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   262  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   263  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   264   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   265   * \param programCounter Program counter value to start the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   266   * \return success status of the activity (setting program counter value).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   268   * \retval FALSE: If the activity can't be performed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   269   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   270  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   271  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   272  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   273  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   274  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   275   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   277  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   278  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   279  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   280  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   281  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   282   * This API provides the status of CPU where this API is called
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   283   * \return Status of global interrupt enable bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   284   * \retval TRUE: Global interrupts enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   285   * \retval FALSE: Global interrupts disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   286   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   287  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   288  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   289  /** \brief API to disable global interrupt and return the previous status.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   290   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   291   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   292   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   293   * \return Previous status of global interrupt enable bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   294   * \retval TRUE: Previously, global interrupts enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   295   * \retval FALSE: Previously, global interrupts disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   296   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   297  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   298  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   299  /** \brief API to enable global interrupt.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   300   * This API simply enables the global interrupt.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   301   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   302   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   303  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   304  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   305  /** \brief Disable the Global Interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   306   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   311   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   312   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   313   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   314   * \param enabled Previous status of the global interrupt enable bit
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   315   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   329   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   330   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   331   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   332   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   333   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   334   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   335  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   336  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   337  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   338   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   339   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   340   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   341   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to invalidate the program cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   352   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   353   * \return Status TRUE/FALSE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enable Command to enable or bypass the data cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   362   * TRUE: Enable the data cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   363   * FALSE: Bypass the data cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   364   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   369   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   371   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   372   * \param enable Command to enable or bypass the program cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   373   * TRUE: Enable the program cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   374   * FALSE: Bypass the program cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   375   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   376   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   377  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   378  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   379  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   380  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   381  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   382   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   384  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   385  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   386  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   387  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   388  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   389   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   390   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   391   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   392   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   393   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   394  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   395  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   396  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   397   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   398   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   399   * It cannot be used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   400   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   401   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   402   * reading the counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   403   * \return Status of sticky overflow bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   404   * \retval TRUE: Sticky overflow bit is set.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   405   * \retval FALSE: Sticky overflow bit is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   406   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   408  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   410   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   413   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   414   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   415  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   416  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   417  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   418   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   419   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   420   * It cannot be used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   421   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   422   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   423   * reading the counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   424   * \return Status of sticky overflow bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   425   * \retval TRUE: Sticky overflow bit is set.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   426   * \retval FALSE: Sticky overflow bit is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   427   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   428  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   429  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   430  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   431   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   432   * \return counter value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   433   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   434  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   435  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   436  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   437   * This is generic function to get sticky overflow bit of any performance counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   438   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief Reset and start instruction, clock and multi counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   445   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   446   * \param mode Counter mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   448   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   450  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   452   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   455   * \param enable enable Command to enable or disable the performance counter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   456   * TRUE: Enable the performance counter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   457   * FALSE: Disable the performance counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   458   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   459   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   460  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   461  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   462  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   463  /** \brief Stop instruction and clock counters, return their values
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   464   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   465   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   466   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   467   * \return Performance counter result
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   468   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   470  #endif
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   471  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   472  /** \brief API to update clock counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   473   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   474   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   475   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   476   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   477   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   478   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   479  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   480  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   481  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   482   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   483   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   484   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   485   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   486   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief API to update performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   491   * This is generic function to update any of the performance counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   492   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   493   * \param count Count
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   498  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   499  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   500  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   501   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   502  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   503  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   504  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   505  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   506  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   507  /** \brief API to acquire the mutex (binary semaphore).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   508   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   509   * This API can be used to acquire/get the mutex.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   510   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   511   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   512   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   513   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   514   *    IfxCpu_mutexLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   515   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   516   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   517   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   518   *      IfxCpu_releaseMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   519   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   520   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   521   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   522   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   523  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   524  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   525  /** \brief API to unlock the mutex .
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   526   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   527   * This API can be used to unlock the previously acquired mutex
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   528   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   529   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   530   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   531   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   532   *    IfxCpu_mutexLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   533   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   534   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   535   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   536   *      IfxCpu_releaseMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   537   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   538   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   539   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   540   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   541  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   542  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   543  /** \brief API to unlock the resource .
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   544   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   545   * This API can be used to unlock the previously acquired lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   546   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   547   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   548   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   549  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   550  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   551  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   552   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   553   * This API can be used to spin lock for the lock for the given timeout period.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   554   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   555   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   556   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   557   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   558   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   559   *    IfxCpu_spinLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   560   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   561   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   562   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   563   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   564   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   565   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   566   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   567   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   568  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   569  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   570  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   572  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   573   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   574  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   575  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   577  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   578  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   579  /** \brief API to get random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   580   * \param seed Pointer to seed value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   581   * \return random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   582   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   583  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   584  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   585  /** \brief API to get random value with in the range
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   586   * \param seed Pointer to seed value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   587   * \param min minimum range value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   588   * \param max maximum range value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   589   * \return random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   590   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   591  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   592  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   593  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   594   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   595   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   596   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   597   * CORE_ID register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   598   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   600   * e.g:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   601   * 1. Check for synchronisation between core 0 and core 5
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   602   * # define 0x41U
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   603   * 2. Check for synchronisation between core 0 to core 5
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   604   * # define 0x5FU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   605   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   606   * Note:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   607   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   608   * Core 0: 0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   609   * Core 1: 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   610   * Core 2: 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   611   * Core 3: 3
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   612   * Core 4: 4
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   613   * Core 5: 6
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   614   * \param event Synchronous Event
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   615   * \param timeoutMilliSec timeout in millisec
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   616   * \return Error condition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   617   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   618   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   619   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   620   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   621   * // Global variable. preferably located in  shared memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   622   * IfxCpu_syncEvent event;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   623   * boolean errorVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   624   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   625   * // Below code should be repeated in Each core
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   626   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   627   * // Upon reaching Synchonisation point
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   628   * IfxCpu_emitEvent(&event);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   629   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   630   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   631   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   632   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   633   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   634  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   635  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   636  /** \brief This function sets a bit corresponding to the core in the event.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   637   * \param event Synchronous Event
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   638   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   639   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   640   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   641   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   642   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   643  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   644  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   645  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   646  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   647  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   648  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   649  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   650  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   651  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   652  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   653      Ifx_CPU_ICR reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   654      reg.U = __mfcr(CPU_ICR);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   655      return reg.B.IE != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   656  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   657  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   658  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   659  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   660  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   661      boolean enabled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   662      enabled = IfxCpu_areInterruptsEnabled();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   663      __disable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   664      __nop();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   665      return enabled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   666  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   667  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   668  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   670  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   671      __enable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   672  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   673  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   674  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   675  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   676  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   677      uint32 cpu_pmaVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   678      uint16 checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   679      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   680      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   681  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   682      /*resolve the restrictions*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   683      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   684      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   685  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   686      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   687      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   688          segmentNumberMask |= checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   689      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   690  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   691      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   692  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   693      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   694  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   695      /*The CPU_PMA registers are ENDINIT protected*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   696      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   697      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   698      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   699      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   700      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   701      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   702      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   703  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   704  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   705  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   707  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   708      uint32 cpu_pmaVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   709      uint16 checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   710      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   711      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   712  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   713      /*resolve the restrictions*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   714      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   715      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   716  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   717      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   718      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   719          segmentNumberMask |= checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   720      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   721  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   722      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   723  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   724      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   725  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   726      /*The CPU_PMA registers are ENDINIT protected*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   727      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   728      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   729      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   730      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   731      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   732      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   733      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   734  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   735  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   736  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   737  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   738  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   739      __disable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   740      __nop();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   741  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   742  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   743  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   744  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   745  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   746      Ifx_CPU *module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   747  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   748      if (cpu < IfxCpu_ResourceCpu_none)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   749      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   750          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   751      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   752      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   753      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   754          module = NULL_PTR;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   755      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   756  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   757      return module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   758  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   759  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   760  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   761  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   762  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   763      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   764  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   765  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   766  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   767  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   768  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   769      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   770  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   771  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   772  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   773  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   774  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   775      Ifx_CPU_CORE_ID reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   776      reg.U = __mfcr(CPU_CORE_ID);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   778  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   780  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   781  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   782  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   783      Ifx_CPU_CORE_ID reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   784      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L462:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   785      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	and	d15,#7
.L463:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   785      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;      (inlined)
	j	.L99

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   786  }      (inlined)
.L99:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   422  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   423      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
	mul	d15,d15,#12
	mov.a	a15,d15
	movh.a	a3,#61443
	add.a	a3,a15
	lea	a15,[a3]24832
.L308:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   456      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   457  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   458  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   459  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   460  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   461  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   463      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   464          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   465          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   466                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   467                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   468                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   469      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   470  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   471      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   472      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   473                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   474                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   475                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   476  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   477      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   479      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   480  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   481  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   482  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   483  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   484  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   485      uint16 password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   486  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   487      /* Read Password from CON0 register
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   488       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   489       * to toggle them before returning password */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   490      password  = watchdog->CON0.B.PW;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   491      password ^= 0x003F;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   492  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   493      return password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   494  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   495  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   496  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   497  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   498  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   499      return (boolean)watchdog->CON0.B.ENDINIT;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   500  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   501  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   502  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   503  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   504  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   505      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   506  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   507  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   508  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   509  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   510  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   511      uint16        password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   512      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   513  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   514      /* Read Password from Safety WDT CON0 register
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   515       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   516       * to toggle them before returning password */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   517      password  = watchdog->CON0.B.PW;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   518      password ^= 0x003F;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   519  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   520      return password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   521  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   522  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   523  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   524  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   525  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   526      if (watchdog->CON0.B.LCK)
	ld.w	d15,[a15]
.L648:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   526      if (watchdog->CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L100
.L649:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   527      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   528          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   529          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   530                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   531                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d15,d4,#2
	or	d15,#1
.L650:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   532                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L651:
	sha	d0,d0,#16
.L652:
	or	d15,d0
.L653:
	st.w	[a15],d15

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   526      if (watchdog->CON0.B.LCK)      (inlined)
.L100:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   533      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   534  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   535      /* Set ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   536      watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   537                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   538                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d4,#2
.L461:
	or	d15,d4,#3
.L654:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   539                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L655:
	sha	d0,d0,#16
.L656:
	or	d15,d0
.L657:
	st.w	[a15],d15
.L658:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   542      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
	j	.L101
.L102:
.L101:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   540  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   541      /* read back ENDINIT and wait until it has been set */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   542      while (watchdog->CON0.B.ENDINIT == 0)
	ld.w	d15,[a15]
.L659:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   542      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
	jz.t	d15:0,.L102
.L309:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   424  }
	ret
.L304:
	
__IfxScuWdt_setCpuEndinit_function_end:
	.size	IfxScuWdt_setCpuEndinit,__IfxScuWdt_setCpuEndinit_function_end-IfxScuWdt_setCpuEndinit
.L186:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_setSafetyEndinit',code,cluster('IfxScuWdt_setSafetyEndinit')
	.sect	'.text.IfxScuWdt.IfxScuWdt_setSafetyEndinit'
	.align	2
	
	.global	IfxScuWdt_setSafetyEndinit

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   425  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   426  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   427  void IfxScuWdt_setSafetyEndinit(uint16 password)
; Function IfxScuWdt_setSafetyEndinit
.L150:
IfxScuWdt_setSafetyEndinit:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   456      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   457  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   458  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   459  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   460  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   461  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   463      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   464          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   465          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   466                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   467                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   468                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   469      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   470  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   471      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   472      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   473                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   474                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   475                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   476  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   477      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   479      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   480  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   481  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   482  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   483  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   484  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   485      uint16 password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   486  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   487      /* Read Password from CON0 register
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   488       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   489       * to toggle them before returning password */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   490      password  = watchdog->CON0.B.PW;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   491      password ^= 0x003F;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   492  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   493      return password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   494  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   495  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   496  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   497  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   498  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   499      return (boolean)watchdog->CON0.B.ENDINIT;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   500  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   501  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   502  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   503  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   504  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   505      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   506  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   507  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   508  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   509  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   510  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   511      uint16        password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   512      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   513  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   514      /* Read Password from Safety WDT CON0 register
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   515       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   516       * to toggle them before returning password */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   517      password  = watchdog->CON0.B.PW;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   518      password ^= 0x003F;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   519  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   520      return password;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   521  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   522  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   523  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   524  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   525  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   526      if (watchdog->CON0.B.LCK)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   527      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   528          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   529          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   530                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   531                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   532                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   533      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   534  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   535      /* Set ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   536      watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   537                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   538                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   539                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   540  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   541      /* read back ENDINIT and wait until it has been set */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   542      while (watchdog->CON0.B.ENDINIT == 0)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   543      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   544  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   545  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   546  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   547  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   548  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   549      if (SCU_WDTS_CON0.B.LCK)
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf00360f0)
.L664:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   549      if (SCU_WDTS_CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L103
.L665:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   550      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   551          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   552          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   553                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   554                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
	sha	d15,d4,#2
	or	d15,#1
.L666:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   555                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	movh.a	a15,#61443
	ld.w	d0,[a15]@los(0xf00360f0)
	extr.u	d0,d0,#16,#16
.L667:
	sha	d0,d0,#16
.L668:
	or	d15,d0
.L669:
	movh.a	a15,#61443
	st.w	[a15]@los(0xf00360f0),d15

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   549      if (SCU_WDTS_CON0.B.LCK)      (inlined)
.L103:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   556      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   557  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   558      /* Set ENDINT and set LCK bit in Config_0 register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   559      SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   560                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   561                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
	sha	d4,#2
.L464:
	or	d15,d4,#3
.L670:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   562                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	movh.a	a15,#61443
	ld.w	d0,[a15]@los(0xf00360f0)
	extr.u	d0,d0,#16,#16
.L671:
	sha	d0,d0,#16
.L672:
	or	d15,d0
.L673:
	movh.a	a15,#61443
	st.w	[a15]@los(0xf00360f0),d15
.L674:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   565      while (SCU_WDTS_CON0.B.ENDINIT == 0)      (inlined)
	j	.L104
.L105:
.L104:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   563  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   564      /* read back ENDINIT and wait until it has been cleared */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   565      while (SCU_WDTS_CON0.B.ENDINIT == 0)
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf00360f0)
.L675:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   565      while (SCU_WDTS_CON0.B.ENDINIT == 0)      (inlined)
	jz.t	d15:0,.L105
.L318:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   428  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   429      IfxScuWdt_setSafetyEndinitInline(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   430  }
	ret
.L315:
	
__IfxScuWdt_setSafetyEndinit_function_end:
	.size	IfxScuWdt_setSafetyEndinit,__IfxScuWdt_setSafetyEndinit_function_end-IfxScuWdt_setSafetyEndinit
.L191:
	; End of function
	
	.sdecl	'.text.IfxScuWdt.IfxScuWdt_enableWatchdogWithDebugger',code,cluster('IfxScuWdt_enableWatchdogWithDebugger')
	.sect	'.text.IfxScuWdt.IfxScuWdt_enableWatchdogWithDebugger'
	.align	2
	
	.global	IfxScuWdt_enableWatchdogWithDebugger

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   431  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   432  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   433  boolean IfxScuWdt_enableWatchdogWithDebugger(void)
; Function IfxScuWdt_enableWatchdogWithDebugger
.L152:
IfxScuWdt_enableWatchdogWithDebugger:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   434  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   435      boolean          status = 0, oenEnabled = 0, watchdogEnabled = 0;
	mov	d2,#0
.L465:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   436      uint32           ostateValue;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   437  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   438      volatile uint32 *oecPtr    = (volatile uint32 *)0xF0000478;
	lea	a15,0xf0000478
.L466:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   439      volatile uint32 *ostatePtr = (volatile uint32 *)0xF0000480;
	lea	a2,0xf0000480
.L467:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   440      volatile uint32 *ocntrlPtr = (volatile uint32 *)0xF000047C;
	lea	a4,0xf000047c
.L468:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   441  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   442      /* read OSTATE.OEN */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   443      ostateValue = *ostatePtr;
	ld.w	d15,[a2]
.L469:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   444      oenEnabled  = (ostateValue & 0x00000001);
	and	d15,#1
.L471:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   445  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   446      if (!oenEnabled)
	jne	d15,#0,.L106
.L876:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   447      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   448          /* enable the debug interface (OSTATE.OEN )if it is not already enabled */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   449          /* pattern for enabling OSTATE.OEN */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   450          *oecPtr = 0xA1;
	mov	d15,#161
.L470:
	st.w	[a15],d15
.L877:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   451          *oecPtr = 0x5E;
	mov	d15,#94
.L878:
	st.w	[a15],d15
.L879:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   452          *oecPtr = 0xA1;
	mov	d15,#161
.L880:
	st.w	[a15],d15
.L881:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   453          *oecPtr = 0x5E;
	mov	d15,#94
.L882:
	st.w	[a15],d15
.L883:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   454  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   455          /* read OSTATE.OEN again*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   456          ostateValue = *ostatePtr;
	ld.w	d15,[a2]
.L472:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   457          oenEnabled  = (ostateValue & 0x00000001);
	and	d15,#1
.L106:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   458      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   459  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   460      if (oenEnabled)
	jeq	d15,#0,.L107
.L884:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   461      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   462          /* set watchdog suspend bit in OSTATE reg, by writing OCNTRL.WDTSUS and OCNTRL.WDTSUS_P together */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   463          *ocntrlPtr = 0x00003000;
	mov	d15,#12288
.L473:
	st.w	[a4],d15
.L885:
	j	.L108
.L107:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   464      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   465      else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   466      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   467          status = 1;
	mov	d2,#1
.L108:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   468      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   469  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   470      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, oenEnabled == 1);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   471  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   472      /* read OSTATE.WDTSUS */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   473      ostateValue     = *ostatePtr;
	ld.w	d15,[a2]
.L474:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   474      watchdogEnabled = (ostateValue & 0x00000080);
	and	d15,#128
.L475:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   475  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   476      if (!watchdogEnabled)
	jne	d15,#0,.L109
.L886:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   477      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   478          status = 1;
	mov	d2,#1
.L109:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   479      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   480  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   481      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, watchdogEnabled == 1);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   482  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   483      return status;
	j	.L110

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.c	   484  }
.L110:
	ret
.L411:
	
__IfxScuWdt_enableWatchdogWithDebugger_function_end:
	.size	IfxScuWdt_enableWatchdogWithDebugger,__IfxScuWdt_enableWatchdogWithDebugger_function_end-IfxScuWdt_enableWatchdogWithDebugger
.L261:
	; End of function
	
	.calls	'IfxScuWdt_initCpuWatchdog','IfxScuWdt_setCpuEndinit'
	.calls	'IfxScuWdt_initSafetyWatchdog','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxScuWdt_serviceCpuWatchdog','IfxScuWdt_setCpuEndinit'
	.calls	'IfxScuWdt_serviceSafetyWatchdog','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxScuWdt_changeCpuWatchdogPassword','',0
	.calls	'IfxScuWdt_changeCpuWatchdogReload','',0
	.calls	'IfxScuWdt_changeSafetyWatchdogPassword','',0
	.calls	'IfxScuWdt_changeSafetyWatchdogReload','',0
	.calls	'IfxScuWdt_clearCpuEndinit','',0
	.calls	'IfxScuWdt_clearSafetyEndinit','',0
	.calls	'IfxScuWdt_disableCpuWatchdog','',0
	.calls	'IfxScuWdt_disableSafetyWatchdog','',0
	.calls	'IfxScuWdt_enableCpuWatchdog','',0
	.calls	'IfxScuWdt_enableSafetyWatchdog','',0
	.calls	'IfxScuWdt_getCpuWatchdogPassword','',0
	.calls	'IfxScuWdt_getCpuWatchdogEndInit','',0
	.calls	'IfxScuWdt_getSafetyWatchdogPassword','',0
	.calls	'IfxScuWdt_initConfig','',0
	.calls	'IfxScuWdt_initCpuWatchdog','',0
	.calls	'IfxScuWdt_initSafetyWatchdog','',0
	.calls	'IfxScuWdt_serviceCpuWatchdog','',0
	.calls	'IfxScuWdt_serviceSafetyWatchdog','',0
	.calls	'IfxScuWdt_setCpuEndinit','',0
	.calls	'IfxScuWdt_setSafetyEndinit','',0
	.calls	'IfxScuWdt_enableWatchdogWithDebugger','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L154:
	.word	78003
	.half	3
	.word	.L155
	.byte	4
.L153:
	.byte	1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L156
	.byte	2,1,1,3
	.word	148
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,61,17,1,1,5
	.byte	'fun',0,1,61,43
	.word	151
	.byte	6,0,7
	.byte	'__fract',0,4,128,1,7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,152,2,18
	.word	196
	.byte	1,1,5
	.byte	'a',0,1,152,2,44
	.word	208
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,172,2,17,1,1,6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0,3
	.word	320
	.byte	8
	.byte	'__ld64',0,3,2,135,1,19
	.word	294
	.byte	1,1,5
	.byte	'addr',0,2,135,1,32
	.word	326
	.byte	6,0,4
	.byte	'__st64',0,3,2,143,1,17,1,1,5
	.byte	'addr',0,2,143,1,30
	.word	326
	.byte	5
	.byte	'value',0,2,143,1,43
	.word	294
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,4,241,8,16,4,11
	.byte	'ENDINIT',0,4
	.word	435
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	435
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	435
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	435
	.byte	16,0,2,35,0,0
.L270:
	.byte	12,4,247,14,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	451
	.byte	4,2,35,0,0
.L394:
	.byte	7
	.byte	'unsigned char',0,1,8
.L283:
	.byte	7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,4,250,8,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	2,6,2,35,0,11
	.byte	'IR0',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	587
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	16,0,2,35,2,0
.L272:
	.byte	12,4,255,14,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	626
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,4,137,9,16,4,11
	.byte	'AE',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	587
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	604
	.byte	16,0,2,35,2,0,12,4,135,15,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	870
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,4,175,15,25,12,13
	.byte	'CON0',0
	.word	547
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	830
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1061
	.byte	4,2,35,8,0,14
	.word	1101
.L266:
	.byte	3
	.word	1164
.L289:
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,3,181,3,17,1,1
.L292:
	.byte	5
	.byte	'watchdog',0,3,181,3,65
	.word	1169
.L294:
	.byte	5
	.byte	'password',0,3,181,3,82
	.word	604
.L296:
	.byte	6,0
.L299:
	.byte	4
	.byte	'IfxScuWdt_clearSafetyEndinitInline',0,3,3,204,3,17,1,1
.L301:
	.byte	5
	.byte	'password',0,3,204,3,59
	.word	604
.L303:
	.byte	6,0
.L307:
	.byte	4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,3,140,4,17,1,1
.L310:
	.byte	5
	.byte	'watchdog',0,3,140,4,63
	.word	1169
.L312:
	.byte	5
	.byte	'password',0,3,140,4,80
	.word	604
.L314:
	.byte	6,0
.L317:
	.byte	4
	.byte	'IfxScuWdt_setSafetyEndinitInline',0,3,3,163,4,17,1,1
.L319:
	.byte	5
	.byte	'password',0,3,163,4,57
	.word	604
.L321:
	.byte	6,0
.L388:
	.byte	8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,3,227,3,19
	.word	604
	.byte	1,1
.L390:
	.byte	5
	.byte	'watchdog',0,3,227,3,74
	.word	1169
.L392:
	.byte	6,0
.L397:
	.byte	8
	.byte	'IfxScuWdt_getCpuWatchdogEndInitInline',0,3,3,241,3,20
	.word	587
	.byte	1,1
.L399:
	.byte	5
	.byte	'watchdog',0,3,241,3,74
	.word	1169
.L401:
	.byte	6,0
.L403:
	.byte	8
	.byte	'IfxScuWdt_getSafetyWatchdogPasswordInline',0,3,3,253,3,19
	.word	604
	.byte	1,1
.L404:
	.byte	6,0,10
	.byte	'_Ifx_P_OUT_Bits',0,6,143,3,16,4,11
	.byte	'P0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	587
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	587
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	587
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	16,0,2,35,2,0,12,6,181,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1649
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,6,169,2,16,4,11
	.byte	'PS0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	587
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	587
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	587
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	587
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	587
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	587
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	587
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	587
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	587
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	587
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	587
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	587
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	587
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	587
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	587
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	587
	.byte	1,0,2,35,3,0,12,6,133,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1965
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,6,110,16,4,11
	.byte	'MODREV',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	604
	.byte	16,0,2,35,2,0,12,6,148,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2536
	.byte	4,2,35,0,0,15,4
	.word	587
	.byte	16,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,6,140,1,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	587
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	587
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	587
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	587
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	587
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	587
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	587
	.byte	5,0,2,35,3,0,12,6,164,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2664
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,6,166,1,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	587
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	587
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	587
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	587
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	587
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	587
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	587
	.byte	5,0,2,35,3,0,12,6,180,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2879
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,6,179,1,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	587
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	587
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	587
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	587
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	587
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	587
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	587
	.byte	5,0,2,35,3,0,12,6,188,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3094
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,6,153,1,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	587
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	587
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	587
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	587
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	587
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	587
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	587
	.byte	5,0,2,35,3,0,12,6,172,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3311
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,6,118,16,4,11
	.byte	'P0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	587
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	587
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	587
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	16,0,2,35,2,0,12,6,156,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3531
	.byte	4,2,35,0,0,15,24
	.word	587
	.byte	16,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,6,205,3,16,4,11
	.byte	'PD0',0,1
	.word	587
	.byte	3,5,2,35,0,11
	.byte	'PL0',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'PD1',0,1
	.word	587
	.byte	3,1,2,35,0,11
	.byte	'PL1',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'PD2',0,1
	.word	587
	.byte	3,5,2,35,1,11
	.byte	'PL2',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'PD3',0,1
	.word	587
	.byte	3,1,2,35,1,11
	.byte	'PL3',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'PD4',0,1
	.word	587
	.byte	3,5,2,35,2,11
	.byte	'PL4',0,1
	.word	587
	.byte	1,4,2,35,2,11
	.byte	'PD5',0,1
	.word	587
	.byte	3,1,2,35,2,11
	.byte	'PL5',0,1
	.word	587
	.byte	1,0,2,35,2,11
	.byte	'PD6',0,1
	.word	587
	.byte	3,5,2,35,3,11
	.byte	'PL6',0,1
	.word	587
	.byte	1,4,2,35,3,11
	.byte	'PD7',0,1
	.word	587
	.byte	3,1,2,35,3,11
	.byte	'PL7',0,1
	.word	587
	.byte	1,0,2,35,3,0,12,6,205,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3854
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,6,226,3,16,4,11
	.byte	'PD8',0,1
	.word	587
	.byte	3,5,2,35,0,11
	.byte	'PL8',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'PD9',0,1
	.word	587
	.byte	3,1,2,35,0,11
	.byte	'PL9',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'PD10',0,1
	.word	587
	.byte	3,5,2,35,1,11
	.byte	'PL10',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'PD11',0,1
	.word	587
	.byte	3,1,2,35,1,11
	.byte	'PL11',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'PD12',0,1
	.word	587
	.byte	3,5,2,35,2,11
	.byte	'PL12',0,1
	.word	587
	.byte	1,4,2,35,2,11
	.byte	'PD13',0,1
	.word	587
	.byte	3,1,2,35,2,11
	.byte	'PL13',0,1
	.word	587
	.byte	1,0,2,35,2,11
	.byte	'PD14',0,1
	.word	587
	.byte	3,5,2,35,3,11
	.byte	'PL14',0,1
	.word	587
	.byte	1,4,2,35,3,11
	.byte	'PD15',0,1
	.word	587
	.byte	3,1,2,35,3,11
	.byte	'PL15',0,1
	.word	587
	.byte	1,0,2,35,3,0,12,6,213,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4158
	.byte	4,2,35,0,0,15,8
	.word	587
	.byte	16,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,6,88,16,4,11
	.byte	'EN0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	587
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	587
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	587
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	16,0,2,35,2,0,12,6,140,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4483
	.byte	4,2,35,0,0,15,12
	.word	587
	.byte	16,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,6,183,3,16,4,11
	.byte	'PDIS0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	587
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	587
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	587
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	16,0,2,35,2,0,12,6,197,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4823
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,6,165,3,16,4,11
	.byte	'SEL0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	587
	.byte	2,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	412
	.byte	19,1,2,35,0,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,12,6,189,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5189
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,6,206,2,16,4,11
	.byte	'PS0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	412
	.byte	28,0,2,35,0,0,12,6,149,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5475
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,6,227,2,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	412
	.byte	24,0,2,35,0,0,12,6,165,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5622
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,6,238,2,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	412
	.byte	20,0,2,35,0,0,12,6,173,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5791
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,6,216,2,16,4,11
	.byte	'reserved_0',0,2
	.word	604
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	587
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	587
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	587
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	16,0,2,35,2,0,12,6,157,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5963
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,6,232,1,16,4,11
	.byte	'reserved_0',0,2
	.word	604
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	587
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	587
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	604
	.byte	12,0,2,35,2,0,12,6,229,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6138
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,6,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	412
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	587
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	587
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	587
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	587
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	587
	.byte	8,0,2,35,3,0,12,6,245,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6312
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,6,136,2,16,4,11
	.byte	'reserved_0',0,4
	.word	412
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	587
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	587
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	587
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	587
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	587
	.byte	4,0,2,35,3,0,12,6,253,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6486
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,6,243,1,16,4,11
	.byte	'reserved_0',0,4
	.word	412
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	587
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	587
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	587
	.byte	1,0,2,35,3,0,12,6,237,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6662
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,6,249,2,16,4,11
	.byte	'PS0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	587
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	587
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	587
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	16,0,2,35,2,0,12,6,141,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6818
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,6,147,2,16,4,11
	.byte	'reserved_0',0,2
	.word	604
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	587
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	587
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	587
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	587
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	587
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	587
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	587
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	587
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	587
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	587
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	587
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	587
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	587
	.byte	1,0,2,35,3,0,12,6,221,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7151
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR0_Bits',0,6,192,1,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	412
	.byte	30,0,2,35,0,0,12,6,196,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7499
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR1_Bits',0,6,200,1,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	412
	.byte	30,0,2,35,0,0,10
	.byte	'_Ifx_P_LPCR1_P21_Bits',0,6,208,1,16,4,11
	.byte	'RDIS_CTRL',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'RX_DIS',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	587
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	412
	.byte	24,0,2,35,0,0,12,6,204,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7623
	.byte	4,2,35,0,13
	.byte	'B_P21',0
	.word	7707
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR2_Bits',0,6,218,1,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'LVDSR',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'LVDSRL',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	587
	.byte	2,4,2,35,1,11
	.byte	'TDIS_CTRL',0,1
	.word	587
	.byte	1,3,2,35,1,11
	.byte	'TX_DIS',0,1
	.word	587
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	587
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	16,0,2,35,2,0,12,6,213,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7887
	.byte	4,2,35,0,0,15,76
	.word	587
	.byte	16,75,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,6,82,16,4,11
	.byte	'reserved_0',0,4
	.word	412
	.byte	32,0,2,35,0,0,12,6,132,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8140
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,6,45,16,4,11
	.byte	'EN0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	587
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	587
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	587
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	587
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	587
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	587
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	587
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	587
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	587
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	587
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	587
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	587
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	587
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	587
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	587
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	587
	.byte	1,0,2,35,3,0,12,6,252,3,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8227
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,6,229,5,25,128,2,13
	.byte	'OUT',0
	.word	1925
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	2496
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	2615
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2655
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	2839
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	3054
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	3271
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	3491
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	2655
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	3805
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	3845
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	4118
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	4434
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	4474
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	4774
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	4814
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	5149
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	5435
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	4474
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	5582
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	5751
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	5923
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	6098
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	6272
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	6446
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	6622
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	6778
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	7111
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	7459
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	4474
	.byte	8,3,35,152,1,13
	.byte	'LPCR0',0
	.word	7583
	.byte	4,3,35,160,1,13
	.byte	'LPCR1',0
	.word	7832
	.byte	4,3,35,164,1,13
	.byte	'LPCR2',0
	.word	8091
	.byte	4,3,35,168,1,13
	.byte	'reserved_A4',0
	.word	8131
	.byte	76,3,35,172,1,13
	.byte	'ACCEN1',0
	.word	8187
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	8754
	.byte	4,3,35,252,1,0,14
	.word	8794
	.byte	3
	.word	9397
	.byte	17,5,172,1,9,4,18
	.byte	'IfxPort_State_notChanged',0,0,18
	.byte	'IfxPort_State_high',0,1,18
	.byte	'IfxPort_State_low',0,128,128,4,18
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,5,208,4,17,1,1,5
	.byte	'port',0,5,208,4,44
	.word	9402
	.byte	5
	.byte	'pinIndex',0,5,208,4,56
	.word	587
	.byte	5
	.byte	'action',0,5,208,4,80
	.word	9407
	.byte	6,0,17,8,156,1,9,1,18
	.byte	'IfxCpu_ResourceCpu_0',0,0,18
	.byte	'IfxCpu_ResourceCpu_1',0,1,18
	.byte	'IfxCpu_ResourceCpu_none',0,2,0
.L285:
	.byte	8
	.byte	'IfxCpu_getCoreIndex',0,3,7,141,6,31
	.word	9588
	.byte	1,1
.L286:
	.byte	6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,7,139,5,20
	.word	587
	.byte	1,1,6,0
.L331:
	.byte	7
	.byte	'unsigned long int',0,4,7,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,7,161,6,19
	.word	9743
	.byte	1,1,5
	.byte	'address',0,7,161,6,55
	.word	604
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,7,190,6,20
	.word	587
	.byte	1,1,5
	.byte	'address',0,7,190,6,70
	.word	604
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,7,172,8,17,1,1,5
	.byte	'address',0,7,172,8,56
	.word	9743
	.byte	5
	.byte	'count',0,7,172,8,72
	.word	9743
	.byte	19,6,0,0,20
	.word	428
	.byte	21
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,22
	.word	9974
	.byte	0,14
	.word	412
	.byte	3
	.word	412
	.byte	23
	.byte	'__cmpswapw',0
	.word	10016
	.byte	1,1,1,1,24
	.byte	'p',0
	.word	10021
	.byte	24
	.byte	'value',0
	.word	412
	.byte	24
	.byte	'compare',0
	.word	412
	.byte	0,14
	.word	428
	.byte	23
	.byte	'__mfcr',0
	.word	10078
	.byte	1,1,1,1,22
	.word	428
	.byte	0,25
	.word	156
	.byte	26
	.word	182
	.byte	6,0,25
	.word	217
	.byte	26
	.word	249
	.byte	6,0,25
	.word	262
	.byte	6,0,25
	.word	331
	.byte	26
	.word	350
	.byte	6,0,25
	.word	366
	.byte	26
	.word	381
	.byte	26
	.word	395
	.byte	6,0,17,9,254,10,9,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,18
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,27,3,89,9,12,13
	.byte	'password',0
	.word	604
	.byte	2,2,35,0,13
	.byte	'reload',0
	.word	604
	.byte	2,2,35,2,13
	.byte	'inputFrequency',0
	.word	10165
	.byte	1,2,35,4,13
	.byte	'disableWatchdog',0
	.word	587
	.byte	1,2,35,5,13
	.byte	'enableSmuRestriction',0
	.word	587
	.byte	1,2,35,6,13
	.byte	'enableAutomaticPasswordChange',0
	.word	587
	.byte	1,2,35,7,13
	.byte	'enableTimerCheck',0
	.word	587
	.byte	1,2,35,8,13
	.byte	'enableTimerCheckTolerance',0
	.word	587
	.byte	1,2,35,9,13
	.byte	'clrInternalResetFlag',0
	.word	587
	.byte	1,2,35,10,0
.L263:
	.byte	3
	.word	10260
	.byte	20
	.word	10260
.L268:
	.byte	3
	.word	10514
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,4,153,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	435
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	435
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	435
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	435
	.byte	16,0,2,35,0,0
.L278:
	.byte	12,4,143,15,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10524
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,4,162,9,16,4,11
	.byte	'CLRIRF',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	587
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	16,0,2,35,2,0
.L280:
	.byte	12,4,151,15,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10658
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,4,178,9,16,4,11
	.byte	'AE',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	587
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	604
	.byte	16,0,2,35,2,0,12,4,159,15,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10918
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTS',0,4,183,15,25,12,13
	.byte	'CON0',0
	.word	10618
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	10878
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	11107
	.byte	4,2,35,8,0,14
	.word	11147
.L275:
	.byte	3
	.word	11208
	.byte	25
	.word	1174
	.byte	26
	.word	1214
	.byte	26
	.word	1232
	.byte	6,0,25
	.word	1252
	.byte	26
	.word	1295
	.byte	6,0,25
	.word	1315
	.byte	26
	.word	1353
	.byte	26
	.word	1371
	.byte	6,0,25
	.word	1391
	.byte	26
	.word	1432
	.byte	6,0,10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,10,92,16,4,11
	.byte	'CORE_ID',0,4
	.word	435
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	435
	.byte	29,0,2,35,0,0
.L287:
	.byte	12,10,223,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11276
	.byte	4,2,35,0,0,25
	.word	1452
	.byte	26
	.word	1503
	.byte	6,0,25
	.word	1523
	.byte	26
	.word	1573
	.byte	6,0,25
	.word	1593
	.byte	6,0,14
	.word	9743
.L416:
	.byte	3
	.word	11416
	.byte	25
	.word	9510
	.byte	26
	.word	9538
	.byte	26
	.word	9552
	.byte	26
	.word	9570
	.byte	6,0,25
	.word	9667
	.byte	6,0,25
	.word	9701
	.byte	6,0,25
	.word	9764
	.byte	26
	.word	9805
	.byte	6,0,25
	.word	9824
	.byte	26
	.word	9879
	.byte	6,0,25
	.word	9898
	.byte	26
	.word	9938
	.byte	26
	.word	9955
	.byte	19,6,0,0,7
	.byte	'short int',0,2,5,28
	.byte	'__wchar_t',0,11,1,1
	.word	11505
	.byte	28
	.byte	'__size_t',0,11,1,1
	.word	412
	.byte	28
	.byte	'__ptrdiff_t',0,11,1,1
	.word	428
	.byte	29,1,3
	.word	11573
	.byte	28
	.byte	'__codeptr',0,11,1,1
	.word	11575
	.byte	17,9,240,10,9,1,18
	.byte	'IfxScu_CCUCON0_CLKSEL_fBack',0,0,18
	.byte	'IfxScu_CCUCON0_CLKSEL_fPll',0,1,0,28
	.byte	'IfxScu_CCUCON0_CLKSEL',0,9,244,10,3
	.word	11598
	.byte	28
	.byte	'IfxScu_WDTCON1_IR',0,9,131,11,3
	.word	10165
	.byte	28
	.byte	'boolean',0,12,101,29
	.word	587
	.byte	28
	.byte	'uint8',0,12,105,29
	.word	587
	.byte	28
	.byte	'uint16',0,12,109,29
	.word	604
	.byte	28
	.byte	'uint32',0,12,113,29
	.word	9743
	.byte	28
	.byte	'uint64',0,12,118,29
	.word	294
	.byte	28
	.byte	'sint16',0,12,126,29
	.word	11505
	.byte	7
	.byte	'long int',0,4,5,28
	.byte	'sint32',0,12,131,1,29
	.word	11812
	.byte	7
	.byte	'long long int',0,8,5,28
	.byte	'sint64',0,12,138,1,29
	.word	11840
	.byte	28
	.byte	'float32',0,12,167,1,29
	.word	208
	.byte	28
	.byte	'pvoid',0,13,57,28
	.word	326
	.byte	28
	.byte	'Ifx_TickTime',0,13,79,28
	.word	11840
	.byte	17,13,130,1,9,1,18
	.byte	'Ifx_RxSel_a',0,0,18
	.byte	'Ifx_RxSel_b',0,1,18
	.byte	'Ifx_RxSel_c',0,2,18
	.byte	'Ifx_RxSel_d',0,3,18
	.byte	'Ifx_RxSel_e',0,4,18
	.byte	'Ifx_RxSel_f',0,5,18
	.byte	'Ifx_RxSel_g',0,6,18
	.byte	'Ifx_RxSel_h',0,7,0,28
	.byte	'Ifx_RxSel',0,13,140,1,3
	.word	11925
	.byte	10
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,4,45,16,4,11
	.byte	'EN0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	587
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	587
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	587
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	587
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	587
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	587
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	587
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	587
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	587
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	587
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	587
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	587
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	587
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	587
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	587
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_ACCEN0_Bits',0,4,79,3
	.word	12063
	.byte	10
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,4,82,16,4,11
	.byte	'reserved_0',0,4
	.word	412
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SCU_ACCEN1_Bits',0,4,85,3
	.word	12620
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,4,88,16,4,11
	.byte	'STM0DIS',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	412
	.byte	29,0,2,35,0,0,28
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,4,94,3
	.word	12697
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,4,97,16,4,11
	.byte	'BAUD1DIV',0,1
	.word	587
	.byte	4,4,2,35,0,11
	.byte	'BAUD2DIV',0,1
	.word	587
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	587
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	587
	.byte	4,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	587
	.byte	4,4,2,35,2,11
	.byte	'FSI2DIV',0,1
	.word	587
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	587
	.byte	2,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	587
	.byte	2,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	587
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	587
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON0_Bits',0,4,111,3
	.word	12833
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,4,114,16,4,11
	.byte	'CANDIV',0,1
	.word	587
	.byte	4,4,2,35,0,11
	.byte	'ERAYDIV',0,1
	.word	587
	.byte	4,0,2,35,0,11
	.byte	'STMDIV',0,1
	.word	587
	.byte	4,4,2,35,1,11
	.byte	'GTMDIV',0,1
	.word	587
	.byte	4,0,2,35,1,11
	.byte	'ETHDIV',0,1
	.word	587
	.byte	4,4,2,35,2,11
	.byte	'ASCLINFDIV',0,1
	.word	587
	.byte	4,0,2,35,2,11
	.byte	'ASCLINSDIV',0,1
	.word	587
	.byte	4,4,2,35,3,11
	.byte	'INSEL',0,1
	.word	587
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON1_Bits',0,4,126,3
	.word	13113
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,4,129,1,16,4,11
	.byte	'BBBDIV',0,1
	.word	587
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	412
	.byte	26,2,2,35,0,11
	.byte	'UP',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON2_Bits',0,4,135,1,3
	.word	13351
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,4,138,1,16,4,11
	.byte	'PLLDIV',0,1
	.word	587
	.byte	6,2,2,35,0,11
	.byte	'PLLSEL',0,1
	.word	587
	.byte	2,0,2,35,0,11
	.byte	'PLLERAYDIV',0,1
	.word	587
	.byte	6,2,2,35,1,11
	.byte	'PLLERAYSEL',0,1
	.word	587
	.byte	2,0,2,35,1,11
	.byte	'SRIDIV',0,1
	.word	587
	.byte	6,2,2,35,2,11
	.byte	'SRISEL',0,1
	.word	587
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	587
	.byte	5,3,2,35,3,11
	.byte	'SLCK',0,1
	.word	587
	.byte	1,2,2,35,3,11
	.byte	'UP',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON3_Bits',0,4,150,1,3
	.word	13479
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,4,153,1,16,4,11
	.byte	'SPBDIV',0,1
	.word	587
	.byte	6,2,2,35,0,11
	.byte	'SPBSEL',0,1
	.word	587
	.byte	2,0,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	587
	.byte	6,2,2,35,1,11
	.byte	'GTMSEL',0,1
	.word	587
	.byte	2,0,2,35,1,11
	.byte	'STMDIV',0,1
	.word	587
	.byte	6,2,2,35,2,11
	.byte	'STMSEL',0,1
	.word	587
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	587
	.byte	5,3,2,35,3,11
	.byte	'SLCK',0,1
	.word	587
	.byte	1,2,2,35,3,11
	.byte	'UP',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON4_Bits',0,4,165,1,3
	.word	13722
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,4,168,1,16,4,11
	.byte	'MAXDIV',0,1
	.word	587
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	412
	.byte	26,2,2,35,0,11
	.byte	'UP',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON5_Bits',0,4,174,1,3
	.word	13957
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,4,177,1,16,4,11
	.byte	'CPU0DIV',0,1
	.word	587
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	412
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON6_Bits',0,4,181,1,3
	.word	14085
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,4,184,1,16,4,11
	.byte	'CPU1DIV',0,1
	.word	587
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	412
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON7_Bits',0,4,188,1,3
	.word	14185
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,4,191,1,16,4,11
	.byte	'CHREV',0,1
	.word	587
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	587
	.byte	2,0,2,35,0,11
	.byte	'CHID',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'EEA',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	587
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	587
	.byte	4,4,2,35,3,11
	.byte	'SP',0,1
	.word	587
	.byte	2,2,2,35,3,11
	.byte	'SEC',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CHIPID_Bits',0,4,202,1,3
	.word	14285
	.byte	10
	.byte	'_Ifx_SCU_DTSCON_Bits',0,4,205,1,16,4,11
	.byte	'PWD',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'START',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	587
	.byte	2,4,2,35,0,11
	.byte	'CAL',0,4
	.word	412
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	587
	.byte	7,1,2,35,3,11
	.byte	'SLCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_DTSCON_Bits',0,4,213,1,3
	.word	14493
	.byte	10
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,4,216,1,16,4,11
	.byte	'LOWER',0,2
	.word	604
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	587
	.byte	5,1,2,35,1,11
	.byte	'LLU',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	604
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	587
	.byte	4,2,2,35,3,11
	.byte	'SLCK',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_DTSLIM_Bits',0,4,225,1,3
	.word	14658
	.byte	10
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,4,228,1,16,4,11
	.byte	'RESULT',0,2
	.word	604
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	587
	.byte	4,2,2,35,1,11
	.byte	'RDY',0,1
	.word	587
	.byte	1,1,2,35,1,11
	.byte	'BUSY',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,4,235,1,3
	.word	14841
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,4,238,1,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	587
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	587
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	412
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	587
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	587
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	587
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	587
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	587
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	587
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	587
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EICR_Bits',0,4,129,2,3
	.word	14995
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,4,132,2,16,4,11
	.byte	'INTF0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	412
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_SCU_EIFR_Bits',0,4,143,2,3
	.word	15359
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,4,146,2,16,4,11
	.byte	'POL',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	604
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	587
	.byte	6,0,2,35,2,11
	.byte	'EMSFM',0,1
	.word	587
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	587
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	587
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_EMSR_Bits',0,4,159,2,3
	.word	15570
	.byte	10
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,4,162,2,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	604
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	412
	.byte	23,0,2,35,0,0,28
	.byte	'Ifx_SCU_ESRCFG_Bits',0,4,167,2,3
	.word	15822
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,4,170,2,16,4,11
	.byte	'ARI',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	412
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_SCU_ESROCFG_Bits',0,4,175,2,3
	.word	15940
	.byte	10
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,4,178,2,16,4,11
	.byte	'reserved_0',0,4
	.word	412
	.byte	28,4,2,35,0,11
	.byte	'EVR13OFF',0,1
	.word	587
	.byte	1,3,2,35,3,11
	.byte	'BPEVR13OFF',0,1
	.word	587
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVR13CON_Bits',0,4,185,2,3
	.word	16051
	.byte	10
	.byte	'_Ifx_SCU_EVR33CON_Bits',0,4,188,2,16,4,11
	.byte	'reserved_0',0,4
	.word	412
	.byte	28,4,2,35,0,11
	.byte	'EVR33OFF',0,1
	.word	587
	.byte	1,3,2,35,3,11
	.byte	'BPEVR33OFF',0,1
	.word	587
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVR33CON_Bits',0,4,195,2,3
	.word	16214
	.byte	10
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,4,198,2,16,4,11
	.byte	'ADC13V',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'ADC33V',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'ADCSWDV',0,1
	.word	587
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	587
	.byte	7,1,2,35,3,11
	.byte	'VAL',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,4,205,2,3
	.word	16377
	.byte	10
	.byte	'_Ifx_SCU_EVRDVSTAT_Bits',0,4,208,2,16,4,11
	.byte	'DVS13TRIM',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'DVS33TRIM',0,1
	.word	587
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	587
	.byte	7,1,2,35,3,11
	.byte	'VAL',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRDVSTAT_Bits',0,4,215,2,3
	.word	16535
	.byte	10
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,4,218,2,16,4,11
	.byte	'EVR13OVMOD',0,1
	.word	587
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	587
	.byte	2,4,2,35,0,11
	.byte	'EVR13UVMOD',0,1
	.word	587
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	587
	.byte	2,0,2,35,0,11
	.byte	'EVR33OVMOD',0,1
	.word	587
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	587
	.byte	2,4,2,35,1,11
	.byte	'EVR33UVMOD',0,1
	.word	587
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	587
	.byte	2,0,2,35,1,11
	.byte	'SWDOVMOD',0,1
	.word	587
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	587
	.byte	2,4,2,35,2,11
	.byte	'SWDUVMOD',0,1
	.word	587
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	604
	.byte	10,0,2,35,2,0,28
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,4,232,2,3
	.word	16700
	.byte	10
	.byte	'_Ifx_SCU_EVROSCCTRL_Bits',0,4,235,2,16,4,11
	.byte	'OSCTRIM',0,2
	.word	604
	.byte	10,6,2,35,0,11
	.byte	'OSCPTAT',0,1
	.word	587
	.byte	6,0,2,35,1,11
	.byte	'OSCANASEL',0,1
	.word	587
	.byte	4,4,2,35,2,11
	.byte	'HPBGTRIM',0,2
	.word	604
	.byte	7,5,2,35,2,11
	.byte	'HPBGCLKEN',0,1
	.word	587
	.byte	1,4,2,35,3,11
	.byte	'OSC3V3',0,1
	.word	587
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	587
	.byte	2,1,2,35,3,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVROSCCTRL_Bits',0,4,245,2,3
	.word	17029
	.byte	10
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,4,248,2,16,4,11
	.byte	'EVR13OVVAL',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'EVR33OVVAL',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'SWDOVVAL',0,1
	.word	587
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	587
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVROVMON_Bits',0,4,255,2,3
	.word	17250
	.byte	10
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,4,130,3,16,4,11
	.byte	'RST13TRIM',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	412
	.byte	16,8,2,35,0,11
	.byte	'RST13OFF',0,1
	.word	587
	.byte	1,7,2,35,3,11
	.byte	'BPRST13OFF',0,1
	.word	587
	.byte	1,6,2,35,3,11
	.byte	'RST33OFF',0,1
	.word	587
	.byte	1,5,2,35,3,11
	.byte	'BPRST33OFF',0,1
	.word	587
	.byte	1,4,2,35,3,11
	.byte	'RSTSWDOFF',0,1
	.word	587
	.byte	1,3,2,35,3,11
	.byte	'BPRSTSWDOFF',0,1
	.word	587
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,4,142,3,3
	.word	17413
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF1_Bits',0,4,145,3,16,4,11
	.byte	'SD5P',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'SD5I',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'SD5D',0,1
	.word	587
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	587
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF1_Bits',0,4,152,3,3
	.word	17685
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,4,155,3,16,4,11
	.byte	'SD33P',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'SD33I',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'SD33D',0,1
	.word	587
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	587
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,4,162,3,3
	.word	17838
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF3_Bits',0,4,165,3,16,4,11
	.byte	'CT5REG0',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'CT5REG1',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'CT5REG2',0,1
	.word	587
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	587
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF3_Bits',0,4,172,3,3
	.word	17994
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF4_Bits',0,4,175,3,16,4,11
	.byte	'CT5REG3',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'CT5REG4',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF4_Bits',0,4,181,3,3
	.word	18156
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF5_Bits',0,4,184,3,16,4,11
	.byte	'CT33REG0',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'CT33REG1',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'CT33REG2',0,1
	.word	587
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	587
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF5_Bits',0,4,191,3,3
	.word	18299
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF6_Bits',0,4,194,3,16,4,11
	.byte	'CT33REG3',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'CT33REG4',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF6_Bits',0,4,200,3,3
	.word	18464
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,4,203,3,16,4,11
	.byte	'SDFREQSPRD',0,2
	.word	604
	.byte	16,0,2,35,0,11
	.byte	'SDFREQ',0,1
	.word	587
	.byte	8,0,2,35,2,11
	.byte	'SDSTEP',0,1
	.word	587
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	587
	.byte	2,2,2,35,3,11
	.byte	'SDSAMPLE',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,4,211,3,3
	.word	18609
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,4,214,3,16,4,11
	.byte	'DRVP',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'SDMINMAXDC',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'DRVN',0,1
	.word	587
	.byte	8,0,2,35,2,11
	.byte	'SDLUT',0,1
	.word	587
	.byte	6,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,4,222,3,3
	.word	18790
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,4,225,3,16,4,11
	.byte	'SDPWMPRE',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'SDPID',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'SDVOKLVL',0,1
	.word	587
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	587
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,4,232,3,3
	.word	18964
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL4_Bits',0,4,235,3,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'SYNCDIV',0,1
	.word	587
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	412
	.byte	20,1,2,35,0,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRSDCTRL4_Bits',0,4,241,3,3
	.word	19124
	.byte	10
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,4,244,3,16,4,11
	.byte	'EVR13',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'OV13',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'EVR33',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'OV33',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'OVSWD',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'UV13',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'UV33',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'UVSWD',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'EXTPASS13',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'EXTPASS33',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'BGPROK',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	412
	.byte	21,0,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,4,130,4,3
	.word	19268
	.byte	10
	.byte	'_Ifx_SCU_EVRTRIM_Bits',0,4,133,4,16,4,11
	.byte	'EVR13TRIM',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'SDVOUTSEL',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRTRIM_Bits',0,4,139,4,3
	.word	19542
	.byte	10
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,4,142,4,16,4,11
	.byte	'EVR13UVVAL',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'EVR33UVVAL',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'SWDUVVAL',0,1
	.word	587
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	587
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,4,149,4,3
	.word	19681
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,4,152,4,16,4,11
	.byte	'EN0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	587
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	604
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	587
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	587
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	587
	.byte	8,0,2,35,3,0,28
	.byte	'Ifx_SCU_EXTCON_Bits',0,4,163,4,3
	.word	19844
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,4,166,4,16,4,11
	.byte	'STEP',0,2
	.word	604
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	587
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	587
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	604
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	587
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_FDR_Bits',0,4,174,4,3
	.word	20062
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,4,177,4,16,4,11
	.byte	'FS0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	587
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	587
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	587
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	587
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	587
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	587
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	587
	.byte	8,0,2,35,3,0,28
	.byte	'Ifx_SCU_FMR_Bits',0,4,197,4,3
	.word	20225
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,4,200,4,16,4,11
	.byte	'MODREV',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	604
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_ID_Bits',0,4,205,4,3
	.word	20561
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,4,208,4,16,4,11
	.byte	'IPEN00',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	587
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	587
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	587
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	587
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	587
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	587
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	587
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	587
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	587
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	587
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	587
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	587
	.byte	2,0,2,35,3,0,28
	.byte	'Ifx_SCU_IGCR_Bits',0,4,232,4,3
	.word	20668
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,4,235,4,16,4,11
	.byte	'P0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	412
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_SCU_IN_Bits',0,4,240,4,3
	.word	21120
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,4,243,4,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	587
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	587
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	587
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_IOCR_Bits',0,4,250,4,3
	.word	21219
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,4,253,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'LBISTREQP',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,2
	.word	604
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,4,131,5,3
	.word	21369
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,4,134,5,16,4,11
	.byte	'SEED',0,4
	.word	412
	.byte	23,9,2,35,0,11
	.byte	'reserved_23',0,1
	.word	587
	.byte	1,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	587
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	587
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	587
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,4,141,5,3
	.word	21518
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,4,144,5,16,4,11
	.byte	'SIGNATURE',0,4
	.word	412
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	587
	.byte	7,1,2,35,3,11
	.byte	'LBISTDONE',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,4,149,5,3
	.word	21679
	.byte	10
	.byte	'_Ifx_SCU_LCLCON_Bits',0,4,152,5,16,4,11
	.byte	'reserved_0',0,2
	.word	604
	.byte	16,0,2,35,0,11
	.byte	'LS',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	604
	.byte	14,1,2,35,2,11
	.byte	'LSEN',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_LCLCON_Bits',0,4,158,5,3
	.word	21809
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,4,161,5,16,4,11
	.byte	'LCLT0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	412
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_SCU_LCLTEST_Bits',0,4,166,5,3
	.word	21941
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,4,169,5,16,4,11
	.byte	'DEPT',0,1
	.word	587
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	604
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_MANID_Bits',0,4,174,5,3
	.word	22056
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,4,177,5,16,4,11
	.byte	'PS0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	604
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	604
	.byte	14,0,2,35,2,0,28
	.byte	'Ifx_SCU_OMR_Bits',0,4,185,5,3
	.word	22167
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,4,188,5,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	587
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	587
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'X1D',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'X1DEN',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	587
	.byte	4,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	587
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	587
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	587
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	587
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	587
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	587
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	587
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	587
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_OSCCON_Bits',0,4,209,5,3
	.word	22325
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,4,212,5,16,4,11
	.byte	'P0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	412
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_SCU_OUT_Bits',0,4,217,5,3
	.word	22737
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,4,220,5,16,4,11
	.byte	'CSEL0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	604
	.byte	13,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	587
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	587
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	587
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	587
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	587
	.byte	6,0,2,35,3,0,28
	.byte	'Ifx_SCU_OVCCON_Bits',0,4,233,5,3
	.word	22838
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,4,236,5,16,4,11
	.byte	'OVEN0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	412
	.byte	29,0,2,35,0,0,28
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,4,242,5,3
	.word	23105
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,4,245,5,16,4,11
	.byte	'PDIS0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	412
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_SCU_PDISC_Bits',0,4,250,5,3
	.word	23241
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,4,253,5,16,4,11
	.byte	'PD0',0,1
	.word	587
	.byte	3,5,2,35,0,11
	.byte	'PL0',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'PD1',0,1
	.word	587
	.byte	3,1,2,35,0,11
	.byte	'PL1',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	412
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_SCU_PDR_Bits',0,4,132,6,3
	.word	23352
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,4,135,6,16,4,11
	.byte	'PDR0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	412
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_SCU_PDRR_Bits',0,4,146,6,3
	.word	23485
	.byte	10
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,4,149,6,16,4,11
	.byte	'VCOBYP',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'VCOPWD',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'SETFINDIS',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'CLRFINDIS',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'OSCDISCDIS',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	604
	.byte	2,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	587
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	587
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	587
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	587
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	587
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_PLLCON0_Bits',0,4,166,6,3
	.word	23688
	.byte	10
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,4,169,6,16,4,11
	.byte	'K2DIV',0,1
	.word	587
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	587
	.byte	7,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'K1DIV',0,1
	.word	587
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	604
	.byte	9,0,2,35,2,0,28
	.byte	'Ifx_SCU_PLLCON1_Bits',0,4,177,6,3
	.word	24044
	.byte	10
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,4,180,6,16,4,11
	.byte	'MODCFG',0,2
	.word	604
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_PLLCON2_Bits',0,4,184,6,3
	.word	24222
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,4,187,6,16,4,11
	.byte	'VCOBYP',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'VCOPWD',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	587
	.byte	2,4,2,35,0,11
	.byte	'SETFINDIS',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'CLRFINDIS',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'OSCDISCDIS',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	604
	.byte	2,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	587
	.byte	5,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	587
	.byte	2,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	587
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	587
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	587
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	587
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,4,204,6,3
	.word	24322
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,4,207,6,16,4,11
	.byte	'K2DIV',0,1
	.word	587
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	587
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	587
	.byte	4,0,2,35,1,11
	.byte	'K1DIV',0,1
	.word	587
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	604
	.byte	9,0,2,35,2,0,28
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,4,215,6,3
	.word	24692
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,4,218,6,16,4,11
	.byte	'VCOBYST',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'VCOLOCK',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'FINDIS',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'K1RDY',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	412
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,4,227,6,3
	.word	24878
	.byte	10
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,4,230,6,16,4,11
	.byte	'VCOBYST',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'VCOLOCK',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'FINDIS',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'K1RDY',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	412
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,4,241,6,3
	.word	25076
	.byte	10
	.byte	'_Ifx_SCU_PMCSR_Bits',0,4,244,6,16,4,11
	.byte	'REQSLP',0,1
	.word	587
	.byte	2,6,2,35,0,11
	.byte	'SMUSLP',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	587
	.byte	5,0,2,35,0,11
	.byte	'PMST',0,1
	.word	587
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	412
	.byte	21,0,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR_Bits',0,4,251,6,3
	.word	25309
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,4,254,6,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'ESR1WKEN',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'PINAWKEN',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'PINBWKEN',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'ESR0DFEN',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'ESR0EDCON',0,1
	.word	587
	.byte	2,1,2,35,0,11
	.byte	'ESR1DFEN',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'ESR1EDCON',0,1
	.word	587
	.byte	2,6,2,35,1,11
	.byte	'PINADFEN',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'PINAEDCON',0,1
	.word	587
	.byte	2,3,2,35,1,11
	.byte	'PINBDFEN',0,1
	.word	587
	.byte	1,2,2,35,1,11
	.byte	'PINBEDCON',0,1
	.word	587
	.byte	2,0,2,35,1,11
	.byte	'SCREN',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'STBYRAMSEL',0,1
	.word	587
	.byte	2,5,2,35,2,11
	.byte	'SCRCLKSEL',0,1
	.word	587
	.byte	1,4,2,35,2,11
	.byte	'SCRWKEN',0,1
	.word	587
	.byte	1,3,2,35,2,11
	.byte	'TRISTEN',0,1
	.word	587
	.byte	1,2,2,35,2,11
	.byte	'TRISTREQ',0,1
	.word	587
	.byte	1,1,2,35,2,11
	.byte	'PORSTDF',0,1
	.word	587
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	587
	.byte	1,7,2,35,3,11
	.byte	'DCDCSYNC',0,1
	.word	587
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	587
	.byte	3,3,2,35,3,11
	.byte	'ESR0TRIST',0,1
	.word	587
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,4,153,7,3
	.word	25461
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,4,156,7,16,4,11
	.byte	'SCRSTEN',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'SCRSTREQ',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	587
	.byte	6,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	587
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	587
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	587
	.byte	3,0,2,35,1,11
	.byte	'SCRCFG',0,1
	.word	587
	.byte	8,0,2,35,2,11
	.byte	'CPUSEL',0,1
	.word	587
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	587
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	587
	.byte	3,1,2,35,3,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,4,170,7,3
	.word	26028
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR2_Bits',0,4,173,7,16,4,11
	.byte	'SCRINT',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'BUSY',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'SCRECC',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'SCRWDT',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'SCRRST',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	587
	.byte	4,0,2,35,1,11
	.byte	'TCINT',0,1
	.word	587
	.byte	8,0,2,35,2,11
	.byte	'TCINTREQ',0,1
	.word	587
	.byte	1,7,2,35,3,11
	.byte	'SMURST',0,1
	.word	587
	.byte	1,6,2,35,3,11
	.byte	'RST',0,1
	.word	587
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	587
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_PMSWCR2_Bits',0,4,187,7,3
	.word	26322
	.byte	10
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,4,190,7,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	2,6,2,35,0,11
	.byte	'ESR1WKP',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'ESR1OVRUN',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'PINAWKP',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'PINAOVRUN',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'PINBWKP',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'PINBOVRUN',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'PORSTDF',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'HWCFGEVR',0,1
	.word	587
	.byte	3,3,2,35,1,11
	.byte	'STBYRAM',0,1
	.word	587
	.byte	2,1,2,35,1,11
	.byte	'TRIST',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'SCRST',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'SCRWKP',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'SCR',0,1
	.word	587
	.byte	1,5,2,35,2,11
	.byte	'SCRWKEN',0,1
	.word	587
	.byte	1,4,2,35,2,11
	.byte	'ESR1WKEN',0,1
	.word	587
	.byte	1,3,2,35,2,11
	.byte	'PINAWKEN',0,1
	.word	587
	.byte	1,2,2,35,2,11
	.byte	'PINBWKEN',0,1
	.word	587
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	604
	.byte	4,5,2,35,2,11
	.byte	'ESR0TRIST',0,1
	.word	587
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	587
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,4,214,7,3
	.word	26600
	.byte	10
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,4,217,7,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	2,6,2,35,0,11
	.byte	'ESR1WKPCLR',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'ESR1OVRUNCLR',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'PINAWKPCLR',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'PINAOVRUNCLR',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'PINBWKPCLR',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'PINBOVRUNCLR',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'SCRSTCLR',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'SCRWKPCLR',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	604
	.byte	14,0,2,35,2,0,28
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,4,230,7,3
	.word	27096
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,4,233,7,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	604
	.byte	10,4,2,35,0,11
	.byte	'CSS0',0,1
	.word	587
	.byte	1,3,2,35,1,11
	.byte	'CSS1',0,1
	.word	587
	.byte	1,2,2,35,1,11
	.byte	'CSS2',0,1
	.word	587
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	604
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_RSTCON2_Bits',0,4,243,7,3
	.word	27409
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,4,246,7,16,4,11
	.byte	'ESR0',0,1
	.word	587
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	587
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	587
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	587
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	587
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	587
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	587
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	587
	.byte	2,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_RSTCON_Bits',0,4,129,8,3
	.word	27618
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,4,132,8,16,4,11
	.byte	'ESR0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'PORST',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	587
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	587
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	587
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	587
	.byte	2,1,2,35,2,11
	.byte	'EVR13',0,1
	.word	587
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	587
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	587
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	587
	.byte	2,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	587
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	587
	.byte	3,0,2,35,3,0,28
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,4,155,8,3
	.word	27829
	.byte	10
	.byte	'_Ifx_SCU_SAFECON_Bits',0,4,158,8,16,4,11
	.byte	'HBT',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	412
	.byte	31,0,2,35,0,0,28
	.byte	'Ifx_SCU_SAFECON_Bits',0,4,162,8,3
	.word	28261
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,4,165,8,16,4,11
	.byte	'HWCFG',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	587
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	587
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	587
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	587
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	587
	.byte	3,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	587
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	587
	.byte	7,0,2,35,3,0,28
	.byte	'Ifx_SCU_STSTAT_Bits',0,4,178,8,3
	.word	28357
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,4,181,8,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	412
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,4,186,8,3
	.word	28617
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,4,189,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	587
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	587
	.byte	3,0,2,35,0,11
	.byte	'DATM',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	412
	.byte	23,0,2,35,0,0,28
	.byte	'Ifx_SCU_SYSCON_Bits',0,4,198,8,3
	.word	28742
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,4,201,8,16,4,11
	.byte	'ESR0T',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	412
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,4,208,8,3
	.word	28939
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,4,211,8,16,4,11
	.byte	'ESR0T',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	412
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,4,218,8,3
	.word	29092
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,4,221,8,16,4,11
	.byte	'ESR0T',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	412
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPSET_Bits',0,4,228,8,3
	.word	29245
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,4,231,8,16,4,11
	.byte	'ESR0T',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	412
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,4,238,8,3
	.word	29398
	.byte	28
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,4,247,8,3
	.word	451
	.byte	28
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,4,134,9,3
	.word	626
	.byte	28
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,4,150,9,3
	.word	870
	.byte	28
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,4,159,9,3
	.word	10524
	.byte	28
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,4,175,9,3
	.word	10658
	.byte	28
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,4,191,9,3
	.word	10918
	.byte	12,4,199,9,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12063
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ACCEN0',0,4,204,9,3
	.word	29747
	.byte	12,4,207,9,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12620
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ACCEN1',0,4,212,9,3
	.word	29811
	.byte	12,4,215,9,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12697
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ARSTDIS',0,4,220,9,3
	.word	29875
	.byte	12,4,223,9,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12833
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON0',0,4,228,9,3
	.word	29940
	.byte	12,4,231,9,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13113
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON1',0,4,236,9,3
	.word	30005
	.byte	12,4,239,9,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13351
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON2',0,4,244,9,3
	.word	30070
	.byte	12,4,247,9,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13479
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON3',0,4,252,9,3
	.word	30135
	.byte	12,4,255,9,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13722
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON4',0,4,132,10,3
	.word	30200
	.byte	12,4,135,10,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13957
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON5',0,4,140,10,3
	.word	30265
	.byte	12,4,143,10,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14085
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON6',0,4,148,10,3
	.word	30330
	.byte	12,4,151,10,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14185
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON7',0,4,156,10,3
	.word	30395
	.byte	12,4,159,10,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14285
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CHIPID',0,4,164,10,3
	.word	30460
	.byte	12,4,167,10,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14493
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_DTSCON',0,4,172,10,3
	.word	30524
	.byte	12,4,175,10,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14658
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_DTSLIM',0,4,180,10,3
	.word	30588
	.byte	12,4,183,10,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14841
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_DTSSTAT',0,4,188,10,3
	.word	30652
	.byte	12,4,191,10,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14995
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EICR',0,4,196,10,3
	.word	30717
	.byte	12,4,199,10,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15359
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EIFR',0,4,204,10,3
	.word	30779
	.byte	12,4,207,10,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15570
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EMSR',0,4,212,10,3
	.word	30841
	.byte	12,4,215,10,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15822
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ESRCFG',0,4,220,10,3
	.word	30903
	.byte	12,4,223,10,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15940
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ESROCFG',0,4,228,10,3
	.word	30967
	.byte	12,4,231,10,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16051
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVR13CON',0,4,236,10,3
	.word	31032
	.byte	12,4,239,10,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16214
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVR33CON',0,4,244,10,3
	.word	31098
	.byte	12,4,247,10,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16377
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRADCSTAT',0,4,252,10,3
	.word	31164
	.byte	12,4,255,10,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16535
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRDVSTAT',0,4,132,11,3
	.word	31232
	.byte	12,4,135,11,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16700
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRMONCTRL',0,4,140,11,3
	.word	31299
	.byte	12,4,143,11,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17029
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVROSCCTRL',0,4,148,11,3
	.word	31367
	.byte	12,4,151,11,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17250
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVROVMON',0,4,156,11,3
	.word	31435
	.byte	12,4,159,11,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17413
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRRSTCON',0,4,164,11,3
	.word	31501
	.byte	12,4,167,11,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17685
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF1',0,4,172,11,3
	.word	31568
	.byte	12,4,175,11,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17838
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,4,180,11,3
	.word	31637
	.byte	12,4,183,11,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17994
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF3',0,4,188,11,3
	.word	31706
	.byte	12,4,191,11,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18156
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF4',0,4,196,11,3
	.word	31775
	.byte	12,4,199,11,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18299
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF5',0,4,204,11,3
	.word	31844
	.byte	12,4,207,11,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18464
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSDCOEFF6',0,4,212,11,3
	.word	31913
	.byte	12,4,215,11,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18609
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSDCTRL1',0,4,220,11,3
	.word	31982
	.byte	12,4,223,11,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18790
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSDCTRL2',0,4,228,11,3
	.word	32050
	.byte	12,4,231,11,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18964
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSDCTRL3',0,4,236,11,3
	.word	32118
	.byte	12,4,239,11,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19124
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSDCTRL4',0,4,244,11,3
	.word	32186
	.byte	12,4,247,11,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19268
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRSTAT',0,4,252,11,3
	.word	32254
	.byte	12,4,255,11,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19542
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRTRIM',0,4,132,12,3
	.word	32319
	.byte	12,4,135,12,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19681
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EVRUVMON',0,4,140,12,3
	.word	32384
	.byte	12,4,143,12,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19844
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EXTCON',0,4,148,12,3
	.word	32450
	.byte	12,4,151,12,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20062
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_FDR',0,4,156,12,3
	.word	32514
	.byte	12,4,159,12,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20225
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_FMR',0,4,164,12,3
	.word	32575
	.byte	12,4,167,12,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20561
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ID',0,4,172,12,3
	.word	32636
	.byte	12,4,175,12,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20668
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_IGCR',0,4,180,12,3
	.word	32696
	.byte	12,4,183,12,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21120
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_IN',0,4,188,12,3
	.word	32758
	.byte	12,4,191,12,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21219
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_IOCR',0,4,196,12,3
	.word	32818
	.byte	12,4,199,12,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21369
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LBISTCTRL0',0,4,204,12,3
	.word	32880
	.byte	12,4,207,12,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21518
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LBISTCTRL1',0,4,212,12,3
	.word	32948
	.byte	12,4,215,12,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21679
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LBISTCTRL2',0,4,220,12,3
	.word	33016
	.byte	12,4,223,12,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21809
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LCLCON',0,4,228,12,3
	.word	33084
	.byte	12,4,231,12,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21941
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LCLTEST',0,4,236,12,3
	.word	33148
	.byte	12,4,239,12,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22056
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_MANID',0,4,244,12,3
	.word	33213
	.byte	12,4,247,12,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22167
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_OMR',0,4,252,12,3
	.word	33276
	.byte	12,4,255,12,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22325
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_OSCCON',0,4,132,13,3
	.word	33337
	.byte	12,4,135,13,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22737
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_OUT',0,4,140,13,3
	.word	33401
	.byte	12,4,143,13,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22838
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_OVCCON',0,4,148,13,3
	.word	33462
	.byte	12,4,151,13,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23105
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_OVCENABLE',0,4,156,13,3
	.word	33526
	.byte	12,4,159,13,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23241
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PDISC',0,4,164,13,3
	.word	33593
	.byte	12,4,167,13,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23352
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PDR',0,4,172,13,3
	.word	33656
	.byte	12,4,175,13,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23485
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PDRR',0,4,180,13,3
	.word	33717
	.byte	12,4,183,13,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23688
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PLLCON0',0,4,188,13,3
	.word	33779
	.byte	12,4,191,13,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24044
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PLLCON1',0,4,196,13,3
	.word	33844
	.byte	12,4,199,13,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24222
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PLLCON2',0,4,204,13,3
	.word	33909
	.byte	12,4,207,13,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24322
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PLLERAYCON0',0,4,212,13,3
	.word	33974
	.byte	12,4,215,13,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24692
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PLLERAYCON1',0,4,220,13,3
	.word	34043
	.byte	12,4,223,13,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24878
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PLLERAYSTAT',0,4,228,13,3
	.word	34112
	.byte	12,4,231,13,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25076
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PLLSTAT',0,4,236,13,3
	.word	34181
	.byte	12,4,239,13,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25309
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR',0,4,244,13,3
	.word	34246
	.byte	12,4,247,13,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25461
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMSWCR0',0,4,252,13,3
	.word	34309
	.byte	12,4,255,13,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26028
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMSWCR1',0,4,132,14,3
	.word	34374
	.byte	12,4,135,14,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26322
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMSWCR2',0,4,140,14,3
	.word	34439
	.byte	12,4,143,14,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26600
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMSWSTAT',0,4,148,14,3
	.word	34504
	.byte	12,4,151,14,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27096
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMSWSTATCLR',0,4,156,14,3
	.word	34570
	.byte	12,4,159,14,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27618
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_RSTCON',0,4,164,14,3
	.word	34639
	.byte	12,4,167,14,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27409
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_RSTCON2',0,4,172,14,3
	.word	34703
	.byte	12,4,175,14,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27829
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_RSTSTAT',0,4,180,14,3
	.word	34768
	.byte	12,4,183,14,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28261
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SAFECON',0,4,188,14,3
	.word	34833
	.byte	12,4,191,14,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28357
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_STSTAT',0,4,196,14,3
	.word	34898
	.byte	12,4,199,14,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28617
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SWRSTCON',0,4,204,14,3
	.word	34962
	.byte	12,4,207,14,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28742
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SYSCON',0,4,212,14,3
	.word	35028
	.byte	12,4,215,14,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28939
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPCLR',0,4,220,14,3
	.word	35092
	.byte	12,4,223,14,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29092
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPDIS',0,4,228,14,3
	.word	35157
	.byte	12,4,231,14,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29245
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPSET',0,4,236,14,3
	.word	35222
	.byte	12,4,239,14,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29398
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPSTAT',0,4,244,14,3
	.word	35287
	.byte	28
	.byte	'Ifx_SCU_WDTCPU_CON0',0,4,252,14,3
	.word	547
	.byte	28
	.byte	'Ifx_SCU_WDTCPU_CON1',0,4,132,15,3
	.word	830
	.byte	28
	.byte	'Ifx_SCU_WDTCPU_SR',0,4,140,15,3
	.word	1061
	.byte	28
	.byte	'Ifx_SCU_WDTS_CON0',0,4,148,15,3
	.word	10618
	.byte	28
	.byte	'Ifx_SCU_WDTS_CON1',0,4,156,15,3
	.word	10878
	.byte	28
	.byte	'Ifx_SCU_WDTS_SR',0,4,164,15,3
	.word	11107
	.byte	14
	.word	1101
	.byte	28
	.byte	'Ifx_SCU_WDTCPU',0,4,180,15,3
	.word	35517
	.byte	14
	.word	11147
	.byte	28
	.byte	'Ifx_SCU_WDTS',0,4,188,15,3
	.word	35546
	.byte	15,8
	.word	30903
	.byte	16,1,0,15,20
	.word	587
	.byte	16,19,0,15,8
	.word	34246
	.byte	16,1,0,14
	.word	11147
	.byte	15,24
	.word	1101
	.byte	16,1,0,14
	.word	35605
	.byte	15,16
	.word	587
	.byte	16,15,0,15,28
	.word	587
	.byte	16,27,0,15,40
	.word	587
	.byte	16,39,0,15,16
	.word	30717
	.byte	16,3,0,15,16
	.word	32696
	.byte	16,3,0,15,180,3
	.word	587
	.byte	16,179,3,0,10
	.byte	'_Ifx_SCU',0,4,201,15,25,128,8,13
	.byte	'reserved_0',0
	.word	4474
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	32636
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2655
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	33337
	.byte	4,2,35,16,13
	.byte	'PLLSTAT',0
	.word	34181
	.byte	4,2,35,20,13
	.byte	'PLLCON0',0
	.word	33779
	.byte	4,2,35,24,13
	.byte	'PLLCON1',0
	.word	33844
	.byte	4,2,35,28,13
	.byte	'PLLCON2',0
	.word	33909
	.byte	4,2,35,32,13
	.byte	'PLLERAYSTAT',0
	.word	34112
	.byte	4,2,35,36,13
	.byte	'PLLERAYCON0',0
	.word	33974
	.byte	4,2,35,40,13
	.byte	'PLLERAYCON1',0
	.word	34043
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	29940
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	30005
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	32514
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	32450
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	30070
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	30135
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	30200
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	30265
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	34768
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	2655
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	34639
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	29875
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	34962
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	34703
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	2655
	.byte	4,2,35,104,13
	.byte	'EVRRSTCON',0
	.word	31501
	.byte	4,2,35,108,13
	.byte	'ESRCFG',0
	.word	35573
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	30967
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	35028
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	30330
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	30395
	.byte	4,3,35,132,1,13
	.byte	'reserved_88',0
	.word	35582
	.byte	20,3,35,136,1,13
	.byte	'PDR',0
	.word	33656
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	32818
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	33401
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	33276
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	32758
	.byte	4,3,35,172,1,13
	.byte	'EVRSTAT',0
	.word	32254
	.byte	4,3,35,176,1,13
	.byte	'EVRDVSTAT',0
	.word	31232
	.byte	4,3,35,180,1,13
	.byte	'EVR13CON',0
	.word	31032
	.byte	4,3,35,184,1,13
	.byte	'EVR33CON',0
	.word	31098
	.byte	4,3,35,188,1,13
	.byte	'STSTAT',0
	.word	34898
	.byte	4,3,35,192,1,13
	.byte	'reserved_C4',0
	.word	2655
	.byte	4,3,35,196,1,13
	.byte	'PMSWCR0',0
	.word	34309
	.byte	4,3,35,200,1,13
	.byte	'PMSWSTAT',0
	.word	34504
	.byte	4,3,35,204,1,13
	.byte	'PMSWSTATCLR',0
	.word	34570
	.byte	4,3,35,208,1,13
	.byte	'PMCSR',0
	.word	35591
	.byte	8,3,35,212,1,13
	.byte	'reserved_DC',0
	.word	2655
	.byte	4,3,35,220,1,13
	.byte	'DTSSTAT',0
	.word	30652
	.byte	4,3,35,224,1,13
	.byte	'DTSCON',0
	.word	30524
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	34374
	.byte	4,3,35,232,1,13
	.byte	'PMSWCR2',0
	.word	34439
	.byte	4,3,35,236,1,13
	.byte	'WDTS',0
	.word	35600
	.byte	12,3,35,240,1,13
	.byte	'EMSR',0
	.word	30841
	.byte	4,3,35,252,1,13
	.byte	'WDTCPU',0
	.word	35614
	.byte	24,3,35,128,2,13
	.byte	'reserved_118',0
	.word	4814
	.byte	12,3,35,152,2,13
	.byte	'TRAPSTAT',0
	.word	35287
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	35222
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	35092
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS',0
	.word	35157
	.byte	4,3,35,176,2,13
	.byte	'reserved_134',0
	.word	2655
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	33084
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	33148
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	30460
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	33213
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	4474
	.byte	8,3,35,200,2,13
	.byte	'SAFECON',0
	.word	34833
	.byte	4,3,35,208,2,13
	.byte	'reserved_154',0
	.word	35619
	.byte	16,3,35,212,2,13
	.byte	'LBISTCTRL0',0
	.word	32880
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	32948
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	33016
	.byte	4,3,35,236,2,13
	.byte	'reserved_170',0
	.word	35628
	.byte	28,3,35,240,2,13
	.byte	'PDISC',0
	.word	33593
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	4474
	.byte	8,3,35,144,3,13
	.byte	'EVRTRIM',0
	.word	32319
	.byte	4,3,35,152,3,13
	.byte	'EVRADCSTAT',0
	.word	31164
	.byte	4,3,35,156,3,13
	.byte	'EVRUVMON',0
	.word	32384
	.byte	4,3,35,160,3,13
	.byte	'EVROVMON',0
	.word	31435
	.byte	4,3,35,164,3,13
	.byte	'EVRMONCTRL',0
	.word	31299
	.byte	4,3,35,168,3,13
	.byte	'reserved_1AC',0
	.word	2655
	.byte	4,3,35,172,3,13
	.byte	'EVRSDCTRL1',0
	.word	31982
	.byte	4,3,35,176,3,13
	.byte	'EVRSDCTRL2',0
	.word	32050
	.byte	4,3,35,180,3,13
	.byte	'EVRSDCTRL3',0
	.word	32118
	.byte	4,3,35,184,3,13
	.byte	'EVRSDCTRL4',0
	.word	32186
	.byte	4,3,35,188,3,13
	.byte	'EVRSDCOEFF1',0
	.word	31568
	.byte	4,3,35,192,3,13
	.byte	'EVRSDCOEFF2',0
	.word	31637
	.byte	4,3,35,196,3,13
	.byte	'EVRSDCOEFF3',0
	.word	31706
	.byte	4,3,35,200,3,13
	.byte	'EVRSDCOEFF4',0
	.word	31775
	.byte	4,3,35,204,3,13
	.byte	'EVRSDCOEFF5',0
	.word	31844
	.byte	4,3,35,208,3,13
	.byte	'EVRSDCOEFF6',0
	.word	31913
	.byte	4,3,35,212,3,13
	.byte	'EVROSCCTRL',0
	.word	31367
	.byte	4,3,35,216,3,13
	.byte	'reserved_1DC',0
	.word	2655
	.byte	4,3,35,220,3,13
	.byte	'OVCENABLE',0
	.word	33526
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	33462
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	35637
	.byte	40,3,35,232,3,13
	.byte	'EICR',0
	.word	35646
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	30779
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	32575
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	33717
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	35655
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	2655
	.byte	4,3,35,188,4,13
	.byte	'DTSLIM',0
	.word	30588
	.byte	4,3,35,192,4,13
	.byte	'reserved_244',0
	.word	35664
	.byte	180,3,3,35,196,4,13
	.byte	'ACCEN1',0
	.word	29811
	.byte	4,3,35,248,7,13
	.byte	'ACCEN0',0
	.word	29747
	.byte	4,3,35,252,7,0,14
	.word	35675
	.byte	28
	.byte	'Ifx_SCU',0,4,181,16,3
	.word	37665
	.byte	28
	.byte	'IfxScuWdt_Config',0,3,100,3
	.word	10260
	.byte	10
	.byte	'_Ifx_CPU_A_Bits',0,10,45,16,4,11
	.byte	'ADDR',0,4
	.word	435
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_A_Bits',0,10,48,3
	.word	37712
	.byte	10
	.byte	'_Ifx_CPU_BIV_Bits',0,10,51,16,4,11
	.byte	'VSS',0,4
	.word	435
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	435
	.byte	31,0,2,35,0,0,28
	.byte	'Ifx_CPU_BIV_Bits',0,10,55,3
	.word	37773
	.byte	10
	.byte	'_Ifx_CPU_BTV_Bits',0,10,58,16,4,11
	.byte	'reserved_0',0,4
	.word	435
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	435
	.byte	31,0,2,35,0,0,28
	.byte	'Ifx_CPU_BTV_Bits',0,10,62,3
	.word	37852
	.byte	10
	.byte	'_Ifx_CPU_CCNT_Bits',0,10,65,16,4,11
	.byte	'CountValue',0,4
	.word	435
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	435
	.byte	1,0,2,35,0,0,28
	.byte	'Ifx_CPU_CCNT_Bits',0,10,69,3
	.word	37938
	.byte	10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,10,72,16,4,11
	.byte	'CM',0,4
	.word	435
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	435
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	435
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	435
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	435
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	435
	.byte	21,0,2,35,0,0,28
	.byte	'Ifx_CPU_CCTRL_Bits',0,10,80,3
	.word	38027
	.byte	10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,10,83,16,4,11
	.byte	'reserved_0',0,4
	.word	435
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	435
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	435
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	435
	.byte	27,0,2,35,0,0,28
	.byte	'Ifx_CPU_COMPAT_Bits',0,10,89,3
	.word	38173
	.byte	28
	.byte	'Ifx_CPU_CORE_ID_Bits',0,10,96,3
	.word	11276
	.byte	10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,10,99,16,4,11
	.byte	'reserved_0',0,4
	.word	435
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	435
	.byte	29,0,2,35,0,0,28
	.byte	'Ifx_CPU_CPR_L_Bits',0,10,103,3
	.word	38329
	.byte	10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,10,106,16,4,11
	.byte	'reserved_0',0,4
	.word	435
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	435
	.byte	29,0,2,35,0,0,28
	.byte	'Ifx_CPU_CPR_U_Bits',0,10,110,3
	.word	38422
	.byte	10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,10,113,16,4,11
	.byte	'MODREV',0,4
	.word	435
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	435
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	435
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_CPU_CPU_ID_Bits',0,10,118,3
	.word	38515
	.byte	10
	.byte	'_Ifx_CPU_CPXE_Bits',0,10,121,16,4,11
	.byte	'XE',0,4
	.word	435
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	435
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_CPU_CPXE_Bits',0,10,125,3
	.word	38622
	.byte	10
	.byte	'_Ifx_CPU_CREVT_Bits',0,10,128,1,16,4,11
	.byte	'EVTA',0,4
	.word	435
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	435
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	435
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	435
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	435
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	435
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_CPU_CREVT_Bits',0,10,136,1,3
	.word	38709
	.byte	10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,10,139,1,16,4,11
	.byte	'CID',0,4
	.word	435
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	435
	.byte	29,0,2,35,0,0,28
	.byte	'Ifx_CPU_CUS_ID_Bits',0,10,143,1,3
	.word	38863
	.byte	10
	.byte	'_Ifx_CPU_D_Bits',0,10,146,1,16,4,11
	.byte	'DATA',0,4
	.word	435
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_D_Bits',0,10,149,1,3
	.word	38957
	.byte	10
	.byte	'_Ifx_CPU_DATR_Bits',0,10,152,1,16,4,11
	.byte	'reserved_0',0,4
	.word	435
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	435
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	435
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	435
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	435
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	435
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	435
	.byte	1,17,2,35,0,11
	.byte	'SME',0,4
	.word	435
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	435
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_CPU_DATR_Bits',0,10,163,1,3
	.word	39020
	.byte	10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,10,166,1,16,4,11
	.byte	'DE',0,4
	.word	435
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	435
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	435
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	435
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	435
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	435
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	435
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	435
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	435
	.byte	19,0,2,35,0,0,28
	.byte	'Ifx_CPU_DBGSR_Bits',0,10,177,1,3
	.word	39238
	.byte	10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,10,180,1,16,4,11
	.byte	'DTA',0,4
	.word	435
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	435
	.byte	31,0,2,35,0,0,28
	.byte	'Ifx_CPU_DBGTCR_Bits',0,10,184,1,3
	.word	39453
	.byte	10
	.byte	'_Ifx_CPU_DCON0_Bits',0,10,187,1,16,4,11
	.byte	'reserved_0',0,4
	.word	435
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	435
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	435
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_CPU_DCON0_Bits',0,10,192,1,3
	.word	39547
	.byte	10
	.byte	'_Ifx_CPU_DCON2_Bits',0,10,195,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	435
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	435
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_CPU_DCON2_Bits',0,10,199,1,3
	.word	39663
	.byte	10
	.byte	'_Ifx_CPU_DCX_Bits',0,10,202,1,16,4,11
	.byte	'reserved_0',0,4
	.word	435
	.byte	6,26,2,35,0,11
	.byte	'DCXValue',0,4
	.word	435
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_CPU_DCX_Bits',0,10,206,1,3
	.word	39764
	.byte	10
	.byte	'_Ifx_CPU_DEADD_Bits',0,10,209,1,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	435
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_DEADD_Bits',0,10,212,1,3
	.word	39857
	.byte	10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,10,215,1,16,4,11
	.byte	'TA',0,4
	.word	435
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_DIEAR_Bits',0,10,218,1,3
	.word	39937
	.byte	10
	.byte	'_Ifx_CPU_DIETR_Bits',0,10,221,1,16,4,11
	.byte	'IED',0,4
	.word	435
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	435
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	435
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	435
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	435
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	435
	.byte	6,21,2,35,0,11
	.byte	'IE_DUAL',0,4
	.word	435
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	435
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	435
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	435
	.byte	18,0,2,35,0,0,28
	.byte	'Ifx_CPU_DIETR_Bits',0,10,233,1,3
	.word	40006
	.byte	10
	.byte	'_Ifx_CPU_DMS_Bits',0,10,236,1,16,4,11
	.byte	'reserved_0',0,4
	.word	435
	.byte	1,31,2,35,0,11
	.byte	'DMSValue',0,4
	.word	435
	.byte	31,0,2,35,0,0,28
	.byte	'Ifx_CPU_DMS_Bits',0,10,240,1,3
	.word	40235
	.byte	10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,10,243,1,16,4,11
	.byte	'reserved_0',0,4
	.word	435
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	435
	.byte	29,0,2,35,0,0,28
	.byte	'Ifx_CPU_DPR_L_Bits',0,10,247,1,3
	.word	40328
	.byte	10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,10,250,1,16,4,11
	.byte	'reserved_0',0,4
	.word	435
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	435
	.byte	29,0,2,35,0,0,28
	.byte	'Ifx_CPU_DPR_U_Bits',0,10,254,1,3
	.word	40423
	.byte	10
	.byte	'_Ifx_CPU_DPRE_Bits',0,10,129,2,16,4,11
	.byte	'RE',0,4
	.word	435
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	435
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_CPU_DPRE_Bits',0,10,133,2,3
	.word	40518
	.byte	10
	.byte	'_Ifx_CPU_DPWE_Bits',0,10,136,2,16,4,11
	.byte	'WE',0,4
	.word	435
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	435
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_CPU_DPWE_Bits',0,10,140,2,3
	.word	40608
	.byte	10
	.byte	'_Ifx_CPU_DSTR_Bits',0,10,143,2,16,4,11
	.byte	'SRE',0,4
	.word	435
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	435
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	435
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	435
	.byte	3,26,2,35,0,11
	.byte	'CRE',0,4
	.word	435
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	435
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	435
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	435
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	435
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	435
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	435
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	435
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	435
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	435
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	435
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	435
	.byte	7,0,2,35,0,0,28
	.byte	'Ifx_CPU_DSTR_Bits',0,10,161,2,3
	.word	40698
	.byte	10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,10,164,2,16,4,11
	.byte	'EVTA',0,4
	.word	435
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	435
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	435
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	435
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	435
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	435
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_CPU_EXEVT_Bits',0,10,172,2,3
	.word	41022
	.byte	10
	.byte	'_Ifx_CPU_FCX_Bits',0,10,175,2,16,4,11
	.byte	'FCXO',0,4
	.word	435
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	435
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	435
	.byte	12,0,2,35,0,0,28
	.byte	'Ifx_CPU_FCX_Bits',0,10,180,2,3
	.word	41176
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,10,183,2,16,4,11
	.byte	'TST',0,4
	.word	435
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	435
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	435
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	435
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	435
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	435
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	435
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	435
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	435
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	435
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	435
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	435
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	435
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	435
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	435
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	435
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	435
	.byte	1,0,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,10,202,2,3
	.word	41282
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,10,205,2,16,4,11
	.byte	'OPC',0,4
	.word	435
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	435
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	435
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	435
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	435
	.byte	12,0,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,10,212,2,3
	.word	41631
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,10,215,2,16,4,11
	.byte	'PC',0,4
	.word	435
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,10,218,2,3
	.word	41791
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,10,221,2,16,4,11
	.byte	'SRC1',0,4
	.word	435
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,10,224,2,3
	.word	41872
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,10,227,2,16,4,11
	.byte	'SRC2',0,4
	.word	435
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,10,230,2,3
	.word	41959
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,10,233,2,16,4,11
	.byte	'SRC3',0,4
	.word	435
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,10,236,2,3
	.word	42046
	.byte	10
	.byte	'_Ifx_CPU_ICNT_Bits',0,10,239,2,16,4,11
	.byte	'CountValue',0,4
	.word	435
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	435
	.byte	1,0,2,35,0,0,28
	.byte	'Ifx_CPU_ICNT_Bits',0,10,243,2,3
	.word	42133
	.byte	10
	.byte	'_Ifx_CPU_ICR_Bits',0,10,246,2,16,4,11
	.byte	'CCPN',0,4
	.word	435
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	435
	.byte	5,17,2,35,0,11
	.byte	'IE',0,4
	.word	435
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	435
	.byte	10,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	435
	.byte	6,0,2,35,0,0,28
	.byte	'Ifx_CPU_ICR_Bits',0,10,253,2,3
	.word	42224
	.byte	10
	.byte	'_Ifx_CPU_ISP_Bits',0,10,128,3,16,4,11
	.byte	'ISP',0,4
	.word	435
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_ISP_Bits',0,10,131,3,3
	.word	42367
	.byte	10
	.byte	'_Ifx_CPU_LCX_Bits',0,10,134,3,16,4,11
	.byte	'LCXO',0,4
	.word	435
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	435
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	435
	.byte	12,0,2,35,0,0,28
	.byte	'Ifx_CPU_LCX_Bits',0,10,139,3,3
	.word	42433
	.byte	10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,10,142,3,16,4,11
	.byte	'CountValue',0,4
	.word	435
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	435
	.byte	1,0,2,35,0,0,28
	.byte	'Ifx_CPU_M1CNT_Bits',0,10,146,3,3
	.word	42539
	.byte	10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,10,149,3,16,4,11
	.byte	'CountValue',0,4
	.word	435
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	435
	.byte	1,0,2,35,0,0,28
	.byte	'Ifx_CPU_M2CNT_Bits',0,10,153,3,3
	.word	42632
	.byte	10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,10,156,3,16,4,11
	.byte	'CountValue',0,4
	.word	435
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	435
	.byte	1,0,2,35,0,0,28
	.byte	'Ifx_CPU_M3CNT_Bits',0,10,160,3,3
	.word	42725
	.byte	10
	.byte	'_Ifx_CPU_PC_Bits',0,10,163,3,16,4,11
	.byte	'reserved_0',0,4
	.word	435
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	435
	.byte	31,0,2,35,0,0,28
	.byte	'Ifx_CPU_PC_Bits',0,10,167,3,3
	.word	42818
	.byte	10
	.byte	'_Ifx_CPU_PCON0_Bits',0,10,170,3,16,4,11
	.byte	'reserved_0',0,4
	.word	435
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	435
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	435
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_CPU_PCON0_Bits',0,10,175,3,3
	.word	42903
	.byte	10
	.byte	'_Ifx_CPU_PCON1_Bits',0,10,178,3,16,4,11
	.byte	'PCINV',0,4
	.word	435
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	435
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	435
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_CPU_PCON1_Bits',0,10,183,3,3
	.word	43019
	.byte	10
	.byte	'_Ifx_CPU_PCON2_Bits',0,10,186,3,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	435
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	435
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_CPU_PCON2_Bits',0,10,190,3,3
	.word	43130
	.byte	10
	.byte	'_Ifx_CPU_PCXI_Bits',0,10,193,3,16,4,11
	.byte	'PCXO',0,4
	.word	435
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	435
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	435
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	435
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	435
	.byte	10,0,2,35,0,0,28
	.byte	'Ifx_CPU_PCXI_Bits',0,10,200,3,3
	.word	43231
	.byte	10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,10,203,3,16,4,11
	.byte	'TA',0,4
	.word	435
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_PIEAR_Bits',0,10,206,3,3
	.word	43361
	.byte	10
	.byte	'_Ifx_CPU_PIETR_Bits',0,10,209,3,16,4,11
	.byte	'IED',0,4
	.word	435
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	435
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	435
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	435
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	435
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	435
	.byte	6,21,2,35,0,11
	.byte	'IE_DUAL',0,4
	.word	435
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	435
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	435
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	435
	.byte	18,0,2,35,0,0,28
	.byte	'Ifx_CPU_PIETR_Bits',0,10,221,3,3
	.word	43430
	.byte	10
	.byte	'_Ifx_CPU_PMA0_Bits',0,10,224,3,16,4,11
	.byte	'reserved_0',0,4
	.word	435
	.byte	13,19,2,35,0,11
	.byte	'DAC',0,4
	.word	435
	.byte	3,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	435
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_CPU_PMA0_Bits',0,10,229,3,3
	.word	43659
	.byte	10
	.byte	'_Ifx_CPU_PMA1_Bits',0,10,232,3,16,4,11
	.byte	'reserved_0',0,4
	.word	435
	.byte	14,18,2,35,0,11
	.byte	'CAC',0,4
	.word	435
	.byte	2,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	435
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_CPU_PMA1_Bits',0,10,237,3,3
	.word	43772
	.byte	10
	.byte	'_Ifx_CPU_PMA2_Bits',0,10,240,3,16,4,11
	.byte	'PSI',0,4
	.word	435
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	435
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_CPU_PMA2_Bits',0,10,244,3,3
	.word	43885
	.byte	10
	.byte	'_Ifx_CPU_PSTR_Bits',0,10,247,3,16,4,11
	.byte	'FRE',0,4
	.word	435
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	435
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	435
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	435
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	435
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	435
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	435
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	435
	.byte	17,0,2,35,0,0,28
	.byte	'Ifx_CPU_PSTR_Bits',0,10,129,4,3
	.word	43976
	.byte	10
	.byte	'_Ifx_CPU_PSW_Bits',0,10,132,4,16,4,11
	.byte	'CDC',0,4
	.word	435
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	435
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	435
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	435
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	435
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	435
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	435
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	435
	.byte	12,5,2,35,0,11
	.byte	'SAV',0,4
	.word	435
	.byte	1,4,2,35,0,11
	.byte	'AV',0,4
	.word	435
	.byte	1,3,2,35,0,11
	.byte	'SV',0,4
	.word	435
	.byte	1,2,2,35,0,11
	.byte	'V',0,4
	.word	435
	.byte	1,1,2,35,0,11
	.byte	'C',0,4
	.word	435
	.byte	1,0,2,35,0,0,28
	.byte	'Ifx_CPU_PSW_Bits',0,10,147,4,3
	.word	44179
	.byte	10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,10,150,4,16,4,11
	.byte	'ADFLIP',0,4
	.word	435
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	435
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	435
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	435
	.byte	1,0,2,35,0,0,28
	.byte	'Ifx_CPU_SEGEN_Bits',0,10,156,4,3
	.word	44422
	.byte	10
	.byte	'_Ifx_CPU_SMACON_Bits',0,10,159,4,16,4,11
	.byte	'PC',0,4
	.word	435
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	435
	.byte	1,30,2,35,0,11
	.byte	'PT',0,4
	.word	435
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	435
	.byte	5,24,2,35,0,11
	.byte	'DC',0,4
	.word	435
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	435
	.byte	1,22,2,35,0,11
	.byte	'DT',0,4
	.word	435
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	435
	.byte	13,8,2,35,0,11
	.byte	'IODT',0,4
	.word	435
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	435
	.byte	7,0,2,35,0,0,28
	.byte	'Ifx_CPU_SMACON_Bits',0,10,171,4,3
	.word	44550
	.byte	10
	.byte	'_Ifx_CPU_SPROT_ACCENA_Bits',0,10,174,4,16,4,11
	.byte	'EN',0,4
	.word	412
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_ACCENA_Bits',0,10,177,4,3
	.word	44791
	.byte	10
	.byte	'_Ifx_CPU_SPROT_ACCENB_Bits',0,10,180,4,16,4,11
	.byte	'reserved_0',0,4
	.word	412
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_ACCENB_Bits',0,10,183,4,3
	.word	44874
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,10,186,4,16,4,11
	.byte	'EN',0,4
	.word	412
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,10,189,4,3
	.word	44965
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,10,192,4,16,4,11
	.byte	'reserved_0',0,4
	.word	412
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,10,195,4,3
	.word	45056
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_LA_Bits',0,10,198,4,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	412
	.byte	27,0,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_RGN_LA_Bits',0,10,202,4,3
	.word	45155
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_UA_Bits',0,10,205,4,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	412
	.byte	27,0,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_RGN_UA_Bits',0,10,209,4,3
	.word	45262
	.byte	10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,10,212,4,16,4,11
	.byte	'EVTA',0,4
	.word	435
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	435
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	435
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	435
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	435
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	435
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_CPU_SWEVT_Bits',0,10,220,4,3
	.word	45369
	.byte	10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,10,223,4,16,4,11
	.byte	'FCDSF',0,4
	.word	435
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	435
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	435
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	435
	.byte	1,28,2,35,0,11
	.byte	'IT',0,4
	.word	435
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	435
	.byte	27,0,2,35,0,0,28
	.byte	'Ifx_CPU_SYSCON_Bits',0,10,231,4,3
	.word	45523
	.byte	10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,10,234,4,16,4,11
	.byte	'ASI',0,4
	.word	435
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	435
	.byte	27,0,2,35,0,0,28
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,10,238,4,3
	.word	45684
	.byte	10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,10,241,4,16,4,11
	.byte	'TEXP0',0,4
	.word	435
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	435
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	435
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	435
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	435
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	435
	.byte	15,0,2,35,0,0,28
	.byte	'Ifx_CPU_TPS_CON_Bits',0,10,249,4,3
	.word	45782
	.byte	10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,10,252,4,16,4,11
	.byte	'Timer',0,4
	.word	435
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,10,255,4,3
	.word	45954
	.byte	10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,10,130,5,16,4,11
	.byte	'ADDR',0,4
	.word	435
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_CPU_TR_ADR_Bits',0,10,133,5,3
	.word	46034
	.byte	10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,10,136,5,16,4,11
	.byte	'EVTA',0,4
	.word	435
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	435
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	435
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	435
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	435
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	435
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	435
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	435
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	435
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	435
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	435
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	435
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	435
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	435
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	435
	.byte	3,0,2,35,0,0,28
	.byte	'Ifx_CPU_TR_EVT_Bits',0,10,153,5,3
	.word	46107
	.byte	10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,10,156,5,16,4,11
	.byte	'T0',0,4
	.word	435
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	435
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	435
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	435
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	435
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	435
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	435
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	435
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	435
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,10,167,5,3
	.word	46425
	.byte	12,10,175,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37712
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_A',0,10,180,5,3
	.word	46620
	.byte	12,10,183,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37773
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_BIV',0,10,188,5,3
	.word	46679
	.byte	12,10,191,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37852
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_BTV',0,10,196,5,3
	.word	46740
	.byte	12,10,199,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37938
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_CCNT',0,10,204,5,3
	.word	46801
	.byte	12,10,207,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38027
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_CCTRL',0,10,212,5,3
	.word	46863
	.byte	12,10,215,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38173
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_COMPAT',0,10,220,5,3
	.word	46926
	.byte	28
	.byte	'Ifx_CPU_CORE_ID',0,10,228,5,3
	.word	11345
	.byte	12,10,231,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38329
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_CPR_L',0,10,236,5,3
	.word	47015
	.byte	12,10,239,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38422
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_CPR_U',0,10,244,5,3
	.word	47078
	.byte	12,10,247,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38515
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_CPU_ID',0,10,252,5,3
	.word	47141
	.byte	12,10,255,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38622
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_CPXE',0,10,132,6,3
	.word	47205
	.byte	12,10,135,6,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38709
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_CREVT',0,10,140,6,3
	.word	47267
	.byte	12,10,143,6,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38863
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_CUS_ID',0,10,148,6,3
	.word	47330
	.byte	12,10,151,6,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38957
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_D',0,10,156,6,3
	.word	47394
	.byte	12,10,159,6,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39020
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DATR',0,10,164,6,3
	.word	47453
	.byte	12,10,167,6,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39238
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DBGSR',0,10,172,6,3
	.word	47515
	.byte	12,10,175,6,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39453
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DBGTCR',0,10,180,6,3
	.word	47578
	.byte	12,10,183,6,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39547
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DCON0',0,10,188,6,3
	.word	47642
	.byte	12,10,191,6,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39663
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DCON2',0,10,196,6,3
	.word	47705
	.byte	12,10,199,6,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39764
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DCX',0,10,204,6,3
	.word	47768
	.byte	12,10,207,6,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39857
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DEADD',0,10,212,6,3
	.word	47829
	.byte	12,10,215,6,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39937
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DIEAR',0,10,220,6,3
	.word	47892
	.byte	12,10,223,6,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40006
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DIETR',0,10,228,6,3
	.word	47955
	.byte	12,10,231,6,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40235
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DMS',0,10,236,6,3
	.word	48018
	.byte	12,10,239,6,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40328
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DPR_L',0,10,244,6,3
	.word	48079
	.byte	12,10,247,6,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40423
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DPR_U',0,10,252,6,3
	.word	48142
	.byte	12,10,255,6,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40518
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DPRE',0,10,132,7,3
	.word	48205
	.byte	12,10,135,7,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40608
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DPWE',0,10,140,7,3
	.word	48267
	.byte	12,10,143,7,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40698
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_DSTR',0,10,148,7,3
	.word	48329
	.byte	12,10,151,7,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41022
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_EXEVT',0,10,156,7,3
	.word	48391
	.byte	12,10,159,7,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41176
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_FCX',0,10,164,7,3
	.word	48454
	.byte	12,10,167,7,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41282
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,10,172,7,3
	.word	48515
	.byte	12,10,175,7,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41631
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,10,180,7,3
	.word	48585
	.byte	12,10,183,7,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41791
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,10,188,7,3
	.word	48655
	.byte	12,10,191,7,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41872
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,10,196,7,3
	.word	48724
	.byte	12,10,199,7,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41959
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,10,204,7,3
	.word	48795
	.byte	12,10,207,7,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42046
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,10,212,7,3
	.word	48866
	.byte	12,10,215,7,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42133
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_ICNT',0,10,220,7,3
	.word	48937
	.byte	12,10,223,7,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42224
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_ICR',0,10,228,7,3
	.word	48999
	.byte	12,10,231,7,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42367
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_ISP',0,10,236,7,3
	.word	49060
	.byte	12,10,239,7,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42433
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_LCX',0,10,244,7,3
	.word	49121
	.byte	12,10,247,7,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42539
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_M1CNT',0,10,252,7,3
	.word	49182
	.byte	12,10,255,7,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42632
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_M2CNT',0,10,132,8,3
	.word	49245
	.byte	12,10,135,8,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42725
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_M3CNT',0,10,140,8,3
	.word	49308
	.byte	12,10,143,8,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42818
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PC',0,10,148,8,3
	.word	49371
	.byte	12,10,151,8,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42903
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PCON0',0,10,156,8,3
	.word	49431
	.byte	12,10,159,8,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43019
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PCON1',0,10,164,8,3
	.word	49494
	.byte	12,10,167,8,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43130
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PCON2',0,10,172,8,3
	.word	49557
	.byte	12,10,175,8,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43231
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PCXI',0,10,180,8,3
	.word	49620
	.byte	12,10,183,8,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43361
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PIEAR',0,10,188,8,3
	.word	49682
	.byte	12,10,191,8,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43430
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PIETR',0,10,196,8,3
	.word	49745
	.byte	12,10,199,8,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43659
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PMA0',0,10,204,8,3
	.word	49808
	.byte	12,10,207,8,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43772
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PMA1',0,10,212,8,3
	.word	49870
	.byte	12,10,215,8,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43885
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PMA2',0,10,220,8,3
	.word	49932
	.byte	12,10,223,8,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43976
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PSTR',0,10,228,8,3
	.word	49994
	.byte	12,10,231,8,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44179
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_PSW',0,10,236,8,3
	.word	50056
	.byte	12,10,239,8,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44422
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_SEGEN',0,10,244,8,3
	.word	50117
	.byte	12,10,247,8,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44550
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_SMACON',0,10,252,8,3
	.word	50180
	.byte	12,10,255,8,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44791
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_ACCENA',0,10,132,9,3
	.word	50244
	.byte	12,10,135,9,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44874
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_ACCENB',0,10,140,9,3
	.word	50314
	.byte	12,10,143,9,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44965
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA',0,10,148,9,3
	.word	50384
	.byte	12,10,151,9,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45056
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB',0,10,156,9,3
	.word	50458
	.byte	12,10,159,9,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45155
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_RGN_LA',0,10,164,9,3
	.word	50532
	.byte	12,10,167,9,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45262
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_SPROT_RGN_UA',0,10,172,9,3
	.word	50602
	.byte	12,10,175,9,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45369
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_SWEVT',0,10,180,9,3
	.word	50672
	.byte	12,10,183,9,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45523
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_SYSCON',0,10,188,9,3
	.word	50735
	.byte	12,10,191,9,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45684
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_TASK_ASI',0,10,196,9,3
	.word	50799
	.byte	12,10,199,9,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45782
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_TPS_CON',0,10,204,9,3
	.word	50865
	.byte	12,10,207,9,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45954
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_TPS_TIMER',0,10,212,9,3
	.word	50930
	.byte	12,10,215,9,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46034
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_TR_ADR',0,10,220,9,3
	.word	50997
	.byte	12,10,223,9,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46107
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_TR_EVT',0,10,228,9,3
	.word	51061
	.byte	12,10,231,9,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46425
	.byte	4,2,35,0,0,28
	.byte	'Ifx_CPU_TRIG_ACC',0,10,236,9,3
	.word	51125
	.byte	10
	.byte	'_Ifx_CPU_CPR',0,10,247,9,25,8,13
	.byte	'L',0
	.word	47015
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	47078
	.byte	4,2,35,4,0,14
	.word	51191
	.byte	28
	.byte	'Ifx_CPU_CPR',0,10,251,9,3
	.word	51233
	.byte	10
	.byte	'_Ifx_CPU_DPR',0,10,254,9,25,8,13
	.byte	'L',0
	.word	48079
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	48142
	.byte	4,2,35,4,0,14
	.word	51259
	.byte	28
	.byte	'Ifx_CPU_DPR',0,10,130,10,3
	.word	51301
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN',0,10,133,10,25,16,13
	.byte	'LA',0
	.word	50532
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	50602
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	50384
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	50458
	.byte	4,2,35,12,0,14
	.word	51327
	.byte	28
	.byte	'Ifx_CPU_SPROT_RGN',0,10,139,10,3
	.word	51409
	.byte	15,12
	.word	50930
	.byte	16,2,0,10
	.byte	'_Ifx_CPU_TPS',0,10,142,10,25,16,13
	.byte	'CON',0
	.word	50865
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	51441
	.byte	12,2,35,4,0,14
	.word	51450
	.byte	28
	.byte	'Ifx_CPU_TPS',0,10,146,10,3
	.word	51498
	.byte	10
	.byte	'_Ifx_CPU_TR',0,10,149,10,25,8,13
	.byte	'EVT',0
	.word	51061
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	50997
	.byte	4,2,35,4,0,14
	.word	51524
	.byte	28
	.byte	'Ifx_CPU_TR',0,10,153,10,3
	.word	51569
	.byte	15,176,32
	.word	587
	.byte	16,175,32,0,15,208,223,1
	.word	587
	.byte	16,207,223,1,0,15,248,1
	.word	587
	.byte	16,247,1,0,15,244,29
	.word	587
	.byte	16,243,29,0,15,188,3
	.word	587
	.byte	16,187,3,0,15,232,3
	.word	587
	.byte	16,231,3,0,15,252,23
	.word	587
	.byte	16,251,23,0,15,228,63
	.word	587
	.byte	16,227,63,0,15,128,1
	.word	51259
	.byte	16,15,0,14
	.word	51684
	.byte	15,128,31
	.word	587
	.byte	16,255,30,0,15,64
	.word	51191
	.byte	16,7,0,14
	.word	51710
	.byte	15,192,31
	.word	587
	.byte	16,191,31,0,15,16
	.word	47205
	.byte	16,3,0,15,16
	.word	48205
	.byte	16,3,0,15,16
	.word	48267
	.byte	16,3,0,15,208,7
	.word	587
	.byte	16,207,7,0,14
	.word	51450
	.byte	15,240,23
	.word	587
	.byte	16,239,23,0,15,64
	.word	51524
	.byte	16,7,0,14
	.word	51789
	.byte	15,192,23
	.word	587
	.byte	16,191,23,0,15,232,1
	.word	587
	.byte	16,231,1,0,15,180,1
	.word	587
	.byte	16,179,1,0,15,172,1
	.word	587
	.byte	16,171,1,0,15,64
	.word	47394
	.byte	16,15,0,15,64
	.word	587
	.byte	16,63,0,15,64
	.word	46620
	.byte	16,15,0,10
	.byte	'_Ifx_CPU',0,10,166,10,25,128,128,4,13
	.byte	'reserved_0',0
	.word	51594
	.byte	176,32,2,35,0,13
	.byte	'SEGEN',0
	.word	50117
	.byte	4,3,35,176,32,13
	.byte	'reserved_1034',0
	.word	51605
	.byte	208,223,1,3,35,180,32,13
	.byte	'TASK_ASI',0
	.word	50799
	.byte	4,4,35,132,128,2,13
	.byte	'reserved_8008',0
	.word	51618
	.byte	248,1,4,35,136,128,2,13
	.byte	'PMA0',0
	.word	49808
	.byte	4,4,35,128,130,2,13
	.byte	'PMA1',0
	.word	49870
	.byte	4,4,35,132,130,2,13
	.byte	'PMA2',0
	.word	49932
	.byte	4,4,35,136,130,2,13
	.byte	'reserved_810C',0
	.word	51629
	.byte	244,29,4,35,140,130,2,13
	.byte	'DCON2',0
	.word	47705
	.byte	4,4,35,128,160,2,13
	.byte	'reserved_9004',0
	.word	4474
	.byte	8,4,35,132,160,2,13
	.byte	'SMACON',0
	.word	50180
	.byte	4,4,35,140,160,2,13
	.byte	'DSTR',0
	.word	48329
	.byte	4,4,35,144,160,2,13
	.byte	'reserved_9014',0
	.word	2655
	.byte	4,4,35,148,160,2,13
	.byte	'DATR',0
	.word	47453
	.byte	4,4,35,152,160,2,13
	.byte	'DEADD',0
	.word	47829
	.byte	4,4,35,156,160,2,13
	.byte	'DIEAR',0
	.word	47892
	.byte	4,4,35,160,160,2,13
	.byte	'DIETR',0
	.word	47955
	.byte	4,4,35,164,160,2,13
	.byte	'reserved_9028',0
	.word	3845
	.byte	24,4,35,168,160,2,13
	.byte	'DCON0',0
	.word	47642
	.byte	4,4,35,192,160,2,13
	.byte	'reserved_9044',0
	.word	51640
	.byte	188,3,4,35,196,160,2,13
	.byte	'PSTR',0
	.word	49994
	.byte	4,4,35,128,164,2,13
	.byte	'PCON1',0
	.word	49494
	.byte	4,4,35,132,164,2,13
	.byte	'PCON2',0
	.word	49557
	.byte	4,4,35,136,164,2,13
	.byte	'PCON0',0
	.word	49431
	.byte	4,4,35,140,164,2,13
	.byte	'PIEAR',0
	.word	49682
	.byte	4,4,35,144,164,2,13
	.byte	'PIETR',0
	.word	49745
	.byte	4,4,35,148,164,2,13
	.byte	'reserved_9218',0
	.word	51651
	.byte	232,3,4,35,152,164,2,13
	.byte	'COMPAT',0
	.word	46926
	.byte	4,4,35,128,168,2,13
	.byte	'reserved_9404',0
	.word	51662
	.byte	252,23,4,35,132,168,2,13
	.byte	'FPU_TRAP_CON',0
	.word	48515
	.byte	4,4,35,128,192,2,13
	.byte	'FPU_TRAP_PC',0
	.word	48655
	.byte	4,4,35,132,192,2,13
	.byte	'FPU_TRAP_OPC',0
	.word	48585
	.byte	4,4,35,136,192,2,13
	.byte	'reserved_A00C',0
	.word	2655
	.byte	4,4,35,140,192,2,13
	.byte	'FPU_TRAP_SRC1',0
	.word	48724
	.byte	4,4,35,144,192,2,13
	.byte	'FPU_TRAP_SRC2',0
	.word	48795
	.byte	4,4,35,148,192,2,13
	.byte	'FPU_TRAP_SRC3',0
	.word	48866
	.byte	4,4,35,152,192,2,13
	.byte	'reserved_A01C',0
	.word	51673
	.byte	228,63,4,35,156,192,2,13
	.byte	'DPR',0
	.word	51694
	.byte	128,1,4,35,128,128,3,13
	.byte	'reserved_C080',0
	.word	51699
	.byte	128,31,4,35,128,129,3,13
	.byte	'CPR',0
	.word	51719
	.byte	64,4,35,128,160,3,13
	.byte	'reserved_D040',0
	.word	51724
	.byte	192,31,4,35,192,160,3,13
	.byte	'CPXE',0
	.word	51735
	.byte	16,4,35,128,192,3,13
	.byte	'DPRE',0
	.word	51744
	.byte	16,4,35,144,192,3,13
	.byte	'DPWE',0
	.word	51753
	.byte	16,4,35,160,192,3,13
	.byte	'reserved_E030',0
	.word	51762
	.byte	208,7,4,35,176,192,3,13
	.byte	'TPS',0
	.word	51773
	.byte	16,4,35,128,200,3,13
	.byte	'reserved_E410',0
	.word	51778
	.byte	240,23,4,35,144,200,3,13
	.byte	'TR',0
	.word	51798
	.byte	64,4,35,128,224,3,13
	.byte	'reserved_F040',0
	.word	51803
	.byte	192,23,4,35,192,224,3,13
	.byte	'CCTRL',0
	.word	46863
	.byte	4,4,35,128,248,3,13
	.byte	'CCNT',0
	.word	46801
	.byte	4,4,35,132,248,3,13
	.byte	'ICNT',0
	.word	48937
	.byte	4,4,35,136,248,3,13
	.byte	'M1CNT',0
	.word	49182
	.byte	4,4,35,140,248,3,13
	.byte	'M2CNT',0
	.word	49245
	.byte	4,4,35,144,248,3,13
	.byte	'M3CNT',0
	.word	49308
	.byte	4,4,35,148,248,3,13
	.byte	'reserved_FC18',0
	.word	51814
	.byte	232,1,4,35,152,248,3,13
	.byte	'DBGSR',0
	.word	47515
	.byte	4,4,35,128,250,3,13
	.byte	'reserved_FD04',0
	.word	2655
	.byte	4,4,35,132,250,3,13
	.byte	'EXEVT',0
	.word	48391
	.byte	4,4,35,136,250,3,13
	.byte	'CREVT',0
	.word	47267
	.byte	4,4,35,140,250,3,13
	.byte	'SWEVT',0
	.word	50672
	.byte	4,4,35,144,250,3,13
	.byte	'reserved_FD14',0
	.word	35628
	.byte	28,4,35,148,250,3,13
	.byte	'TRIG_ACC',0
	.word	51125
	.byte	4,4,35,176,250,3,13
	.byte	'reserved_FD34',0
	.word	4814
	.byte	12,4,35,180,250,3,13
	.byte	'DMS',0
	.word	48018
	.byte	4,4,35,192,250,3,13
	.byte	'DCX',0
	.word	47768
	.byte	4,4,35,196,250,3,13
	.byte	'DBGTCR',0
	.word	47578
	.byte	4,4,35,200,250,3,13
	.byte	'reserved_FD4C',0
	.word	51825
	.byte	180,1,4,35,204,250,3,13
	.byte	'PCXI',0
	.word	49620
	.byte	4,4,35,128,252,3,13
	.byte	'PSW',0
	.word	50056
	.byte	4,4,35,132,252,3,13
	.byte	'PC',0
	.word	49371
	.byte	4,4,35,136,252,3,13
	.byte	'reserved_FE0C',0
	.word	4474
	.byte	8,4,35,140,252,3,13
	.byte	'SYSCON',0
	.word	50735
	.byte	4,4,35,148,252,3,13
	.byte	'CPU_ID',0
	.word	47141
	.byte	4,4,35,152,252,3,13
	.byte	'CORE_ID',0
	.word	11345
	.byte	4,4,35,156,252,3,13
	.byte	'BIV',0
	.word	46679
	.byte	4,4,35,160,252,3,13
	.byte	'BTV',0
	.word	46740
	.byte	4,4,35,164,252,3,13
	.byte	'ISP',0
	.word	49060
	.byte	4,4,35,168,252,3,13
	.byte	'ICR',0
	.word	48999
	.byte	4,4,35,172,252,3,13
	.byte	'reserved_FE30',0
	.word	4474
	.byte	8,4,35,176,252,3,13
	.byte	'FCX',0
	.word	48454
	.byte	4,4,35,184,252,3,13
	.byte	'LCX',0
	.word	49121
	.byte	4,4,35,188,252,3,13
	.byte	'reserved_FE40',0
	.word	35619
	.byte	16,4,35,192,252,3,13
	.byte	'CUS_ID',0
	.word	47330
	.byte	4,4,35,208,252,3,13
	.byte	'reserved_FE54',0
	.word	51836
	.byte	172,1,4,35,212,252,3,13
	.byte	'D',0
	.word	51847
	.byte	64,4,35,128,254,3,13
	.byte	'reserved_FF40',0
	.word	51856
	.byte	64,4,35,192,254,3,13
	.byte	'A',0
	.word	51865
	.byte	64,4,35,128,255,3,13
	.byte	'reserved_FFC0',0
	.word	51856
	.byte	64,4,35,192,255,3,0,14
	.word	51874
	.byte	28
	.byte	'Ifx_CPU',0,10,130,11,3
	.word	53665
	.byte	17,8,127,9,1,18
	.byte	'IfxCpu_Id_0',0,0,18
	.byte	'IfxCpu_Id_1',0,1,18
	.byte	'IfxCpu_Id_none',0,2,0,28
	.byte	'IfxCpu_Id',0,8,132,1,3
	.word	53687
	.byte	28
	.byte	'IfxCpu_ResourceCpu',0,8,161,1,3
	.word	9588
	.byte	10
	.byte	'_Ifx_SRC_SRCR_Bits',0,14,45,16,4,11
	.byte	'SRPN',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	587
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	587
	.byte	2,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	587
	.byte	3,0,2,35,1,11
	.byte	'ECC',0,1
	.word	587
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	587
	.byte	2,0,2,35,2,11
	.byte	'SRR',0,1
	.word	587
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	587
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	587
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	587
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	587
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	587
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SRC_SRCR_Bits',0,14,62,3
	.word	53785
	.byte	12,14,70,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53785
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SRC_SRCR',0,14,75,3
	.word	54101
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,14,86,25,4,13
	.byte	'SR',0
	.word	54101
	.byte	4,2,35,0,0,14
	.word	54161
	.byte	28
	.byte	'Ifx_SRC_AGBT',0,14,89,3
	.word	54193
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,14,92,25,12,13
	.byte	'TX',0
	.word	54101
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	54101
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	54101
	.byte	4,2,35,8,0,14
	.word	54219
	.byte	28
	.byte	'Ifx_SRC_ASCLIN',0,14,97,3
	.word	54278
	.byte	10
	.byte	'_Ifx_SRC_BCUSPB',0,14,100,25,4,13
	.byte	'SBSRC',0
	.word	54101
	.byte	4,2,35,0,0,14
	.word	54306
	.byte	28
	.byte	'Ifx_SRC_BCUSPB',0,14,103,3
	.word	54343
	.byte	15,64
	.word	54101
	.byte	16,15,0,10
	.byte	'_Ifx_SRC_CAN',0,14,106,25,64,13
	.byte	'INT',0
	.word	54371
	.byte	64,2,35,0,0,14
	.word	54380
	.byte	28
	.byte	'Ifx_SRC_CAN',0,14,109,3
	.word	54412
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,14,112,25,16,13
	.byte	'SR0',0
	.word	54101
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	54101
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	54101
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	54101
	.byte	4,2,35,12,0,14
	.word	54437
	.byte	28
	.byte	'Ifx_SRC_CCU6',0,14,118,3
	.word	54509
	.byte	15,8
	.word	54101
	.byte	16,1,0,10
	.byte	'_Ifx_SRC_CERBERUS',0,14,121,25,8,13
	.byte	'SR',0
	.word	54535
	.byte	8,2,35,0,0,14
	.word	54544
	.byte	28
	.byte	'Ifx_SRC_CERBERUS',0,14,124,3
	.word	54580
	.byte	10
	.byte	'_Ifx_SRC_CIF',0,14,127,25,16,13
	.byte	'MI',0
	.word	54101
	.byte	4,2,35,0,13
	.byte	'MIEP',0
	.word	54101
	.byte	4,2,35,4,13
	.byte	'ISP',0
	.word	54101
	.byte	4,2,35,8,13
	.byte	'MJPEG',0
	.word	54101
	.byte	4,2,35,12,0,14
	.word	54610
	.byte	28
	.byte	'Ifx_SRC_CIF',0,14,133,1,3
	.word	54683
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,14,136,1,25,4,13
	.byte	'SBSRC',0
	.word	54101
	.byte	4,2,35,0,0,14
	.word	54709
	.byte	28
	.byte	'Ifx_SRC_CPU',0,14,139,1,3
	.word	54744
	.byte	15,192,1
	.word	54101
	.byte	16,47,0,10
	.byte	'_Ifx_SRC_DMA',0,14,142,1,25,208,1,13
	.byte	'ERR',0
	.word	54101
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	4814
	.byte	12,2,35,4,13
	.byte	'CH',0
	.word	54770
	.byte	192,1,2,35,16,0,14
	.word	54780
	.byte	28
	.byte	'Ifx_SRC_DMA',0,14,147,1,3
	.word	54847
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,14,150,1,25,8,13
	.byte	'SRM',0
	.word	54101
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	54101
	.byte	4,2,35,4,0,14
	.word	54873
	.byte	28
	.byte	'Ifx_SRC_DSADC',0,14,154,1,3
	.word	54921
	.byte	10
	.byte	'_Ifx_SRC_EMEM',0,14,157,1,25,4,13
	.byte	'SR',0
	.word	54101
	.byte	4,2,35,0,0,14
	.word	54949
	.byte	28
	.byte	'Ifx_SRC_EMEM',0,14,160,1,3
	.word	54982
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,14,163,1,25,80,13
	.byte	'INT',0
	.word	54535
	.byte	8,2,35,0,13
	.byte	'TINT',0
	.word	54535
	.byte	8,2,35,8,13
	.byte	'NDAT',0
	.word	54535
	.byte	8,2,35,16,13
	.byte	'MBSC',0
	.word	54535
	.byte	8,2,35,24,13
	.byte	'OBUSY',0
	.word	54101
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	54101
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	35637
	.byte	40,2,35,40,0,14
	.word	55009
	.byte	28
	.byte	'Ifx_SRC_ERAY',0,14,172,1,3
	.word	55136
	.byte	10
	.byte	'_Ifx_SRC_ETH',0,14,175,1,25,4,13
	.byte	'SR',0
	.word	54101
	.byte	4,2,35,0,0,14
	.word	55163
	.byte	28
	.byte	'Ifx_SRC_ETH',0,14,178,1,3
	.word	55195
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,14,181,1,25,4,13
	.byte	'SR',0
	.word	54101
	.byte	4,2,35,0,0,14
	.word	55221
	.byte	28
	.byte	'Ifx_SRC_FCE',0,14,184,1,3
	.word	55253
	.byte	10
	.byte	'_Ifx_SRC_FFT',0,14,187,1,25,12,13
	.byte	'DONE',0
	.word	54101
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	54101
	.byte	4,2,35,4,13
	.byte	'RFS',0
	.word	54101
	.byte	4,2,35,8,0,14
	.word	55279
	.byte	28
	.byte	'Ifx_SRC_FFT',0,14,192,1,3
	.word	55339
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,14,195,1,25,32,13
	.byte	'SR0',0
	.word	54101
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	54101
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	54101
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	54101
	.byte	4,2,35,12,13
	.byte	'reserved_10',0
	.word	35619
	.byte	16,2,35,16,0,14
	.word	55365
	.byte	28
	.byte	'Ifx_SRC_GPSR',0,14,202,1,3
	.word	55459
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,14,205,1,25,48,13
	.byte	'CIRQ',0
	.word	54101
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	54101
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	54101
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	54101
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	54101
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	54101
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	3845
	.byte	24,2,35,24,0,14
	.word	55486
	.byte	28
	.byte	'Ifx_SRC_GPT12',0,14,214,1,3
	.word	55603
	.byte	15,12
	.word	54101
	.byte	16,2,0,15,32
	.word	54101
	.byte	16,7,0,15,32
	.word	55640
	.byte	16,0,0,15,88
	.word	587
	.byte	16,87,0,15,108
	.word	54101
	.byte	16,26,0,15,96
	.word	587
	.byte	16,95,0,15,96
	.word	55640
	.byte	16,2,0,15,160,3
	.word	587
	.byte	16,159,3,0,15,64
	.word	55640
	.byte	16,1,0,15,192,3
	.word	587
	.byte	16,191,3,0,15,16
	.word	54101
	.byte	16,3,0,15,64
	.word	55725
	.byte	16,3,0,15,192,2
	.word	587
	.byte	16,191,2,0,15,52
	.word	587
	.byte	16,51,0,10
	.byte	'_Ifx_SRC_GTM',0,14,217,1,25,204,18,13
	.byte	'AEIIRQ',0
	.word	54101
	.byte	4,2,35,0,13
	.byte	'ARUIRQ',0
	.word	55631
	.byte	12,2,35,4,13
	.byte	'reserved_10',0
	.word	2655
	.byte	4,2,35,16,13
	.byte	'BRCIRQ',0
	.word	54101
	.byte	4,2,35,20,13
	.byte	'CMPIRQ',0
	.word	54101
	.byte	4,2,35,24,13
	.byte	'SPEIRQ',0
	.word	54535
	.byte	8,2,35,28,13
	.byte	'reserved_24',0
	.word	4474
	.byte	8,2,35,36,13
	.byte	'PSM',0
	.word	55649
	.byte	32,2,35,44,13
	.byte	'reserved_4C',0
	.word	55658
	.byte	88,2,35,76,13
	.byte	'DPLL',0
	.word	55667
	.byte	108,3,35,164,1,13
	.byte	'reserved_110',0
	.word	55676
	.byte	96,3,35,144,2,13
	.byte	'ERR',0
	.word	54101
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	4814
	.byte	12,3,35,244,2,13
	.byte	'TIM',0
	.word	55685
	.byte	96,3,35,128,3,13
	.byte	'reserved_1E0',0
	.word	55694
	.byte	160,3,3,35,224,3,13
	.byte	'MCS',0
	.word	55685
	.byte	96,3,35,128,7,13
	.byte	'reserved_3E0',0
	.word	55694
	.byte	160,3,3,35,224,7,13
	.byte	'TOM',0
	.word	55705
	.byte	64,3,35,128,11,13
	.byte	'reserved_5C0',0
	.word	55714
	.byte	192,3,3,35,192,11,13
	.byte	'ATOM',0
	.word	55734
	.byte	64,3,35,128,15,13
	.byte	'reserved_7C0',0
	.word	55743
	.byte	192,2,3,35,192,15,13
	.byte	'MCSW0',0
	.word	55631
	.byte	12,3,35,128,18,13
	.byte	'reserved_90C',0
	.word	55754
	.byte	52,3,35,140,18,13
	.byte	'MCSW1',0
	.word	55631
	.byte	12,3,35,192,18,0,14
	.word	55763
	.byte	28
	.byte	'Ifx_SRC_GTM',0,14,243,1,3
	.word	56223
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,14,246,1,25,4,13
	.byte	'SR',0
	.word	54101
	.byte	4,2,35,0,0,14
	.word	56249
	.byte	28
	.byte	'Ifx_SRC_HSCT',0,14,249,1,3
	.word	56282
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,14,252,1,25,16,13
	.byte	'COK',0
	.word	54101
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	54101
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	54101
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	54101
	.byte	4,2,35,12,0,14
	.word	56309
	.byte	28
	.byte	'Ifx_SRC_HSSL',0,14,130,2,3
	.word	56382
	.byte	15,56
	.word	587
	.byte	16,55,0,10
	.byte	'_Ifx_SRC_I2C',0,14,133,2,25,80,13
	.byte	'BREQ',0
	.word	54101
	.byte	4,2,35,0,13
	.byte	'LBREQ',0
	.word	54101
	.byte	4,2,35,4,13
	.byte	'SREQ',0
	.word	54101
	.byte	4,2,35,8,13
	.byte	'LSREQ',0
	.word	54101
	.byte	4,2,35,12,13
	.byte	'ERR',0
	.word	54101
	.byte	4,2,35,16,13
	.byte	'P',0
	.word	54101
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	56409
	.byte	56,2,35,24,0,14
	.word	56418
	.byte	28
	.byte	'Ifx_SRC_I2C',0,14,142,2,3
	.word	56541
	.byte	10
	.byte	'_Ifx_SRC_LMU',0,14,145,2,25,4,13
	.byte	'SR',0
	.word	54101
	.byte	4,2,35,0,0,14
	.word	56567
	.byte	28
	.byte	'Ifx_SRC_LMU',0,14,148,2,3
	.word	56599
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,14,151,2,25,20,13
	.byte	'SR0',0
	.word	54101
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	54101
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	54101
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	54101
	.byte	4,2,35,12,13
	.byte	'SR4',0
	.word	54101
	.byte	4,2,35,16,0,14
	.word	56625
	.byte	28
	.byte	'Ifx_SRC_MSC',0,14,158,2,3
	.word	56710
	.byte	10
	.byte	'_Ifx_SRC_PMU',0,14,161,2,25,4,13
	.byte	'SR',0
	.word	54101
	.byte	4,2,35,0,0,14
	.word	56736
	.byte	28
	.byte	'Ifx_SRC_PMU',0,14,164,2,3
	.word	56768
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,14,167,2,25,32,13
	.byte	'SR',0
	.word	55640
	.byte	32,2,35,0,0,14
	.word	56794
	.byte	28
	.byte	'Ifx_SRC_PSI5',0,14,170,2,3
	.word	56827
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,14,173,2,25,32,13
	.byte	'SR',0
	.word	55640
	.byte	32,2,35,0,0,14
	.word	56854
	.byte	28
	.byte	'Ifx_SRC_PSI5S',0,14,176,2,3
	.word	56888
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,14,179,2,25,24,13
	.byte	'TX',0
	.word	54101
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	54101
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	54101
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	54101
	.byte	4,2,35,12,13
	.byte	'HC',0
	.word	54101
	.byte	4,2,35,16,13
	.byte	'U',0
	.word	54101
	.byte	4,2,35,20,0,14
	.word	56916
	.byte	28
	.byte	'Ifx_SRC_QSPI',0,14,187,2,3
	.word	57009
	.byte	10
	.byte	'_Ifx_SRC_SCR',0,14,190,2,25,4,13
	.byte	'SR',0
	.word	54101
	.byte	4,2,35,0,0,14
	.word	57036
	.byte	28
	.byte	'Ifx_SRC_SCR',0,14,193,2,3
	.word	57068
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,14,196,2,25,20,13
	.byte	'DTS',0
	.word	54101
	.byte	4,2,35,0,13
	.byte	'ERU',0
	.word	55725
	.byte	16,2,35,4,0,14
	.word	57094
	.byte	28
	.byte	'Ifx_SRC_SCU',0,14,200,2,3
	.word	57140
	.byte	15,24
	.word	54101
	.byte	16,5,0,10
	.byte	'_Ifx_SRC_SENT',0,14,203,2,25,24,13
	.byte	'SR',0
	.word	57166
	.byte	24,2,35,0,0,14
	.word	57175
	.byte	28
	.byte	'Ifx_SRC_SENT',0,14,206,2,3
	.word	57208
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,14,209,2,25,12,13
	.byte	'SR',0
	.word	55631
	.byte	12,2,35,0,0,14
	.word	57235
	.byte	28
	.byte	'Ifx_SRC_SMU',0,14,212,2,3
	.word	57267
	.byte	10
	.byte	'_Ifx_SRC_STM',0,14,215,2,25,8,13
	.byte	'SR0',0
	.word	54101
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	54101
	.byte	4,2,35,4,0,14
	.word	57293
	.byte	28
	.byte	'Ifx_SRC_STM',0,14,219,2,3
	.word	57339
	.byte	10
	.byte	'_Ifx_SRC_VADCCG',0,14,222,2,25,16,13
	.byte	'SR0',0
	.word	54101
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	54101
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	54101
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	54101
	.byte	4,2,35,12,0,14
	.word	57365
	.byte	28
	.byte	'Ifx_SRC_VADCCG',0,14,228,2,3
	.word	57440
	.byte	10
	.byte	'_Ifx_SRC_VADCG',0,14,231,2,25,16,13
	.byte	'SR0',0
	.word	54101
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	54101
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	54101
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	54101
	.byte	4,2,35,12,0,14
	.word	57469
	.byte	28
	.byte	'Ifx_SRC_VADCG',0,14,237,2,3
	.word	57543
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,14,240,2,25,4,13
	.byte	'SRC',0
	.word	54101
	.byte	4,2,35,0,0,14
	.word	57571
	.byte	28
	.byte	'Ifx_SRC_XBAR',0,14,243,2,3
	.word	57605
	.byte	15,4
	.word	54161
	.byte	16,0,0,14
	.word	57632
	.byte	10
	.byte	'_Ifx_SRC_GAGBT',0,14,128,3,25,4,13
	.byte	'AGBT',0
	.word	57641
	.byte	4,2,35,0,0,14
	.word	57646
	.byte	28
	.byte	'Ifx_SRC_GAGBT',0,14,131,3,3
	.word	57682
	.byte	15,48
	.word	54219
	.byte	16,3,0,14
	.word	57710
	.byte	10
	.byte	'_Ifx_SRC_GASCLIN',0,14,134,3,25,48,13
	.byte	'ASCLIN',0
	.word	57719
	.byte	48,2,35,0,0,14
	.word	57724
	.byte	28
	.byte	'Ifx_SRC_GASCLIN',0,14,137,3,3
	.word	57764
	.byte	14
	.word	54306
	.byte	10
	.byte	'_Ifx_SRC_GBCU',0,14,140,3,25,4,13
	.byte	'SPB',0
	.word	57794
	.byte	4,2,35,0,0,14
	.word	57799
	.byte	28
	.byte	'Ifx_SRC_GBCU',0,14,143,3,3
	.word	57833
	.byte	15,64
	.word	54380
	.byte	16,0,0,14
	.word	57860
	.byte	10
	.byte	'_Ifx_SRC_GCAN',0,14,146,3,25,64,13
	.byte	'CAN',0
	.word	57869
	.byte	64,2,35,0,0,14
	.word	57874
	.byte	28
	.byte	'Ifx_SRC_GCAN',0,14,149,3,3
	.word	57908
	.byte	15,32
	.word	54437
	.byte	16,1,0,14
	.word	57935
	.byte	10
	.byte	'_Ifx_SRC_GCCU6',0,14,152,3,25,32,13
	.byte	'CCU6',0
	.word	57944
	.byte	32,2,35,0,0,14
	.word	57949
	.byte	28
	.byte	'Ifx_SRC_GCCU6',0,14,155,3,3
	.word	57985
	.byte	14
	.word	54544
	.byte	10
	.byte	'_Ifx_SRC_GCERBERUS',0,14,158,3,25,8,13
	.byte	'CERBERUS',0
	.word	58013
	.byte	8,2,35,0,0,14
	.word	58018
	.byte	28
	.byte	'Ifx_SRC_GCERBERUS',0,14,161,3,3
	.word	58062
	.byte	15,16
	.word	54610
	.byte	16,0,0,14
	.word	58094
	.byte	10
	.byte	'_Ifx_SRC_GCIF',0,14,164,3,25,16,13
	.byte	'CIF',0
	.word	58103
	.byte	16,2,35,0,0,14
	.word	58108
	.byte	28
	.byte	'Ifx_SRC_GCIF',0,14,167,3,3
	.word	58142
	.byte	15,8
	.word	54709
	.byte	16,1,0,14
	.word	58169
	.byte	10
	.byte	'_Ifx_SRC_GCPU',0,14,170,3,25,8,13
	.byte	'CPU',0
	.word	58178
	.byte	8,2,35,0,0,14
	.word	58183
	.byte	28
	.byte	'Ifx_SRC_GCPU',0,14,173,3,3
	.word	58217
	.byte	15,208,1
	.word	54780
	.byte	16,0,0,14
	.word	58244
	.byte	10
	.byte	'_Ifx_SRC_GDMA',0,14,176,3,25,208,1,13
	.byte	'DMA',0
	.word	58254
	.byte	208,1,2,35,0,0,14
	.word	58259
	.byte	28
	.byte	'Ifx_SRC_GDMA',0,14,179,3,3
	.word	58295
	.byte	14
	.word	54873
	.byte	14
	.word	54873
	.byte	14
	.word	54873
	.byte	10
	.byte	'_Ifx_SRC_GDSADC',0,14,182,3,25,32,13
	.byte	'DSADC0',0
	.word	58322
	.byte	8,2,35,0,13
	.byte	'reserved_8',0
	.word	4474
	.byte	8,2,35,8,13
	.byte	'DSADC2',0
	.word	58327
	.byte	8,2,35,16,13
	.byte	'DSADC3',0
	.word	58332
	.byte	8,2,35,24,0,14
	.word	58337
	.byte	28
	.byte	'Ifx_SRC_GDSADC',0,14,188,3,3
	.word	58428
	.byte	15,4
	.word	54949
	.byte	16,0,0,14
	.word	58457
	.byte	10
	.byte	'_Ifx_SRC_GEMEM',0,14,191,3,25,4,13
	.byte	'EMEM',0
	.word	58466
	.byte	4,2,35,0,0,14
	.word	58471
	.byte	28
	.byte	'Ifx_SRC_GEMEM',0,14,194,3,3
	.word	58507
	.byte	15,80
	.word	55009
	.byte	16,0,0,14
	.word	58535
	.byte	10
	.byte	'_Ifx_SRC_GERAY',0,14,197,3,25,80,13
	.byte	'ERAY',0
	.word	58544
	.byte	80,2,35,0,0,14
	.word	58549
	.byte	28
	.byte	'Ifx_SRC_GERAY',0,14,200,3,3
	.word	58585
	.byte	15,4
	.word	55163
	.byte	16,0,0,14
	.word	58613
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,14,203,3,25,4,13
	.byte	'ETH',0
	.word	58622
	.byte	4,2,35,0,0,14
	.word	58627
	.byte	28
	.byte	'Ifx_SRC_GETH',0,14,206,3,3
	.word	58661
	.byte	15,4
	.word	55221
	.byte	16,0,0,14
	.word	58688
	.byte	10
	.byte	'_Ifx_SRC_GFCE',0,14,209,3,25,4,13
	.byte	'FCE',0
	.word	58697
	.byte	4,2,35,0,0,14
	.word	58702
	.byte	28
	.byte	'Ifx_SRC_GFCE',0,14,212,3,3
	.word	58736
	.byte	15,12
	.word	55279
	.byte	16,0,0,14
	.word	58763
	.byte	10
	.byte	'_Ifx_SRC_GFFT',0,14,215,3,25,12,13
	.byte	'FFT',0
	.word	58772
	.byte	12,2,35,0,0,14
	.word	58777
	.byte	28
	.byte	'Ifx_SRC_GFFT',0,14,218,3,3
	.word	58811
	.byte	15,64
	.word	55365
	.byte	16,1,0,14
	.word	58838
	.byte	10
	.byte	'_Ifx_SRC_GGPSR',0,14,221,3,25,64,13
	.byte	'GPSR',0
	.word	58847
	.byte	64,2,35,0,0,14
	.word	58852
	.byte	28
	.byte	'Ifx_SRC_GGPSR',0,14,224,3,3
	.word	58888
	.byte	15,48
	.word	55486
	.byte	16,0,0,14
	.word	58916
	.byte	10
	.byte	'_Ifx_SRC_GGPT12',0,14,227,3,25,48,13
	.byte	'GPT12',0
	.word	58925
	.byte	48,2,35,0,0,14
	.word	58930
	.byte	28
	.byte	'Ifx_SRC_GGPT12',0,14,230,3,3
	.word	58968
	.byte	15,204,18
	.word	55763
	.byte	16,0,0,14
	.word	58997
	.byte	10
	.byte	'_Ifx_SRC_GGTM',0,14,233,3,25,204,18,13
	.byte	'GTM',0
	.word	59007
	.byte	204,18,2,35,0,0,14
	.word	59012
	.byte	28
	.byte	'Ifx_SRC_GGTM',0,14,236,3,3
	.word	59048
	.byte	15,4
	.word	56249
	.byte	16,0,0,14
	.word	59075
	.byte	10
	.byte	'_Ifx_SRC_GHSCT',0,14,239,3,25,4,13
	.byte	'HSCT',0
	.word	59084
	.byte	4,2,35,0,0,14
	.word	59089
	.byte	28
	.byte	'Ifx_SRC_GHSCT',0,14,242,3,3
	.word	59125
	.byte	15,64
	.word	56309
	.byte	16,3,0,14
	.word	59153
	.byte	10
	.byte	'_Ifx_SRC_GHSSL',0,14,245,3,25,68,13
	.byte	'HSSL',0
	.word	59162
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	54101
	.byte	4,2,35,64,0,14
	.word	59167
	.byte	28
	.byte	'Ifx_SRC_GHSSL',0,14,249,3,3
	.word	59216
	.byte	15,80
	.word	56418
	.byte	16,0,0,14
	.word	59244
	.byte	10
	.byte	'_Ifx_SRC_GI2C',0,14,252,3,25,80,13
	.byte	'I2C',0
	.word	59253
	.byte	80,2,35,0,0,14
	.word	59258
	.byte	28
	.byte	'Ifx_SRC_GI2C',0,14,255,3,3
	.word	59292
	.byte	15,4
	.word	56567
	.byte	16,0,0,14
	.word	59319
	.byte	10
	.byte	'_Ifx_SRC_GLMU',0,14,130,4,25,4,13
	.byte	'LMU',0
	.word	59328
	.byte	4,2,35,0,0,14
	.word	59333
	.byte	28
	.byte	'Ifx_SRC_GLMU',0,14,133,4,3
	.word	59367
	.byte	15,40
	.word	56625
	.byte	16,1,0,14
	.word	59394
	.byte	10
	.byte	'_Ifx_SRC_GMSC',0,14,136,4,25,40,13
	.byte	'MSC',0
	.word	59403
	.byte	40,2,35,0,0,14
	.word	59408
	.byte	28
	.byte	'Ifx_SRC_GMSC',0,14,139,4,3
	.word	59442
	.byte	15,8
	.word	56736
	.byte	16,1,0,14
	.word	59469
	.byte	10
	.byte	'_Ifx_SRC_GPMU',0,14,142,4,25,8,13
	.byte	'PMU',0
	.word	59478
	.byte	8,2,35,0,0,14
	.word	59483
	.byte	28
	.byte	'Ifx_SRC_GPMU',0,14,145,4,3
	.word	59517
	.byte	15,32
	.word	56794
	.byte	16,0,0,14
	.word	59544
	.byte	10
	.byte	'_Ifx_SRC_GPSI5',0,14,148,4,25,32,13
	.byte	'PSI5',0
	.word	59553
	.byte	32,2,35,0,0,14
	.word	59558
	.byte	28
	.byte	'Ifx_SRC_GPSI5',0,14,151,4,3
	.word	59594
	.byte	15,32
	.word	56854
	.byte	16,0,0,14
	.word	59622
	.byte	10
	.byte	'_Ifx_SRC_GPSI5S',0,14,154,4,25,32,13
	.byte	'PSI5S',0
	.word	59631
	.byte	32,2,35,0,0,14
	.word	59636
	.byte	28
	.byte	'Ifx_SRC_GPSI5S',0,14,157,4,3
	.word	59674
	.byte	15,96
	.word	56916
	.byte	16,3,0,14
	.word	59703
	.byte	10
	.byte	'_Ifx_SRC_GQSPI',0,14,160,4,25,96,13
	.byte	'QSPI',0
	.word	59712
	.byte	96,2,35,0,0,14
	.word	59717
	.byte	28
	.byte	'Ifx_SRC_GQSPI',0,14,163,4,3
	.word	59753
	.byte	15,4
	.word	57036
	.byte	16,0,0,14
	.word	59781
	.byte	10
	.byte	'_Ifx_SRC_GSCR',0,14,166,4,25,4,13
	.byte	'SCR',0
	.word	59790
	.byte	4,2,35,0,0,14
	.word	59795
	.byte	28
	.byte	'Ifx_SRC_GSCR',0,14,169,4,3
	.word	59829
	.byte	14
	.word	57094
	.byte	10
	.byte	'_Ifx_SRC_GSCU',0,14,172,4,25,20,13
	.byte	'SCU',0
	.word	59856
	.byte	20,2,35,0,0,14
	.word	59861
	.byte	28
	.byte	'Ifx_SRC_GSCU',0,14,175,4,3
	.word	59895
	.byte	15,24
	.word	57175
	.byte	16,0,0,14
	.word	59922
	.byte	10
	.byte	'_Ifx_SRC_GSENT',0,14,178,4,25,24,13
	.byte	'SENT',0
	.word	59931
	.byte	24,2,35,0,0,14
	.word	59936
	.byte	28
	.byte	'Ifx_SRC_GSENT',0,14,181,4,3
	.word	59972
	.byte	15,12
	.word	57235
	.byte	16,0,0,14
	.word	60000
	.byte	10
	.byte	'_Ifx_SRC_GSMU',0,14,184,4,25,12,13
	.byte	'SMU',0
	.word	60009
	.byte	12,2,35,0,0,14
	.word	60014
	.byte	28
	.byte	'Ifx_SRC_GSMU',0,14,187,4,3
	.word	60048
	.byte	15,16
	.word	57293
	.byte	16,1,0,14
	.word	60075
	.byte	10
	.byte	'_Ifx_SRC_GSTM',0,14,190,4,25,16,13
	.byte	'STM',0
	.word	60084
	.byte	16,2,35,0,0,14
	.word	60089
	.byte	28
	.byte	'Ifx_SRC_GSTM',0,14,193,4,3
	.word	60123
	.byte	15,64
	.word	57469
	.byte	16,3,0,14
	.word	60150
	.byte	15,224,1
	.word	587
	.byte	16,223,1,0,15,32
	.word	57365
	.byte	16,1,0,14
	.word	60175
	.byte	10
	.byte	'_Ifx_SRC_GVADC',0,14,196,4,25,192,2,13
	.byte	'G',0
	.word	60159
	.byte	64,2,35,0,13
	.byte	'reserved_40',0
	.word	60164
	.byte	224,1,2,35,64,13
	.byte	'CG',0
	.word	60184
	.byte	32,3,35,160,2,0,14
	.word	60189
	.byte	28
	.byte	'Ifx_SRC_GVADC',0,14,201,4,3
	.word	60258
	.byte	14
	.word	57571
	.byte	10
	.byte	'_Ifx_SRC_GXBAR',0,14,204,4,25,4,13
	.byte	'XBAR',0
	.word	60286
	.byte	4,2,35,0,0,14
	.word	60291
	.byte	28
	.byte	'Ifx_SRC_GXBAR',0,14,207,4,3
	.word	60327
	.byte	10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,15,45,16,4,11
	.byte	'EN0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	587
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	587
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	587
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	587
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	587
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	587
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	587
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	587
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	587
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	587
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	587
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	587
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	587
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	587
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	587
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_STM_ACCEN0_Bits',0,15,79,3
	.word	60355
	.byte	10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,15,82,16,4,11
	.byte	'reserved_0',0,4
	.word	412
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_ACCEN1_Bits',0,15,85,3
	.word	60912
	.byte	10
	.byte	'_Ifx_STM_CAP_Bits',0,15,88,16,4,11
	.byte	'STMCAP63_32',0,4
	.word	412
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_CAP_Bits',0,15,91,3
	.word	60989
	.byte	10
	.byte	'_Ifx_STM_CAPSV_Bits',0,15,94,16,4,11
	.byte	'STMCAP63_32',0,4
	.word	412
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_CAPSV_Bits',0,15,97,3
	.word	61061
	.byte	10
	.byte	'_Ifx_STM_CLC_Bits',0,15,100,16,4,11
	.byte	'DISR',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	412
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_STM_CLC_Bits',0,15,107,3
	.word	61137
	.byte	10
	.byte	'_Ifx_STM_CMCON_Bits',0,15,110,16,4,11
	.byte	'MSIZE0',0,1
	.word	587
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	587
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	587
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	587
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	587
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	587
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	587
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	587
	.byte	3,0,2,35,3,0,28
	.byte	'Ifx_STM_CMCON_Bits',0,15,120,3
	.word	61278
	.byte	10
	.byte	'_Ifx_STM_CMP_Bits',0,15,123,16,4,11
	.byte	'CMPVAL',0,4
	.word	412
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_CMP_Bits',0,15,126,3
	.word	61496
	.byte	10
	.byte	'_Ifx_STM_ICR_Bits',0,15,129,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	412
	.byte	25,0,2,35,0,0,28
	.byte	'Ifx_STM_ICR_Bits',0,15,139,1,3
	.word	61563
	.byte	10
	.byte	'_Ifx_STM_ID_Bits',0,15,142,1,16,4,11
	.byte	'MODREV',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	604
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_STM_ID_Bits',0,15,147,1,3
	.word	61766
	.byte	10
	.byte	'_Ifx_STM_ISCR_Bits',0,15,150,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	412
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_STM_ISCR_Bits',0,15,157,1,3
	.word	61873
	.byte	10
	.byte	'_Ifx_STM_KRST0_Bits',0,15,160,1,16,4,11
	.byte	'RST',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	412
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_STM_KRST0_Bits',0,15,165,1,3
	.word	62024
	.byte	10
	.byte	'_Ifx_STM_KRST1_Bits',0,15,168,1,16,4,11
	.byte	'RST',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	412
	.byte	31,0,2,35,0,0,28
	.byte	'Ifx_STM_KRST1_Bits',0,15,172,1,3
	.word	62135
	.byte	10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,15,175,1,16,4,11
	.byte	'CLR',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	412
	.byte	31,0,2,35,0,0,28
	.byte	'Ifx_STM_KRSTCLR_Bits',0,15,179,1,3
	.word	62227
	.byte	10
	.byte	'_Ifx_STM_OCS_Bits',0,15,182,1,16,4,11
	.byte	'reserved_0',0,4
	.word	412
	.byte	24,8,2,35,0,11
	.byte	'SUS',0,1
	.word	587
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	587
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	587
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	587
	.byte	2,0,2,35,3,0,28
	.byte	'Ifx_STM_OCS_Bits',0,15,189,1,3
	.word	62323
	.byte	10
	.byte	'_Ifx_STM_TIM0_Bits',0,15,192,1,16,4,11
	.byte	'STM31_0',0,4
	.word	412
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_TIM0_Bits',0,15,195,1,3
	.word	62469
	.byte	10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,15,198,1,16,4,11
	.byte	'STM31_0',0,4
	.word	412
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_TIM0SV_Bits',0,15,201,1,3
	.word	62541
	.byte	10
	.byte	'_Ifx_STM_TIM1_Bits',0,15,204,1,16,4,11
	.byte	'STM35_4',0,4
	.word	412
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_TIM1_Bits',0,15,207,1,3
	.word	62617
	.byte	10
	.byte	'_Ifx_STM_TIM2_Bits',0,15,210,1,16,4,11
	.byte	'STM39_8',0,4
	.word	412
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_TIM2_Bits',0,15,213,1,3
	.word	62689
	.byte	10
	.byte	'_Ifx_STM_TIM3_Bits',0,15,216,1,16,4,11
	.byte	'STM43_12',0,4
	.word	412
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_TIM3_Bits',0,15,219,1,3
	.word	62761
	.byte	10
	.byte	'_Ifx_STM_TIM4_Bits',0,15,222,1,16,4,11
	.byte	'STM47_16',0,4
	.word	412
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_TIM4_Bits',0,15,225,1,3
	.word	62834
	.byte	10
	.byte	'_Ifx_STM_TIM5_Bits',0,15,228,1,16,4,11
	.byte	'STM51_20',0,4
	.word	412
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_TIM5_Bits',0,15,231,1,3
	.word	62907
	.byte	10
	.byte	'_Ifx_STM_TIM6_Bits',0,15,234,1,16,4,11
	.byte	'STM63_32',0,4
	.word	412
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_STM_TIM6_Bits',0,15,237,1,3
	.word	62980
	.byte	12,15,245,1,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60355
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_ACCEN0',0,15,250,1,3
	.word	63053
	.byte	12,15,253,1,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60912
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_ACCEN1',0,15,130,2,3
	.word	63117
	.byte	12,15,133,2,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60989
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_CAP',0,15,138,2,3
	.word	63181
	.byte	12,15,141,2,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61061
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_CAPSV',0,15,146,2,3
	.word	63242
	.byte	12,15,149,2,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61137
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_CLC',0,15,154,2,3
	.word	63305
	.byte	12,15,157,2,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61278
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_CMCON',0,15,162,2,3
	.word	63366
	.byte	12,15,165,2,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61496
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_CMP',0,15,170,2,3
	.word	63429
	.byte	12,15,173,2,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61563
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_ICR',0,15,178,2,3
	.word	63490
	.byte	12,15,181,2,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61766
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_ID',0,15,186,2,3
	.word	63551
	.byte	12,15,189,2,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61873
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_ISCR',0,15,194,2,3
	.word	63611
	.byte	12,15,197,2,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62024
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_KRST0',0,15,202,2,3
	.word	63673
	.byte	12,15,205,2,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62135
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_KRST1',0,15,210,2,3
	.word	63736
	.byte	12,15,213,2,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62227
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_KRSTCLR',0,15,218,2,3
	.word	63799
	.byte	12,15,221,2,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62323
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_OCS',0,15,226,2,3
	.word	63864
	.byte	12,15,229,2,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62469
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_TIM0',0,15,234,2,3
	.word	63925
	.byte	12,15,237,2,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62541
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_TIM0SV',0,15,242,2,3
	.word	63987
	.byte	12,15,245,2,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62617
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_TIM1',0,15,250,2,3
	.word	64051
	.byte	12,15,253,2,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62689
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_TIM2',0,15,130,3,3
	.word	64113
	.byte	12,15,133,3,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62761
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_TIM3',0,15,138,3,3
	.word	64175
	.byte	12,15,141,3,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62834
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_TIM4',0,15,146,3,3
	.word	64237
	.byte	12,15,149,3,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62907
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_TIM5',0,15,154,3,3
	.word	64299
	.byte	12,15,157,3,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62980
	.byte	4,2,35,0,0,28
	.byte	'Ifx_STM_TIM6',0,15,162,3,3
	.word	64361
	.byte	10
	.byte	'_Ifx_FLASH_ACCEN0_Bits',0,16,45,16,4,11
	.byte	'EN0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	587
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	587
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	587
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	587
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	587
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	587
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	587
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	587
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	587
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	587
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	587
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	587
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	587
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	587
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	587
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_ACCEN0_Bits',0,16,79,3
	.word	64423
	.byte	10
	.byte	'_Ifx_FLASH_ACCEN1_Bits',0,16,82,16,4,11
	.byte	'reserved_0',0,4
	.word	412
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_FLASH_ACCEN1_Bits',0,16,85,3
	.word	64984
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_CFG_Bits',0,16,88,16,4,11
	.byte	'SEL',0,1
	.word	587
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	587
	.byte	2,0,2,35,0,11
	.byte	'CLR',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'DIS',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	412
	.byte	22,0,2,35,0,0,28
	.byte	'Ifx_FLASH_CBAB_CFG_Bits',0,16,95,3
	.word	65065
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_STAT_Bits',0,16,98,16,4,11
	.byte	'VLD0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'VLD1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'VLD2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'VLD3',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'VLD4',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'VLD5',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'VLD6',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'VLD7',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'VLD8',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'VLD9',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	412
	.byte	22,0,2,35,0,0,28
	.byte	'Ifx_FLASH_CBAB_STAT_Bits',0,16,111,3
	.word	65218
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_TOP_Bits',0,16,114,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	412
	.byte	19,8,2,35,0,11
	.byte	'ERR',0,1
	.word	587
	.byte	6,2,2,35,3,11
	.byte	'VLD',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'CLR',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_CBAB_TOP_Bits',0,16,121,3
	.word	65466
	.byte	10
	.byte	'_Ifx_FLASH_COMM0_Bits',0,16,124,16,4,11
	.byte	'STATUS',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	412
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_FLASH_COMM0_Bits',0,16,128,1,3
	.word	65612
	.byte	10
	.byte	'_Ifx_FLASH_COMM1_Bits',0,16,131,1,16,4,11
	.byte	'STATUS',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'DATA',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_FLASH_COMM1_Bits',0,16,136,1,3
	.word	65710
	.byte	10
	.byte	'_Ifx_FLASH_COMM2_Bits',0,16,139,1,16,4,11
	.byte	'STATUS',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'DATA',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_FLASH_COMM2_Bits',0,16,144,1,3
	.word	65826
	.byte	10
	.byte	'_Ifx_FLASH_ECCRD_Bits',0,16,147,1,16,4,11
	.byte	'RCODE',0,4
	.word	412
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	604
	.byte	8,2,2,35,2,11
	.byte	'EDCERRINJ',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'ECCORDIS',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_ECCRD_Bits',0,16,153,1,3
	.word	65942
	.byte	10
	.byte	'_Ifx_FLASH_ECCRP_Bits',0,16,156,1,16,4,11
	.byte	'RCODE',0,4
	.word	412
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	604
	.byte	8,2,2,35,2,11
	.byte	'EDCERRINJ',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'ECCORDIS',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_ECCRP_Bits',0,16,162,1,3
	.word	66082
	.byte	10
	.byte	'_Ifx_FLASH_ECCW_Bits',0,16,165,1,16,4,11
	.byte	'WCODE',0,4
	.word	412
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	604
	.byte	8,2,2,35,2,11
	.byte	'DECENCDIS',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'PECENCDIS',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_ECCW_Bits',0,16,171,1,3
	.word	66222
	.byte	10
	.byte	'_Ifx_FLASH_FCON_Bits',0,16,174,1,16,4,11
	.byte	'WSPFLASH',0,1
	.word	587
	.byte	4,4,2,35,0,11
	.byte	'WSECPF',0,1
	.word	587
	.byte	2,2,2,35,0,11
	.byte	'WSDFLASH',0,2
	.word	604
	.byte	6,4,2,35,0,11
	.byte	'WSECDF',0,1
	.word	587
	.byte	3,1,2,35,1,11
	.byte	'IDLE',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'ESLDIS',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'SLEEP',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'NSAFECC',0,1
	.word	587
	.byte	1,5,2,35,2,11
	.byte	'STALL',0,1
	.word	587
	.byte	1,4,2,35,2,11
	.byte	'RES21',0,1
	.word	587
	.byte	2,2,2,35,2,11
	.byte	'RES23',0,1
	.word	587
	.byte	2,0,2,35,2,11
	.byte	'VOPERM',0,1
	.word	587
	.byte	1,7,2,35,3,11
	.byte	'SQERM',0,1
	.word	587
	.byte	1,6,2,35,3,11
	.byte	'PROERM',0,1
	.word	587
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	587
	.byte	3,2,2,35,3,11
	.byte	'PR5V',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'EOBM',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_FCON_Bits',0,16,193,1,3
	.word	66361
	.byte	10
	.byte	'_Ifx_FLASH_FPRO_Bits',0,16,196,1,16,4,11
	.byte	'PROINP',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'PRODISP',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'PROIND',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'PRODISD',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'PROINHSMCOTP',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'RES5',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'PROINOTP',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'RES7',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'PROINDBG',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'PRODISDBG',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'PROINHSM',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	587
	.byte	5,0,2,35,1,11
	.byte	'DCFP',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'DDFP',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'DDFPX',0,1
	.word	587
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	587
	.byte	1,4,2,35,2,11
	.byte	'DDFD',0,1
	.word	587
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	587
	.byte	1,2,2,35,2,11
	.byte	'ENPE',0,1
	.word	587
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	587
	.byte	8,0,2,35,3,0,28
	.byte	'Ifx_FLASH_FPRO_Bits',0,16,218,1,3
	.word	66723
	.byte	10
	.byte	'_Ifx_FLASH_FSR_Bits',0,16,221,1,16,4,11
	.byte	'FABUSY',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'D0BUSY',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'RES1',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'P0BUSY',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'P1BUSY',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'RES5',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'RES6',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'PROG',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'ERASE',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'PFPAGE',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'DFPAGE',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'OPER',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'SQER',0,1
	.word	587
	.byte	1,3,2,35,1,11
	.byte	'PROER',0,1
	.word	587
	.byte	1,2,2,35,1,11
	.byte	'PFSBER',0,1
	.word	587
	.byte	1,1,2,35,1,11
	.byte	'PFDBER',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'PFMBER',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'RES17',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'DFSBER',0,1
	.word	587
	.byte	1,5,2,35,2,11
	.byte	'DFDBER',0,1
	.word	587
	.byte	1,4,2,35,2,11
	.byte	'DFTBER',0,1
	.word	587
	.byte	1,3,2,35,2,11
	.byte	'DFMBER',0,1
	.word	587
	.byte	1,2,2,35,2,11
	.byte	'SRIADDERR',0,1
	.word	587
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	604
	.byte	2,7,2,35,2,11
	.byte	'PVER',0,1
	.word	587
	.byte	1,6,2,35,3,11
	.byte	'EVER',0,1
	.word	587
	.byte	1,5,2,35,3,11
	.byte	'SPND',0,1
	.word	587
	.byte	1,4,2,35,3,11
	.byte	'SLM',0,1
	.word	587
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	587
	.byte	1,2,2,35,3,11
	.byte	'ORIER',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_FSR_Bits',0,16,254,1,3
	.word	67164
	.byte	10
	.byte	'_Ifx_FLASH_ID_Bits',0,16,129,2,16,4,11
	.byte	'MODREV',0,1
	.word	587
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	587
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	604
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_FLASH_ID_Bits',0,16,134,2,3
	.word	67770
	.byte	10
	.byte	'_Ifx_FLASH_MARD_Bits',0,16,137,2,16,4,11
	.byte	'HMARGIN',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'SELD0',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'SPND',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'SPNDERR',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,2
	.word	604
	.byte	10,1,2,35,0,11
	.byte	'TRAPDIS',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_FLASH_MARD_Bits',0,16,147,2,3
	.word	67881
	.byte	10
	.byte	'_Ifx_FLASH_MARP_Bits',0,16,150,2,16,4,11
	.byte	'SELP0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'SELP1',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'RES2',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'RES3',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	604
	.byte	11,1,2,35,0,11
	.byte	'TRAPDIS',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_FLASH_MARP_Bits',0,16,159,2,3
	.word	68095
	.byte	10
	.byte	'_Ifx_FLASH_PROCOND_Bits',0,16,162,2,16,4,11
	.byte	'L',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'NSAFECC',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'RAMIN',0,1
	.word	587
	.byte	2,4,2,35,0,11
	.byte	'RAMINSEL',0,1
	.word	587
	.byte	4,0,2,35,0,11
	.byte	'OSCCFG',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'MODE',0,1
	.word	587
	.byte	2,5,2,35,1,11
	.byte	'APREN',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'CAP0EN',0,1
	.word	587
	.byte	1,3,2,35,1,11
	.byte	'CAP1EN',0,1
	.word	587
	.byte	1,2,2,35,1,11
	.byte	'CAP2EN',0,1
	.word	587
	.byte	1,1,2,35,1,11
	.byte	'CAP3EN',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'ESR0CNT',0,2
	.word	604
	.byte	12,4,2,35,2,11
	.byte	'RES29',0,1
	.word	587
	.byte	2,2,2,35,3,11
	.byte	'RES30',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'RPRO',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_PROCOND_Bits',0,16,179,2,3
	.word	68282
	.byte	10
	.byte	'_Ifx_FLASH_PROCONDBG_Bits',0,16,182,2,16,4,11
	.byte	'OCDSDIS',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'DBGIFLCK',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'EDM',0,1
	.word	587
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	412
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_FLASH_PROCONDBG_Bits',0,16,188,2,3
	.word	68606
	.byte	10
	.byte	'_Ifx_FLASH_PROCONHSM_Bits',0,16,191,2,16,4,11
	.byte	'HSMDBGDIS',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'DBGIFLCK',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'TSTIFLCK',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'HSMTSTDIS',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'RES15',0,2
	.word	604
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	604
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_FLASH_PROCONHSM_Bits',0,16,199,2,3
	.word	68749
	.byte	10
	.byte	'_Ifx_FLASH_PROCONHSMCOTP_Bits',0,16,202,2,16,4,11
	.byte	'HSMBOOTEN',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'SSWWAIT',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'HSMDX',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'HSM6X',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'HSM16X',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'HSM17X',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'S6ROM',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'HSMENPINS',0,2
	.word	604
	.byte	2,7,2,35,0,11
	.byte	'HSMENRES',0,1
	.word	587
	.byte	2,5,2,35,1,11
	.byte	'DESTDBG',0,1
	.word	587
	.byte	2,3,2,35,1,11
	.byte	'BLKFLAN',0,1
	.word	587
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	587
	.byte	2,0,2,35,1,11
	.byte	'S16ROM',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'S17ROM',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	604
	.byte	14,0,2,35,2,0,28
	.byte	'Ifx_FLASH_PROCONHSMCOTP_Bits',0,16,219,2,3
	.word	68938
	.byte	10
	.byte	'_Ifx_FLASH_PROCONOTP_Bits',0,16,222,2,16,4,11
	.byte	'S0ROM',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'S1ROM',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'S2ROM',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'S3ROM',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'S4ROM',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'S5ROM',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'S6ROM',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'S7ROM',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'S8ROM',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'S9ROM',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'S10ROM',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'S11ROM',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'S12ROM',0,1
	.word	587
	.byte	1,3,2,35,1,11
	.byte	'S13ROM',0,1
	.word	587
	.byte	1,2,2,35,1,11
	.byte	'S14ROM',0,1
	.word	587
	.byte	1,1,2,35,1,11
	.byte	'S15ROM',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'S16ROM',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'S17ROM',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'S18ROM',0,1
	.word	587
	.byte	1,5,2,35,2,11
	.byte	'S19ROM',0,1
	.word	587
	.byte	1,4,2,35,2,11
	.byte	'S20ROM',0,1
	.word	587
	.byte	1,3,2,35,2,11
	.byte	'S21ROM',0,1
	.word	587
	.byte	1,2,2,35,2,11
	.byte	'S22ROM',0,1
	.word	587
	.byte	1,1,2,35,2,11
	.byte	'S23ROM',0,1
	.word	587
	.byte	1,0,2,35,2,11
	.byte	'S24ROM',0,1
	.word	587
	.byte	1,7,2,35,3,11
	.byte	'S25ROM',0,1
	.word	587
	.byte	1,6,2,35,3,11
	.byte	'S26ROM',0,1
	.word	587
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	587
	.byte	2,3,2,35,3,11
	.byte	'BML',0,1
	.word	587
	.byte	2,1,2,35,3,11
	.byte	'TP',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_PROCONOTP_Bits',0,16,254,2,3
	.word	69301
	.byte	10
	.byte	'_Ifx_FLASH_PROCONP_Bits',0,16,129,3,16,4,11
	.byte	'S0L',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'S1L',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'S2L',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'S3L',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'S4L',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'S5L',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'S6L',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'S7L',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'S8L',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'S9L',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'S10L',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'S11L',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'S12L',0,1
	.word	587
	.byte	1,3,2,35,1,11
	.byte	'S13L',0,1
	.word	587
	.byte	1,2,2,35,1,11
	.byte	'S14L',0,1
	.word	587
	.byte	1,1,2,35,1,11
	.byte	'S15L',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'S16L',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'S17L',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'S18L',0,1
	.word	587
	.byte	1,5,2,35,2,11
	.byte	'S19L',0,1
	.word	587
	.byte	1,4,2,35,2,11
	.byte	'S20L',0,1
	.word	587
	.byte	1,3,2,35,2,11
	.byte	'S21L',0,1
	.word	587
	.byte	1,2,2,35,2,11
	.byte	'S22L',0,1
	.word	587
	.byte	1,1,2,35,2,11
	.byte	'S23L',0,1
	.word	587
	.byte	1,0,2,35,2,11
	.byte	'S24L',0,1
	.word	587
	.byte	1,7,2,35,3,11
	.byte	'S25L',0,1
	.word	587
	.byte	1,6,2,35,3,11
	.byte	'S26L',0,1
	.word	587
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	587
	.byte	4,1,2,35,3,11
	.byte	'RPRO',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_PROCONP_Bits',0,16,160,3,3
	.word	69896
	.byte	10
	.byte	'_Ifx_FLASH_PROCONWOP_Bits',0,16,163,3,16,4,11
	.byte	'S0WOP',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'S1WOP',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'S2WOP',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'S3WOP',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'S4WOP',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'S5WOP',0,1
	.word	587
	.byte	1,2,2,35,0,11
	.byte	'S6WOP',0,1
	.word	587
	.byte	1,1,2,35,0,11
	.byte	'S7WOP',0,1
	.word	587
	.byte	1,0,2,35,0,11
	.byte	'S8WOP',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'S9WOP',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'S10WOP',0,1
	.word	587
	.byte	1,5,2,35,1,11
	.byte	'S11WOP',0,1
	.word	587
	.byte	1,4,2,35,1,11
	.byte	'S12WOP',0,1
	.word	587
	.byte	1,3,2,35,1,11
	.byte	'S13WOP',0,1
	.word	587
	.byte	1,2,2,35,1,11
	.byte	'S14WOP',0,1
	.word	587
	.byte	1,1,2,35,1,11
	.byte	'S15WOP',0,1
	.word	587
	.byte	1,0,2,35,1,11
	.byte	'S16WOP',0,1
	.word	587
	.byte	1,7,2,35,2,11
	.byte	'S17WOP',0,1
	.word	587
	.byte	1,6,2,35,2,11
	.byte	'S18WOP',0,1
	.word	587
	.byte	1,5,2,35,2,11
	.byte	'S19WOP',0,1
	.word	587
	.byte	1,4,2,35,2,11
	.byte	'S20WOP',0,1
	.word	587
	.byte	1,3,2,35,2,11
	.byte	'S21WOP',0,1
	.word	587
	.byte	1,2,2,35,2,11
	.byte	'S22WOP',0,1
	.word	587
	.byte	1,1,2,35,2,11
	.byte	'S23WOP',0,1
	.word	587
	.byte	1,0,2,35,2,11
	.byte	'S24WOP',0,1
	.word	587
	.byte	1,7,2,35,3,11
	.byte	'S25WOP',0,1
	.word	587
	.byte	1,6,2,35,3,11
	.byte	'S26WOP',0,1
	.word	587
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	587
	.byte	4,1,2,35,3,11
	.byte	'DATM',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_PROCONWOP_Bits',0,16,194,3,3
	.word	70420
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG0_Bits',0,16,197,3,16,4,11
	.byte	'TAG',0,1
	.word	587
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	412
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_FLASH_RDB_CFG0_Bits',0,16,201,3,3
	.word	71002
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG1_Bits',0,16,204,3,16,4,11
	.byte	'TAG',0,1
	.word	587
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	412
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_FLASH_RDB_CFG1_Bits',0,16,208,3,3
	.word	71104
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG2_Bits',0,16,211,3,16,4,11
	.byte	'TAG',0,1
	.word	587
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	412
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_FLASH_RDB_CFG2_Bits',0,16,215,3,3
	.word	71206
	.byte	10
	.byte	'_Ifx_FLASH_RRAD_Bits',0,16,218,3,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	3,5,2,35,0,11
	.byte	'ADD',0,4
	.word	412
	.byte	29,0,2,35,0,0,28
	.byte	'Ifx_FLASH_RRAD_Bits',0,16,222,3,3
	.word	71308
	.byte	10
	.byte	'_Ifx_FLASH_RRCT_Bits',0,16,225,3,16,4,11
	.byte	'STRT',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'STP',0,1
	.word	587
	.byte	1,6,2,35,0,11
	.byte	'BUSY',0,1
	.word	587
	.byte	1,5,2,35,0,11
	.byte	'DONE',0,1
	.word	587
	.byte	1,4,2,35,0,11
	.byte	'ERR',0,1
	.word	587
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	587
	.byte	3,0,2,35,0,11
	.byte	'EOBM',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	587
	.byte	7,0,2,35,1,11
	.byte	'CNT',0,2
	.word	604
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_FLASH_RRCT_Bits',0,16,236,3,3
	.word	71402
	.byte	10
	.byte	'_Ifx_FLASH_RRD0_Bits',0,16,239,3,16,4,11
	.byte	'DATA',0,4
	.word	412
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_FLASH_RRD0_Bits',0,16,242,3,3
	.word	71612
	.byte	10
	.byte	'_Ifx_FLASH_RRD1_Bits',0,16,245,3,16,4,11
	.byte	'DATA',0,4
	.word	412
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_FLASH_RRD1_Bits',0,16,248,3,3
	.word	71685
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_CFG_Bits',0,16,251,3,16,4,11
	.byte	'SEL',0,1
	.word	587
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	587
	.byte	2,0,2,35,0,11
	.byte	'CLR',0,1
	.word	587
	.byte	1,7,2,35,1,11
	.byte	'DIS',0,1
	.word	587
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	412
	.byte	22,0,2,35,0,0,28
	.byte	'Ifx_FLASH_UBAB_CFG_Bits',0,16,130,4,3
	.word	71758
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_STAT_Bits',0,16,133,4,16,4,11
	.byte	'VLD0',0,1
	.word	587
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	412
	.byte	31,0,2,35,0,0,28
	.byte	'Ifx_FLASH_UBAB_STAT_Bits',0,16,137,4,3
	.word	71913
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_TOP_Bits',0,16,140,4,16,4,11
	.byte	'reserved_0',0,1
	.word	587
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	412
	.byte	19,8,2,35,0,11
	.byte	'ERR',0,1
	.word	587
	.byte	6,2,2,35,3,11
	.byte	'VLD',0,1
	.word	587
	.byte	1,1,2,35,3,11
	.byte	'CLR',0,1
	.word	587
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_FLASH_UBAB_TOP_Bits',0,16,147,4,3
	.word	72018
	.byte	12,16,155,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64423
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_ACCEN0',0,16,160,4,3
	.word	72166
	.byte	12,16,163,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64984
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_ACCEN1',0,16,168,4,3
	.word	72232
	.byte	12,16,171,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65065
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_CBAB_CFG',0,16,176,4,3
	.word	72298
	.byte	12,16,179,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65218
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_CBAB_STAT',0,16,184,4,3
	.word	72366
	.byte	12,16,187,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65466
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_CBAB_TOP',0,16,192,4,3
	.word	72435
	.byte	12,16,195,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65612
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_COMM0',0,16,200,4,3
	.word	72503
	.byte	12,16,203,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65710
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_COMM1',0,16,208,4,3
	.word	72568
	.byte	12,16,211,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65826
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_COMM2',0,16,216,4,3
	.word	72633
	.byte	12,16,219,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65942
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_ECCRD',0,16,224,4,3
	.word	72698
	.byte	12,16,227,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66082
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_ECCRP',0,16,232,4,3
	.word	72763
	.byte	12,16,235,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66222
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_ECCW',0,16,240,4,3
	.word	72828
	.byte	12,16,243,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66361
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_FCON',0,16,248,4,3
	.word	72892
	.byte	12,16,251,4,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66723
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_FPRO',0,16,128,5,3
	.word	72956
	.byte	12,16,131,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67164
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_FSR',0,16,136,5,3
	.word	73020
	.byte	12,16,139,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67770
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_ID',0,16,144,5,3
	.word	73083
	.byte	12,16,147,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67881
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_MARD',0,16,152,5,3
	.word	73145
	.byte	12,16,155,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68095
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_MARP',0,16,160,5,3
	.word	73209
	.byte	12,16,163,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68282
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_PROCOND',0,16,168,5,3
	.word	73273
	.byte	12,16,171,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68606
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_PROCONDBG',0,16,176,5,3
	.word	73340
	.byte	12,16,179,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68749
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_PROCONHSM',0,16,184,5,3
	.word	73409
	.byte	12,16,187,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68938
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_PROCONHSMCOTP',0,16,192,5,3
	.word	73478
	.byte	12,16,195,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69301
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_PROCONOTP',0,16,200,5,3
	.word	73551
	.byte	12,16,203,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69896
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_PROCONP',0,16,208,5,3
	.word	73620
	.byte	12,16,211,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70420
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_PROCONWOP',0,16,216,5,3
	.word	73687
	.byte	12,16,219,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71002
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_RDB_CFG0',0,16,224,5,3
	.word	73756
	.byte	12,16,227,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71104
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_RDB_CFG1',0,16,232,5,3
	.word	73824
	.byte	12,16,235,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71206
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_RDB_CFG2',0,16,240,5,3
	.word	73892
	.byte	12,16,243,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71308
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_RRAD',0,16,248,5,3
	.word	73960
	.byte	12,16,251,5,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71402
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_RRCT',0,16,128,6,3
	.word	74024
	.byte	12,16,131,6,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71612
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_RRD0',0,16,136,6,3
	.word	74088
	.byte	12,16,139,6,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71685
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_RRD1',0,16,144,6,3
	.word	74152
	.byte	12,16,147,6,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71758
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_UBAB_CFG',0,16,152,6,3
	.word	74216
	.byte	12,16,155,6,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71913
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_UBAB_STAT',0,16,160,6,3
	.word	74284
	.byte	12,16,163,6,9,4,13
	.byte	'U',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72018
	.byte	4,2,35,0,0,28
	.byte	'Ifx_FLASH_UBAB_TOP',0,16,168,6,3
	.word	74353
	.byte	10
	.byte	'_Ifx_FLASH_CBAB',0,16,179,6,25,12,13
	.byte	'CFG',0
	.word	72298
	.byte	4,2,35,0,13
	.byte	'STAT',0
	.word	72366
	.byte	4,2,35,4,13
	.byte	'TOP',0
	.word	72435
	.byte	4,2,35,8,0,14
	.word	74421
	.byte	28
	.byte	'Ifx_FLASH_CBAB',0,16,184,6,3
	.word	74484
	.byte	10
	.byte	'_Ifx_FLASH_RDB',0,16,187,6,25,12,13
	.byte	'CFG0',0
	.word	73756
	.byte	4,2,35,0,13
	.byte	'CFG1',0
	.word	73824
	.byte	4,2,35,4,13
	.byte	'CFG2',0
	.word	73892
	.byte	4,2,35,8,0,14
	.word	74513
	.byte	28
	.byte	'Ifx_FLASH_RDB',0,16,192,6,3
	.word	74577
	.byte	10
	.byte	'_Ifx_FLASH_UBAB',0,16,195,6,25,12,13
	.byte	'CFG',0
	.word	74216
	.byte	4,2,35,0,13
	.byte	'STAT',0
	.word	74284
	.byte	4,2,35,4,13
	.byte	'TOP',0
	.word	74353
	.byte	4,2,35,8,0,14
	.word	74605
	.byte	28
	.byte	'Ifx_FLASH_UBAB',0,16,200,6,3
	.word	74668
	.byte	28
	.byte	'Ifx_P_ACCEN0_Bits',0,6,79,3
	.word	8227
	.byte	28
	.byte	'Ifx_P_ACCEN1_Bits',0,6,85,3
	.word	8140
	.byte	28
	.byte	'Ifx_P_ESR_Bits',0,6,107,3
	.word	4483
	.byte	28
	.byte	'Ifx_P_ID_Bits',0,6,115,3
	.word	2536
	.byte	28
	.byte	'Ifx_P_IN_Bits',0,6,137,1,3
	.word	3531
	.byte	28
	.byte	'Ifx_P_IOCR0_Bits',0,6,150,1,3
	.word	2664
	.byte	28
	.byte	'Ifx_P_IOCR12_Bits',0,6,163,1,3
	.word	3311
	.byte	28
	.byte	'Ifx_P_IOCR4_Bits',0,6,176,1,3
	.word	2879
	.byte	28
	.byte	'Ifx_P_IOCR8_Bits',0,6,189,1,3
	.word	3094
	.byte	28
	.byte	'Ifx_P_LPCR0_Bits',0,6,197,1,3
	.word	7499
	.byte	28
	.byte	'Ifx_P_LPCR1_Bits',0,6,205,1,3
	.word	7623
	.byte	28
	.byte	'Ifx_P_LPCR1_P21_Bits',0,6,215,1,3
	.word	7707
	.byte	28
	.byte	'Ifx_P_LPCR2_Bits',0,6,229,1,3
	.word	7887
	.byte	28
	.byte	'Ifx_P_OMCR0_Bits',0,6,240,1,3
	.word	6138
	.byte	28
	.byte	'Ifx_P_OMCR12_Bits',0,6,250,1,3
	.word	6662
	.byte	28
	.byte	'Ifx_P_OMCR4_Bits',0,6,133,2,3
	.word	6312
	.byte	28
	.byte	'Ifx_P_OMCR8_Bits',0,6,144,2,3
	.word	6486
	.byte	28
	.byte	'Ifx_P_OMCR_Bits',0,6,166,2,3
	.word	7151
	.byte	28
	.byte	'Ifx_P_OMR_Bits',0,6,203,2,3
	.word	1965
	.byte	28
	.byte	'Ifx_P_OMSR0_Bits',0,6,213,2,3
	.word	5475
	.byte	28
	.byte	'Ifx_P_OMSR12_Bits',0,6,224,2,3
	.word	5963
	.byte	28
	.byte	'Ifx_P_OMSR4_Bits',0,6,235,2,3
	.word	5622
	.byte	28
	.byte	'Ifx_P_OMSR8_Bits',0,6,246,2,3
	.word	5791
	.byte	28
	.byte	'Ifx_P_OMSR_Bits',0,6,140,3,3
	.word	6818
	.byte	28
	.byte	'Ifx_P_OUT_Bits',0,6,162,3,3
	.word	1649
	.byte	28
	.byte	'Ifx_P_PCSR_Bits',0,6,180,3,3
	.word	5189
	.byte	28
	.byte	'Ifx_P_PDISC_Bits',0,6,202,3,3
	.word	4823
	.byte	28
	.byte	'Ifx_P_PDR0_Bits',0,6,223,3,3
	.word	3854
	.byte	28
	.byte	'Ifx_P_PDR1_Bits',0,6,244,3,3
	.word	4158
	.byte	28
	.byte	'Ifx_P_ACCEN0',0,6,129,4,3
	.word	8754
	.byte	28
	.byte	'Ifx_P_ACCEN1',0,6,137,4,3
	.word	8187
	.byte	28
	.byte	'Ifx_P_ESR',0,6,145,4,3
	.word	4774
	.byte	28
	.byte	'Ifx_P_ID',0,6,153,4,3
	.word	2615
	.byte	28
	.byte	'Ifx_P_IN',0,6,161,4,3
	.word	3805
	.byte	28
	.byte	'Ifx_P_IOCR0',0,6,169,4,3
	.word	2839
	.byte	28
	.byte	'Ifx_P_IOCR12',0,6,177,4,3
	.word	3491
	.byte	28
	.byte	'Ifx_P_IOCR4',0,6,185,4,3
	.word	3054
	.byte	28
	.byte	'Ifx_P_IOCR8',0,6,193,4,3
	.word	3271
	.byte	28
	.byte	'Ifx_P_LPCR0',0,6,201,4,3
	.word	7583
	.byte	28
	.byte	'Ifx_P_LPCR1',0,6,210,4,3
	.word	7832
	.byte	28
	.byte	'Ifx_P_LPCR2',0,6,218,4,3
	.word	8091
	.byte	28
	.byte	'Ifx_P_OMCR',0,6,226,4,3
	.word	7459
	.byte	28
	.byte	'Ifx_P_OMCR0',0,6,234,4,3
	.word	6272
	.byte	28
	.byte	'Ifx_P_OMCR12',0,6,242,4,3
	.word	6778
	.byte	28
	.byte	'Ifx_P_OMCR4',0,6,250,4,3
	.word	6446
	.byte	28
	.byte	'Ifx_P_OMCR8',0,6,130,5,3
	.word	6622
	.byte	28
	.byte	'Ifx_P_OMR',0,6,138,5,3
	.word	2496
	.byte	28
	.byte	'Ifx_P_OMSR',0,6,146,5,3
	.word	7111
	.byte	28
	.byte	'Ifx_P_OMSR0',0,6,154,5,3
	.word	5582
	.byte	28
	.byte	'Ifx_P_OMSR12',0,6,162,5,3
	.word	6098
	.byte	28
	.byte	'Ifx_P_OMSR4',0,6,170,5,3
	.word	5751
	.byte	28
	.byte	'Ifx_P_OMSR8',0,6,178,5,3
	.word	5923
	.byte	28
	.byte	'Ifx_P_OUT',0,6,186,5,3
	.word	1925
	.byte	28
	.byte	'Ifx_P_PCSR',0,6,194,5,3
	.word	5435
	.byte	28
	.byte	'Ifx_P_PDISC',0,6,202,5,3
	.word	5149
	.byte	28
	.byte	'Ifx_P_PDR0',0,6,210,5,3
	.word	4118
	.byte	28
	.byte	'Ifx_P_PDR1',0,6,218,5,3
	.word	4434
	.byte	14
	.word	8794
	.byte	28
	.byte	'Ifx_P',0,6,139,6,3
	.word	76015
	.byte	17,5,83,9,1,18
	.byte	'IfxPort_InputMode_undefined',0,127,18
	.byte	'IfxPort_InputMode_noPullDevice',0,0,18
	.byte	'IfxPort_InputMode_pullDown',0,8,18
	.byte	'IfxPort_InputMode_pullUp',0,16,0,28
	.byte	'IfxPort_InputMode',0,5,89,3
	.word	76035
	.byte	17,5,120,9,1,18
	.byte	'IfxPort_OutputIdx_general',0,128,1,18
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,18
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,18
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,18
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,18
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,18
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,18
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,28
	.byte	'IfxPort_OutputIdx',0,5,130,1,3
	.word	76186
	.byte	17,5,134,1,9,1,18
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,18
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,28
	.byte	'IfxPort_OutputMode',0,5,138,1,3
	.word	76430
	.byte	17,5,144,1,9,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,18
	.byte	'IfxPort_PadDriver_lvdsSpeed1',0,4,18
	.byte	'IfxPort_PadDriver_lvdsSpeed2',0,5,18
	.byte	'IfxPort_PadDriver_lvdsSpeed3',0,6,18
	.byte	'IfxPort_PadDriver_lvdsSpeed4',0,7,18
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,18
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,18
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,18
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,0,28
	.byte	'IfxPort_PadDriver',0,5,158,1,3
	.word	76528
	.byte	28
	.byte	'IfxPort_State',0,5,178,1,3
	.word	9407
	.byte	27,5,190,1,9,8,13
	.byte	'port',0
	.word	9402
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	587
	.byte	1,2,35,4,0,28
	.byte	'IfxPort_Pin',0,5,194,1,3
	.word	76993
	.byte	28
	.byte	'IfxScuCcu_PllStepsFunctionHook',0,17,148,1,16
	.word	151
	.byte	27,17,212,5,9,8,13
	.byte	'value',0
	.word	9743
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	9743
	.byte	4,2,35,4,0,28
	.byte	'IfxScuCcu_CcuconRegConfig',0,17,216,5,3
	.word	77093
	.byte	27,17,221,5,9,8,13
	.byte	'pDivider',0
	.word	587
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	587
	.byte	1,2,35,1,13
	.byte	'k2Initial',0
	.word	587
	.byte	1,2,35,2,13
	.byte	'waitTime',0
	.word	208
	.byte	4,2,35,4,0,28
	.byte	'IfxScuCcu_InitialStepConfig',0,17,227,5,3
	.word	77164
	.byte	27,17,231,5,9,12,13
	.byte	'k2Step',0
	.word	587
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	208
	.byte	4,2,35,2,13
	.byte	'hookFunction',0
	.word	77053
	.byte	4,2,35,8,0,28
	.byte	'IfxScuCcu_PllStepsConfig',0,17,236,5,3
	.word	77281
	.byte	3
	.word	148
	.byte	27,17,244,5,9,48,13
	.byte	'ccucon0',0
	.word	77093
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	77093
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	77093
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	77093
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	77093
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	77093
	.byte	8,2,35,40,0,28
	.byte	'IfxScuCcu_ClockDistributionConfig',0,17,252,5,3
	.word	77383
	.byte	27,17,128,6,9,8,13
	.byte	'value',0
	.word	9743
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	9743
	.byte	4,2,35,4,0,28
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,17,132,6,3
	.word	77535
	.byte	3
	.word	77281
	.byte	27,17,137,6,9,16,13
	.byte	'numOfPllDividerSteps',0
	.word	587
	.byte	1,2,35,0,13
	.byte	'pllDividerStep',0
	.word	77611
	.byte	4,2,35,4,13
	.byte	'pllInitialStep',0
	.word	77164
	.byte	8,2,35,8,0,28
	.byte	'IfxScuCcu_SysPllConfig',0,17,142,6,3
	.word	77616
	.byte	17,7,144,1,9,1,18
	.byte	'IfxCpu_CounterMode_normal',0,0,18
	.byte	'IfxCpu_CounterMode_task',0,1,0,28
	.byte	'IfxCpu_CounterMode',0,7,148,1,3
	.word	77733
	.byte	27,7,160,1,9,6,13
	.byte	'counter',0
	.word	9743
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	587
	.byte	1,2,35,4,0,28
	.byte	'IfxCpu_Counter',0,7,164,1,3
	.word	77822
	.byte	27,7,172,1,9,32,13
	.byte	'instruction',0
	.word	77822
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	77822
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	77822
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	77822
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	77822
	.byte	6,2,35,24,0,28
	.byte	'IfxCpu_Perf',0,7,179,1,3
	.word	77888
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L155:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,1,1,11,15,73,19,0,0,16,33,0,47,15,0,0,17,4,1,58,15,59
	.byte	15,57,15,11,15,0,0,18,40,0,3,8,28,13,0,0,19,11,1,0,0,20,38,0,73,19,0,0,21,46,1,3,8,54,15,39,12,63,12,60
	.byte	12,0,0,22,5,0,73,19,0,0,23,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,24,5,0,3,8,73,19,0,0,25,46,1,49
	.byte	19,0,0,26,5,0,49,19,0,0,27,19,1,58,15,59,15,57,15,11,15,0,0,28,22,0,3,8,58,15,59,15,57,15,73,19,0,0,29
	.byte	21,0,54,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L156:
	.word	.L477-.L476
.L476:
	.half	3
	.word	.L479-.L478
.L478:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra\\Sfr\\TC26B\\_Reg',0
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Std',0
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Impl',0
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0
	.byte	'IfxScu_regdef.h',0,2,0,0
	.byte	'IfxPort.h',0,3,0,0
	.byte	'IfxPort_regdef.h',0,2,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,4,0,0
	.byte	'IfxScu_cfg.h',0,4,0,0
	.byte	'IfxCpu_regdef.h',0,2,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'IfxSrc_regdef.h',0,2,0,0
	.byte	'IfxStm_regdef.h',0,2,0,0
	.byte	'IfxFlash_regdef.h',0,2,0,0
	.byte	'IfxScuCcu.h',0,5,0,0,0
.L479:
.L477:
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_initConfig')
	.sect	'.debug_info'
.L157:
	.word	225
	.half	3
	.word	.L158
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L160,.L159
	.byte	2
	.word	.L153
	.byte	3
	.byte	'IfxScuWdt_initConfig',0,1,134,2,6,1,1,1
	.word	.L138,.L262,.L137
	.byte	4
	.byte	'config',0,1,134,2,45
	.word	.L263,.L264
	.byte	5
	.word	.L138,.L262
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_initConfig')
	.sect	'.debug_abbrev'
.L158:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_initConfig')
	.sect	'.debug_line'
.L159:
	.word	.L481-.L480
.L480:
	.half	3
	.word	.L483-.L482
.L482:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0,0,0,0,0
.L483:
	.byte	5,45,7,0,5,2
	.word	.L138
	.byte	3,135,2,1,5,43,9
	.half	.L484-.L138
	.byte	1,5,45,9
	.half	.L485-.L484
	.byte	3,1,1,5,43,9
	.half	.L486-.L485
	.byte	1,5,45,9
	.half	.L487-.L486
	.byte	3,1,1,5,43,9
	.half	.L488-.L487
	.byte	1,5,45,9
	.half	.L489-.L488
	.byte	3,1,1,5,43,9
	.half	.L490-.L489
	.byte	1,5,45,9
	.half	.L491-.L490
	.byte	3,1,1,5,43,9
	.half	.L492-.L491
	.byte	1,5,45,9
	.half	.L493-.L492
	.byte	3,1,1,5,43,9
	.half	.L494-.L493
	.byte	1,5,45,9
	.half	.L495-.L494
	.byte	3,1,1,5,43,9
	.half	.L496-.L495
	.byte	1,5,45,9
	.half	.L497-.L496
	.byte	3,1,1,5,43,9
	.half	.L498-.L497
	.byte	1,5,45,9
	.half	.L499-.L498
	.byte	3,1,1,5,43,9
	.half	.L500-.L499
	.byte	1,5,1,9
	.half	.L501-.L500
	.byte	3,1,1,7,9
	.half	.L161-.L501
	.byte	0,1,1
.L481:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_initConfig')
	.sect	'.debug_ranges'
.L160:
	.word	-1,.L138,0,.L161-.L138,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_initCpuWatchdog')
	.sect	'.debug_info'
.L162:
	.word	292
	.half	3
	.word	.L163
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L165,.L164
	.byte	2
	.word	.L153
	.byte	3
	.byte	'IfxScuWdt_initCpuWatchdog',0,1,148,2,6,1,1,1
	.word	.L140,.L265,.L139
	.byte	4
	.byte	'wdt',0,1,148,2,48
	.word	.L266,.L267
	.byte	4
	.byte	'config',0,1,148,2,77
	.word	.L268,.L269
	.byte	5
	.word	.L140,.L265
	.byte	6
	.byte	'wdt_con0',0,1,150,2,25
	.word	.L270,.L271
	.byte	6
	.byte	'wdt_con1',0,1,151,2,25
	.word	.L272,.L273
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_initCpuWatchdog')
	.sect	'.debug_abbrev'
.L163:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_initCpuWatchdog')
	.sect	'.debug_line'
.L164:
	.word	.L503-.L502
.L502:
	.half	3
	.word	.L505-.L504
.L504:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0,0,0,0,0
.L505:
	.byte	5,27,7,0,5,2
	.word	.L140
	.byte	3,153,2,1,5,16,9
	.half	.L454-.L140
	.byte	3,1,1,5,5,9
	.half	.L455-.L454
	.byte	3,2,1,5,28,7,9
	.half	.L506-.L455
	.byte	3,3,1,9
	.half	.L507-.L506
	.byte	3,1,1,5,27,9
	.half	.L508-.L507
	.byte	3,1,1,5,21,9
	.half	.L509-.L508
	.byte	3,3,1,5,24,9
	.half	.L57-.L509
	.byte	3,6,1,9
	.half	.L510-.L57
	.byte	3,1,1,5,32,9
	.half	.L511-.L510
	.byte	3,1,1,5,24,9
	.half	.L512-.L511
	.byte	1,5,32,9
	.half	.L513-.L512
	.byte	3,1,1,5,24,9
	.half	.L514-.L513
	.byte	1,5,17,9
	.half	.L515-.L514
	.byte	3,3,1,5,36,9
	.half	.L516-.L515
	.byte	3,3,1,5,23,9
	.half	.L58-.L516
	.byte	1,5,36,9
	.half	.L517-.L58
	.byte	1,5,19,7,9
	.half	.L518-.L517
	.byte	3,4,1,5,10,9
	.half	.L519-.L518
	.byte	3,2,1,9
	.half	.L520-.L519
	.byte	3,4,1,9
	.half	.L521-.L520
	.byte	3,4,1,5,26,9
	.half	.L60-.L521
	.byte	3,121,1,5,24,9
	.half	.L522-.L60
	.byte	1,5,26,9
	.half	.L523-.L522
	.byte	3,1,1,5,24,9
	.half	.L524-.L523
	.byte	1,5,9,9
	.half	.L525-.L524
	.byte	3,1,1,5,26,9
	.half	.L61-.L525
	.byte	3,2,1,5,24,9
	.half	.L526-.L61
	.byte	1,5,26,9
	.half	.L527-.L526
	.byte	3,1,1,5,24,9
	.half	.L528-.L527
	.byte	1,5,9,9
	.half	.L529-.L528
	.byte	3,1,1,5,26,9
	.half	.L62-.L529
	.byte	3,2,1,5,24,9
	.half	.L530-.L62
	.byte	1,5,26,9
	.half	.L531-.L530
	.byte	3,1,1,5,24,9
	.half	.L532-.L531
	.byte	1,5,9,9
	.half	.L533-.L532
	.byte	3,1,1,5,29,9
	.half	.L64-.L533
	.byte	3,3,1,5,23,9
	.half	.L534-.L64
	.byte	1,5,47,7,9
	.half	.L535-.L534
	.byte	1,5,51,9
	.half	.L536-.L535
	.byte	1,5,47,9
	.half	.L67-.L536
	.byte	1,5,21,9
	.half	.L68-.L67
	.byte	1,5,29,9
	.half	.L537-.L68
	.byte	3,1,1,5,23,9
	.half	.L538-.L537
	.byte	1,5,52,7,9
	.half	.L539-.L538
	.byte	1,5,56,9
	.half	.L540-.L539
	.byte	1,5,52,9
	.half	.L69-.L540
	.byte	1,5,21,9
	.half	.L70-.L69
	.byte	1,5,29,9
	.half	.L541-.L70
	.byte	3,1,1,5,23,9
	.half	.L542-.L541
	.byte	1,5,61,7,9
	.half	.L543-.L542
	.byte	1,5,65,9
	.half	.L544-.L543
	.byte	1,5,61,9
	.half	.L71-.L544
	.byte	1,5,21,9
	.half	.L72-.L71
	.byte	1,5,29,9
	.half	.L545-.L72
	.byte	3,1,1,5,23,9
	.half	.L546-.L545
	.byte	1,5,48,7,9
	.half	.L547-.L546
	.byte	1,5,52,9
	.half	.L548-.L547
	.byte	1,5,48,9
	.half	.L73-.L548
	.byte	1,5,21,9
	.half	.L74-.L73
	.byte	1,5,29,9
	.half	.L549-.L74
	.byte	3,1,1,5,23,9
	.half	.L550-.L549
	.byte	1,5,57,7,9
	.half	.L551-.L550
	.byte	1,5,61,9
	.half	.L552-.L551
	.byte	1,5,57,9
	.half	.L75-.L552
	.byte	1,5,21,9
	.half	.L76-.L75
	.byte	1,5,17,9
	.half	.L553-.L76
	.byte	3,3,1,5,35,9
	.half	.L554-.L553
	.byte	3,3,1,5,1,9
	.half	.L453-.L554
	.byte	3,1,1,7,9
	.half	.L166-.L453
	.byte	0,1,1
.L503:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_initCpuWatchdog')
	.sect	'.debug_ranges'
.L165:
	.word	-1,.L140,0,.L166-.L140,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_initSafetyWatchdog')
	.sect	'.debug_info'
.L167:
	.word	295
	.half	3
	.word	.L168
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L170,.L169
	.byte	2
	.word	.L153
	.byte	3
	.byte	'IfxScuWdt_initSafetyWatchdog',0,1,214,2,6,1,1,1
	.word	.L142,.L274,.L141
	.byte	4
	.byte	'wdt',0,1,214,2,49
	.word	.L275,.L276
	.byte	4
	.byte	'config',0,1,214,2,78
	.word	.L268,.L277
	.byte	5
	.word	.L142,.L274
	.byte	6
	.byte	'wdt_con0',0,1,216,2,23
	.word	.L278,.L279
	.byte	6
	.byte	'wdt_con1',0,1,217,2,23
	.word	.L280,.L281
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_initSafetyWatchdog')
	.sect	'.debug_abbrev'
.L168:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_initSafetyWatchdog')
	.sect	'.debug_line'
.L169:
	.word	.L556-.L555
.L555:
	.half	3
	.word	.L558-.L557
.L557:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0,0,0,0,0
.L558:
	.byte	5,27,7,0,5,2
	.word	.L142
	.byte	3,219,2,1,5,16,9
	.half	.L457-.L142
	.byte	3,1,1,5,5,9
	.half	.L458-.L457
	.byte	3,2,1,5,28,7,9
	.half	.L559-.L458
	.byte	3,3,1,9
	.half	.L560-.L559
	.byte	3,1,1,5,27,9
	.half	.L561-.L560
	.byte	3,1,1,5,21,9
	.half	.L562-.L561
	.byte	3,3,1,5,24,9
	.half	.L77-.L562
	.byte	3,6,1,9
	.half	.L563-.L77
	.byte	3,1,1,5,32,9
	.half	.L564-.L563
	.byte	3,1,1,5,24,9
	.half	.L565-.L564
	.byte	1,5,32,9
	.half	.L566-.L565
	.byte	3,1,1,5,24,9
	.half	.L567-.L566
	.byte	1,5,17,9
	.half	.L568-.L567
	.byte	3,3,1,5,36,9
	.half	.L569-.L568
	.byte	3,3,1,5,23,9
	.half	.L78-.L569
	.byte	1,5,36,9
	.half	.L570-.L78
	.byte	1,5,19,7,9
	.half	.L571-.L570
	.byte	3,4,1,5,10,9
	.half	.L572-.L571
	.byte	3,2,1,9
	.half	.L573-.L572
	.byte	3,4,1,9
	.half	.L574-.L573
	.byte	3,4,1,5,26,9
	.half	.L80-.L574
	.byte	3,121,1,5,24,9
	.half	.L575-.L80
	.byte	1,5,26,9
	.half	.L576-.L575
	.byte	3,1,1,5,24,9
	.half	.L577-.L576
	.byte	1,5,9,9
	.half	.L578-.L577
	.byte	3,1,1,5,26,9
	.half	.L81-.L578
	.byte	3,2,1,5,24,9
	.half	.L579-.L81
	.byte	1,5,26,9
	.half	.L580-.L579
	.byte	3,1,1,5,24,9
	.half	.L581-.L580
	.byte	1,5,9,9
	.half	.L582-.L581
	.byte	3,1,1,5,26,9
	.half	.L82-.L582
	.byte	3,2,1,5,24,9
	.half	.L583-.L82
	.byte	1,5,26,9
	.half	.L584-.L583
	.byte	3,1,1,5,24,9
	.half	.L585-.L584
	.byte	1,5,9,9
	.half	.L586-.L585
	.byte	3,1,1,5,31,9
	.half	.L84-.L586
	.byte	3,3,1,5,25,9
	.half	.L587-.L84
	.byte	1,5,49,7,9
	.half	.L588-.L587
	.byte	1,5,53,9
	.half	.L589-.L588
	.byte	1,5,49,9
	.half	.L87-.L589
	.byte	1,5,23,9
	.half	.L88-.L87
	.byte	1,5,31,9
	.half	.L590-.L88
	.byte	3,1,1,5,25,9
	.half	.L591-.L590
	.byte	1,5,54,7,9
	.half	.L592-.L591
	.byte	1,5,58,9
	.half	.L593-.L592
	.byte	1,5,54,9
	.half	.L89-.L593
	.byte	1,5,23,9
	.half	.L90-.L89
	.byte	1,5,31,9
	.half	.L594-.L90
	.byte	3,1,1,5,25,9
	.half	.L595-.L594
	.byte	1,5,63,7,9
	.half	.L596-.L595
	.byte	1,5,67,9
	.half	.L597-.L596
	.byte	1,5,63,9
	.half	.L91-.L597
	.byte	1,5,23,9
	.half	.L92-.L91
	.byte	1,5,31,9
	.half	.L598-.L92
	.byte	3,1,1,5,25,9
	.half	.L599-.L598
	.byte	1,5,50,7,9
	.half	.L600-.L599
	.byte	1,5,54,9
	.half	.L601-.L600
	.byte	1,5,50,9
	.half	.L93-.L601
	.byte	1,5,23,9
	.half	.L94-.L93
	.byte	1,5,31,9
	.half	.L602-.L94
	.byte	3,1,1,5,25,9
	.half	.L603-.L602
	.byte	1,5,59,7,9
	.half	.L604-.L603
	.byte	1,5,63,9
	.half	.L605-.L604
	.byte	1,5,59,9
	.half	.L95-.L605
	.byte	1,5,23,9
	.half	.L96-.L95
	.byte	1,5,31,9
	.half	.L606-.L96
	.byte	3,1,1,5,25,9
	.half	.L607-.L606
	.byte	1,5,54,7,9
	.half	.L608-.L607
	.byte	1,5,58,9
	.half	.L609-.L608
	.byte	1,5,54,9
	.half	.L97-.L609
	.byte	1,5,23,9
	.half	.L98-.L97
	.byte	1,5,17,9
	.half	.L610-.L98
	.byte	3,3,1,5,38,9
	.half	.L611-.L610
	.byte	3,3,1,5,1,9
	.half	.L456-.L611
	.byte	3,1,1,7,9
	.half	.L171-.L456
	.byte	0,1,1
.L556:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_initSafetyWatchdog')
	.sect	'.debug_ranges'
.L170:
	.word	-1,.L142,0,.L171-.L142,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_clearCpuEndinit')
	.sect	'.debug_info'
.L172:
	.word	323
	.half	3
	.word	.L173
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L175,.L174
	.byte	2
	.word	.L153
	.byte	3
	.byte	'IfxScuWdt_clearCpuEndinit',0,1,192,1,6,1,1,1
	.word	.L120,.L282,.L119
	.byte	4
	.byte	'password',0,1,192,1,39
	.word	.L283,.L284
	.byte	5
	.word	.L120,.L282
	.byte	6
	.word	.L285,.L120,.L16
	.byte	7
	.word	.L286,.L120,.L16
	.byte	8
	.byte	'reg',0,2,143,6,21
	.word	.L287,.L288
	.byte	0,0,6
	.word	.L289,.L290,.L291
	.byte	9
	.word	.L292,.L293
	.byte	9
	.word	.L294,.L295
	.byte	10
	.word	.L296,.L290,.L291
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_clearCpuEndinit')
	.sect	'.debug_abbrev'
.L173:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,11,1,49,16,17,1,18,1,0,0,8,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,9,5,0,49,16,2,6
	.byte	0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_clearCpuEndinit')
	.sect	'.debug_line'
.L174:
	.word	.L613-.L612
.L612:
	.half	3
	.word	.L615-.L614
.L614:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L615:
	.byte	4,2,5,19,7,0,5,2
	.word	.L120
	.byte	3,143,6,1,5,37,9
	.half	.L433-.L120
	.byte	3,1,1,5,5,9
	.half	.L434-.L433
	.byte	1,4,1,5,55,9
	.half	.L16-.L434
	.byte	3,177,123,1,4,3,5,25,9
	.half	.L290-.L16
	.byte	3,245,1,1,5,5,9
	.half	.L616-.L290
	.byte	1,5,38,7,9
	.half	.L617-.L616
	.byte	3,5,1,5,45,9
	.half	.L618-.L617
	.byte	3,1,1,5,50,9
	.half	.L619-.L618
	.byte	1,5,69,9
	.half	.L620-.L619
	.byte	3,127,1,5,26,9
	.half	.L621-.L620
	.byte	3,126,1,5,34,9
	.half	.L17-.L621
	.byte	3,9,1,5,41,9
	.half	.L622-.L17
	.byte	3,1,1,5,46,9
	.half	.L623-.L622
	.byte	1,5,65,9
	.half	.L624-.L623
	.byte	3,127,1,5,22,9
	.half	.L625-.L624
	.byte	3,126,1,5,41,9
	.half	.L626-.L625
	.byte	3,6,1,5,28,9
	.half	.L18-.L626
	.byte	1,5,41,9
	.half	.L627-.L18
	.byte	1,4,1,5,1,7,9
	.half	.L291-.L627
	.byte	3,252,125,1,7,9
	.half	.L176-.L291
	.byte	0,1,1
.L613:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_clearCpuEndinit')
	.sect	'.debug_ranges'
.L175:
	.word	-1,.L120,0,.L176-.L120,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_clearSafetyEndinit')
	.sect	'.debug_info'
.L177:
	.word	272
	.half	3
	.word	.L178
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L180,.L179
	.byte	2
	.word	.L153
	.byte	3
	.byte	'IfxScuWdt_clearSafetyEndinit',0,1,198,1,6,1,1,1
	.word	.L122,.L297,.L121
	.byte	4
	.byte	'password',0,1,198,1,42
	.word	.L283,.L298
	.byte	5
	.word	.L122,.L297
	.byte	6
	.word	.L299,.L122,.L300
	.byte	7
	.word	.L301,.L302
	.byte	8
	.word	.L303,.L122,.L300
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_clearSafetyEndinit')
	.sect	'.debug_abbrev'
.L178:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_clearSafetyEndinit')
	.sect	'.debug_line'
.L179:
	.word	.L629-.L628
.L628:
	.half	3
	.word	.L631-.L630
.L630:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L631:
	.byte	4,2,5,24,7,0,5,2
	.word	.L122
	.byte	3,205,3,1,5,5,9
	.half	.L632-.L122
	.byte	1,5,37,7,9
	.half	.L633-.L632
	.byte	3,5,1,5,43,9
	.half	.L634-.L633
	.byte	3,1,1,5,48,9
	.half	.L635-.L634
	.byte	1,5,66,9
	.half	.L636-.L635
	.byte	3,127,1,5,25,9
	.half	.L637-.L636
	.byte	3,126,1,5,33,9
	.half	.L20-.L637
	.byte	3,9,1,5,39,9
	.half	.L638-.L20
	.byte	3,1,1,5,44,9
	.half	.L639-.L638
	.byte	1,5,62,9
	.half	.L640-.L639
	.byte	3,127,1,5,21,9
	.half	.L641-.L640
	.byte	3,126,1,5,40,9
	.half	.L642-.L641
	.byte	3,6,1,5,27,9
	.half	.L21-.L642
	.byte	1,5,40,9
	.half	.L643-.L21
	.byte	1,4,1,5,1,7,9
	.half	.L300-.L643
	.byte	3,235,125,1,7,9
	.half	.L181-.L300
	.byte	0,1,1
.L629:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_clearSafetyEndinit')
	.sect	'.debug_ranges'
.L180:
	.word	-1,.L122,0,.L181-.L122,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_setCpuEndinit')
	.sect	'.debug_info'
.L182:
	.word	321
	.half	3
	.word	.L183
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L185,.L184
	.byte	2
	.word	.L153
	.byte	3
	.byte	'IfxScuWdt_setCpuEndinit',0,1,165,3,6,1,1,1
	.word	.L148,.L304,.L147
	.byte	4
	.byte	'password',0,1,165,3,37
	.word	.L283,.L305
	.byte	5
	.word	.L148,.L304
	.byte	6
	.word	.L285,.L148,.L99
	.byte	7
	.word	.L286,.L148,.L99
	.byte	8
	.byte	'reg',0,2,143,6,21
	.word	.L287,.L306
	.byte	0,0,6
	.word	.L307,.L308,.L309
	.byte	9
	.word	.L310,.L311
	.byte	9
	.word	.L312,.L313
	.byte	10
	.word	.L314,.L308,.L309
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_setCpuEndinit')
	.sect	'.debug_abbrev'
.L183:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,11,1,49,16,17,1,18,1,0,0,8,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,9,5,0,49,16,2,6
	.byte	0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_setCpuEndinit')
	.sect	'.debug_line'
.L184:
	.word	.L645-.L644
.L644:
	.half	3
	.word	.L647-.L646
.L646:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L647:
	.byte	4,2,5,19,7,0,5,2
	.word	.L148
	.byte	3,143,6,1,5,37,9
	.half	.L462-.L148
	.byte	3,1,1,5,5,9
	.half	.L463-.L462
	.byte	1,4,1,5,53,9
	.half	.L99-.L463
	.byte	3,150,125,1,4,3,5,25,9
	.half	.L308-.L99
	.byte	3,231,0,1,5,5,9
	.half	.L648-.L308
	.byte	1,5,38,7,9
	.half	.L649-.L648
	.byte	3,5,1,5,45,9
	.half	.L650-.L649
	.byte	3,1,1,5,50,9
	.half	.L651-.L650
	.byte	1,5,69,9
	.half	.L652-.L651
	.byte	3,127,1,5,26,9
	.half	.L653-.L652
	.byte	3,126,1,5,34,9
	.half	.L100-.L653
	.byte	3,9,1,5,41,9
	.half	.L654-.L100
	.byte	3,1,1,5,46,9
	.half	.L655-.L654
	.byte	1,5,65,9
	.half	.L656-.L655
	.byte	3,127,1,5,22,9
	.half	.L657-.L656
	.byte	3,126,1,5,41,9
	.half	.L658-.L657
	.byte	3,6,1,5,28,9
	.half	.L101-.L658
	.byte	1,5,41,9
	.half	.L659-.L101
	.byte	1,4,1,5,1,7,9
	.half	.L309-.L659
	.byte	3,138,127,1,7,9
	.half	.L186-.L309
	.byte	0,1,1
.L645:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_setCpuEndinit')
	.sect	'.debug_ranges'
.L185:
	.word	-1,.L148,0,.L186-.L148,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_setSafetyEndinit')
	.sect	'.debug_info'
.L187:
	.word	270
	.half	3
	.word	.L188
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L190,.L189
	.byte	2
	.word	.L153
	.byte	3
	.byte	'IfxScuWdt_setSafetyEndinit',0,1,171,3,6,1,1,1
	.word	.L150,.L315,.L149
	.byte	4
	.byte	'password',0,1,171,3,40
	.word	.L283,.L316
	.byte	5
	.word	.L150,.L315
	.byte	6
	.word	.L317,.L150,.L318
	.byte	7
	.word	.L319,.L320
	.byte	8
	.word	.L321,.L150,.L318
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_setSafetyEndinit')
	.sect	'.debug_abbrev'
.L188:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_setSafetyEndinit')
	.sect	'.debug_line'
.L189:
	.word	.L661-.L660
.L660:
	.half	3
	.word	.L663-.L662
.L662:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L663:
	.byte	4,2,5,24,7,0,5,2
	.word	.L150
	.byte	3,164,4,1,5,5,9
	.half	.L664-.L150
	.byte	1,5,37,7,9
	.half	.L665-.L664
	.byte	3,5,1,5,43,9
	.half	.L666-.L665
	.byte	3,1,1,5,48,9
	.half	.L667-.L666
	.byte	1,5,66,9
	.half	.L668-.L667
	.byte	3,127,1,5,25,9
	.half	.L669-.L668
	.byte	3,126,1,5,33,9
	.half	.L103-.L669
	.byte	3,9,1,5,39,9
	.half	.L670-.L103
	.byte	3,1,1,5,44,9
	.half	.L671-.L670
	.byte	1,5,62,9
	.half	.L672-.L671
	.byte	3,127,1,5,21,9
	.half	.L673-.L672
	.byte	3,126,1,5,40,9
	.half	.L674-.L673
	.byte	3,6,1,5,27,9
	.half	.L104-.L674
	.byte	1,5,40,9
	.half	.L675-.L104
	.byte	1,4,1,5,1,7,9
	.half	.L318-.L675
	.byte	3,249,126,1,7,9
	.half	.L191-.L318
	.byte	0,1,1
.L661:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_setSafetyEndinit')
	.sect	'.debug_ranges'
.L190:
	.word	-1,.L150,0,.L191-.L150,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_changeCpuWatchdogPassword')
	.sect	'.debug_info'
.L192:
	.word	352
	.half	3
	.word	.L193
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L195,.L194
	.byte	2
	.word	.L153
	.byte	3
	.byte	'IfxScuWdt_changeCpuWatchdogPassword',0,1,65,6,1,1,1
	.word	.L112,.L322,.L111
	.byte	4
	.byte	'password',0,1,65,49
	.word	.L283,.L323
	.byte	4
	.byte	'newPassword',0,1,65,66
	.word	.L283,.L324
	.byte	5
	.word	.L112,.L322
	.byte	6
	.byte	'watchdog',0,1,67,25
	.word	.L266,.L325
	.byte	6
	.byte	'wdt_con0',0,1,70,25
	.word	.L270,.L326
	.byte	7
	.word	.L285,.L112,.L2
	.byte	8
	.word	.L286,.L112,.L2
	.byte	6
	.byte	'reg',0,2,143,6,21
	.word	.L287,.L327
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_changeCpuWatchdogPassword')
	.sect	'.debug_abbrev'
.L193:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_changeCpuWatchdogPassword')
	.sect	'.debug_line'
.L194:
	.word	.L677-.L676
.L676:
	.half	3
	.word	.L679-.L678
.L678:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L679:
	.byte	4,2,5,19,7,0,5,2
	.word	.L112
	.byte	3,143,6,1,5,37,9
	.half	.L420-.L112
	.byte	3,1,1,5,5,9
	.half	.L421-.L420
	.byte	1,4,1,5,54,9
	.half	.L2-.L421
	.byte	3,178,122,1,5,32,9
	.half	.L422-.L2
	.byte	3,4,1,5,5,9
	.half	.L423-.L422
	.byte	3,2,1,5,28,7,9
	.half	.L680-.L423
	.byte	3,3,1,9
	.half	.L681-.L680
	.byte	3,1,1,9
	.half	.L682-.L681
	.byte	3,1,1,5,26,9
	.half	.L683-.L682
	.byte	3,3,1,5,24,9
	.half	.L3-.L683
	.byte	3,4,1,9
	.half	.L684-.L3
	.byte	3,1,1,9
	.half	.L685-.L684
	.byte	3,1,1,9
	.half	.L686-.L685
	.byte	3,1,1,5,41,9
	.half	.L687-.L686
	.byte	3,3,1,5,28,9
	.half	.L4-.L687
	.byte	1,5,41,9
	.half	.L688-.L4
	.byte	1,5,1,7,9
	.half	.L689-.L688
	.byte	3,2,1,7,9
	.half	.L196-.L689
	.byte	0,1,1
.L677:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_changeCpuWatchdogPassword')
	.sect	'.debug_ranges'
.L195:
	.word	-1,.L112,0,.L196-.L112,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_changeCpuWatchdogReload')
	.sect	'.debug_info'
.L197:
	.word	359
	.half	3
	.word	.L198
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L200,.L199
	.byte	2
	.word	.L153
	.byte	3
	.byte	'IfxScuWdt_changeCpuWatchdogReload',0,1,96,6,1,1,1
	.word	.L114,.L328,.L113
	.byte	4
	.byte	'password',0,1,96,47
	.word	.L283,.L329
	.byte	4
	.byte	'reload',0,1,96,64
	.word	.L283,.L330
	.byte	5
	.word	.L114,.L328
	.byte	6
	.byte	'coreId',0,1,99,25
	.word	.L331,.L332
	.byte	6
	.byte	'wdt',0,1,100,25
	.word	.L266,.L333
	.byte	6
	.byte	'wdt_con0',0,1,103,25
	.word	.L270,.L334
	.byte	7
	.word	.L285,.L114,.L6
	.byte	8
	.word	.L286,.L114,.L6
	.byte	6
	.byte	'reg',0,2,143,6,21
	.word	.L287,.L335
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_changeCpuWatchdogReload')
	.sect	'.debug_abbrev'
.L198:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_changeCpuWatchdogReload')
	.sect	'.debug_line'
.L199:
	.word	.L691-.L690
.L690:
	.half	3
	.word	.L693-.L692
.L692:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L693:
	.byte	4,2,5,19,7,0,5,2
	.word	.L114
	.byte	3,143,6,1,5,37,9
	.half	.L424-.L114
	.byte	3,1,1,5,5,9
	.half	.L425-.L424
	.byte	1,4,1,5,52,9
	.half	.L6-.L425
	.byte	3,211,122,1,5,27,9
	.half	.L426-.L6
	.byte	3,4,1,5,5,9
	.half	.L427-.L426
	.byte	3,2,1,5,28,7,9
	.half	.L694-.L427
	.byte	3,3,1,9
	.half	.L695-.L694
	.byte	3,1,1,9
	.half	.L696-.L695
	.byte	3,1,1,5,21,9
	.half	.L697-.L696
	.byte	3,3,1,5,24,9
	.half	.L7-.L697
	.byte	3,4,1,9
	.half	.L698-.L7
	.byte	3,1,1,9
	.half	.L699-.L698
	.byte	3,1,1,9
	.half	.L700-.L699
	.byte	3,1,1,5,36,9
	.half	.L701-.L700
	.byte	3,3,1,5,23,9
	.half	.L8-.L701
	.byte	1,5,36,9
	.half	.L702-.L8
	.byte	1,5,1,7,9
	.half	.L703-.L702
	.byte	3,2,1,7,9
	.half	.L201-.L703
	.byte	0,1,1
.L691:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_changeCpuWatchdogReload')
	.sect	'.debug_ranges'
.L200:
	.word	-1,.L114,0,.L201-.L114,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_changeSafetyWatchdogPassword')
	.sect	'.debug_info'
.L202:
	.word	315
	.half	3
	.word	.L203
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L205,.L204
	.byte	2
	.word	.L153
	.byte	3
	.byte	'IfxScuWdt_changeSafetyWatchdogPassword',0,1,129,1,6,1,1,1
	.word	.L116,.L336,.L115
	.byte	4
	.byte	'password',0,1,129,1,52
	.word	.L283,.L337
	.byte	4
	.byte	'newPassword',0,1,129,1,69
	.word	.L283,.L338
	.byte	5
	.word	.L116,.L336
	.byte	6
	.byte	'watchdog',0,1,131,1,23
	.word	.L275,.L339
	.byte	6
	.byte	'wdt_con0',0,1,134,1,23
	.word	.L278,.L340
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_changeSafetyWatchdogPassword')
	.sect	'.debug_abbrev'
.L203:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_changeSafetyWatchdogPassword')
	.sect	'.debug_line'
.L204:
	.word	.L705-.L704
.L704:
	.half	3
	.word	.L707-.L706
.L706:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0,0,0,0,0
.L707:
	.byte	5,45,7,0,5,2
	.word	.L116
	.byte	3,130,1,1,5,32,9
	.half	.L708-.L116
	.byte	3,4,1,5,5,9
	.half	.L429-.L708
	.byte	3,2,1,5,28,7,9
	.half	.L709-.L429
	.byte	3,3,1,9
	.half	.L710-.L709
	.byte	3,1,1,9
	.half	.L711-.L710
	.byte	3,1,1,5,26,9
	.half	.L712-.L711
	.byte	3,3,1,5,24,9
	.half	.L10-.L712
	.byte	3,4,1,9
	.half	.L713-.L10
	.byte	3,1,1,9
	.half	.L714-.L713
	.byte	3,1,1,9
	.half	.L715-.L714
	.byte	3,1,1,5,41,9
	.half	.L716-.L715
	.byte	3,3,1,5,28,9
	.half	.L11-.L716
	.byte	1,5,41,9
	.half	.L717-.L11
	.byte	1,5,1,7,9
	.half	.L718-.L717
	.byte	3,2,1,7,9
	.half	.L206-.L718
	.byte	0,1,1
.L705:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_changeSafetyWatchdogPassword')
	.sect	'.debug_ranges'
.L205:
	.word	-1,.L116,0,.L206-.L116,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_changeSafetyWatchdogReload')
	.sect	'.debug_info'
.L207:
	.word	303
	.half	3
	.word	.L208
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L210,.L209
	.byte	2
	.word	.L153
	.byte	3
	.byte	'IfxScuWdt_changeSafetyWatchdogReload',0,1,160,1,6,1,1,1
	.word	.L118,.L341,.L117
	.byte	4
	.byte	'password',0,1,160,1,50
	.word	.L283,.L342
	.byte	4
	.byte	'reload',0,1,160,1,67
	.word	.L283,.L343
	.byte	5
	.word	.L118,.L341
	.byte	6
	.byte	'wdt',0,1,163,1,23
	.word	.L275,.L344
	.byte	6
	.byte	'wdt_con0',0,1,166,1,23
	.word	.L278,.L345
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_changeSafetyWatchdogReload')
	.sect	'.debug_abbrev'
.L208:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_changeSafetyWatchdogReload')
	.sect	'.debug_line'
.L209:
	.word	.L720-.L719
.L719:
	.half	3
	.word	.L722-.L721
.L721:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0,0,0,0,0
.L722:
	.byte	5,40,7,0,5,2
	.word	.L118
	.byte	3,162,1,1,5,27,9
	.half	.L723-.L118
	.byte	3,4,1,5,5,9
	.half	.L431-.L723
	.byte	3,2,1,5,28,7,9
	.half	.L724-.L431
	.byte	3,3,1,9
	.half	.L725-.L724
	.byte	3,1,1,9
	.half	.L726-.L725
	.byte	3,1,1,5,21,9
	.half	.L727-.L726
	.byte	3,3,1,5,24,9
	.half	.L13-.L727
	.byte	3,4,1,9
	.half	.L728-.L13
	.byte	3,1,1,9
	.half	.L729-.L728
	.byte	3,1,1,9
	.half	.L730-.L729
	.byte	3,1,1,5,36,9
	.half	.L731-.L730
	.byte	3,3,1,5,23,9
	.half	.L14-.L731
	.byte	1,5,36,9
	.half	.L732-.L14
	.byte	1,5,1,7,9
	.half	.L733-.L732
	.byte	3,2,1,7,9
	.half	.L211-.L733
	.byte	0,1,1
.L720:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_changeSafetyWatchdogReload')
	.sect	'.debug_ranges'
.L210:
	.word	-1,.L118,0,.L211-.L118,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_disableCpuWatchdog')
	.sect	'.debug_info'
.L212:
	.word	408
	.half	3
	.word	.L213
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L215,.L214
	.byte	2
	.word	.L153
	.byte	3
	.byte	'IfxScuWdt_disableCpuWatchdog',0,1,204,1,6,1,1,1
	.word	.L124,.L346,.L123
	.byte	4
	.byte	'password',0,1,204,1,42
	.word	.L283,.L347
	.byte	5
	.word	.L124,.L346
	.byte	6
	.byte	'coreId',0,1,207,1,21
	.word	.L331,.L348
	.byte	6
	.byte	'wdt',0,1,208,1,21
	.word	.L266,.L349
	.byte	7
	.word	.L285,.L124,.L23
	.byte	8
	.word	.L286,.L124,.L23
	.byte	6
	.byte	'reg',0,2,143,6,21
	.word	.L287,.L350
	.byte	0,0,7
	.word	.L289,.L351,.L352
	.byte	9
	.word	.L292,.L353
	.byte	9
	.word	.L294,.L354
	.byte	10
	.word	.L296,.L351,.L352
	.byte	0,7
	.word	.L307,.L355,.L356
	.byte	9
	.word	.L310,.L357
	.byte	9
	.word	.L312,.L358
	.byte	10
	.word	.L314,.L355,.L356
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_disableCpuWatchdog')
	.sect	'.debug_abbrev'
.L213:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,9,5,0,49,16,2
	.byte	6,0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_disableCpuWatchdog')
	.sect	'.debug_line'
.L214:
	.word	.L735-.L734
.L734:
	.half	3
	.word	.L737-.L736
.L736:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L737:
	.byte	4,2,5,19,7,0,5,2
	.word	.L124
	.byte	3,143,6,1,5,37,9
	.half	.L437-.L124
	.byte	3,1,1,5,5,9
	.half	.L438-.L437
	.byte	1,4,1,5,48,9
	.half	.L23-.L438
	.byte	3,191,123,1,4,3,5,25,9
	.half	.L351-.L23
	.byte	3,231,1,1,5,5,9
	.half	.L738-.L351
	.byte	1,5,38,7,9
	.half	.L739-.L738
	.byte	3,5,1,5,45,9
	.half	.L740-.L739
	.byte	3,1,1,5,50,9
	.half	.L741-.L740
	.byte	1,5,69,9
	.half	.L742-.L741
	.byte	3,127,1,5,26,9
	.half	.L743-.L742
	.byte	3,126,1,5,34,9
	.half	.L24-.L743
	.byte	3,9,1,5,41,9
	.half	.L744-.L24
	.byte	3,1,1,5,46,9
	.half	.L745-.L744
	.byte	1,5,65,9
	.half	.L746-.L745
	.byte	3,127,1,5,22,9
	.half	.L747-.L746
	.byte	3,126,1,5,41,9
	.half	.L748-.L747
	.byte	3,6,1,5,28,9
	.half	.L25-.L748
	.byte	1,5,41,9
	.half	.L749-.L25
	.byte	1,4,1,5,16,7,9
	.half	.L352-.L749
	.byte	3,140,126,1,5,20,9
	.half	.L750-.L352
	.byte	1,4,3,5,25,9
	.half	.L355-.L750
	.byte	3,187,2,1,5,5,9
	.half	.L751-.L355
	.byte	1,5,38,7,9
	.half	.L752-.L751
	.byte	3,5,1,5,45,9
	.half	.L753-.L752
	.byte	3,1,1,5,50,9
	.half	.L754-.L753
	.byte	1,5,69,9
	.half	.L755-.L754
	.byte	3,127,1,5,26,9
	.half	.L756-.L755
	.byte	3,126,1,5,34,9
	.half	.L27-.L756
	.byte	3,9,1,5,41,9
	.half	.L757-.L27
	.byte	3,1,1,5,46,9
	.half	.L758-.L757
	.byte	1,5,65,9
	.half	.L759-.L758
	.byte	3,127,1,5,22,9
	.half	.L760-.L759
	.byte	3,126,1,5,41,9
	.half	.L761-.L760
	.byte	3,6,1,5,28,9
	.half	.L28-.L761
	.byte	1,5,41,9
	.half	.L762-.L28
	.byte	1,4,1,5,1,7,9
	.half	.L356-.L762
	.byte	3,183,125,1,7,9
	.half	.L216-.L356
	.byte	0,1,1
.L735:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_disableCpuWatchdog')
	.sect	'.debug_ranges'
.L215:
	.word	-1,.L124,0,.L216-.L124,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_disableSafetyWatchdog')
	.sect	'.debug_info'
.L217:
	.word	311
	.half	3
	.word	.L218
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L220,.L219
	.byte	2
	.word	.L153
	.byte	3
	.byte	'IfxScuWdt_disableSafetyWatchdog',0,1,216,1,6,1,1,1
	.word	.L126,.L359,.L125
	.byte	4
	.byte	'password',0,1,216,1,45
	.word	.L283,.L360
	.byte	5
	.word	.L126,.L359
	.byte	6
	.word	.L299,.L126,.L361
	.byte	7
	.word	.L301,.L362
	.byte	8
	.word	.L303,.L126,.L361
	.byte	0,6
	.word	.L317,.L363,.L364
	.byte	7
	.word	.L319,.L365
	.byte	8
	.word	.L321,.L363,.L364
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_disableSafetyWatchdog')
	.sect	'.debug_abbrev'
.L218:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_disableSafetyWatchdog')
	.sect	'.debug_line'
.L219:
	.word	.L764-.L763
.L763:
	.half	3
	.word	.L766-.L765
.L765:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L766:
	.byte	4,2,5,24,7,0,5,2
	.word	.L126
	.byte	3,205,3,1,5,5,9
	.half	.L767-.L126
	.byte	1,5,37,7,9
	.half	.L768-.L767
	.byte	3,5,1,5,43,9
	.half	.L769-.L768
	.byte	3,1,1,5,48,9
	.half	.L770-.L769
	.byte	1,5,66,9
	.half	.L771-.L770
	.byte	3,127,1,5,25,9
	.half	.L772-.L771
	.byte	3,126,1,5,33,9
	.half	.L30-.L772
	.byte	3,9,1,5,39,9
	.half	.L773-.L30
	.byte	3,1,1,5,44,9
	.half	.L774-.L773
	.byte	1,5,62,9
	.half	.L775-.L774
	.byte	3,127,1,5,21,9
	.half	.L776-.L775
	.byte	3,126,1,5,40,9
	.half	.L777-.L776
	.byte	3,6,1,5,27,9
	.half	.L31-.L777
	.byte	1,5,40,9
	.half	.L778-.L31
	.byte	1,4,1,5,20,7,9
	.half	.L361-.L778
	.byte	3,253,125,1,5,24,9
	.half	.L779-.L361
	.byte	1,4,2,9
	.half	.L363-.L779
	.byte	3,202,2,1,5,5,9
	.half	.L780-.L363
	.byte	1,5,37,7,9
	.half	.L781-.L780
	.byte	3,5,1,5,43,9
	.half	.L782-.L781
	.byte	3,1,1,5,48,9
	.half	.L783-.L782
	.byte	1,5,66,9
	.half	.L784-.L783
	.byte	3,127,1,5,25,9
	.half	.L785-.L784
	.byte	3,126,1,5,33,9
	.half	.L33-.L785
	.byte	3,9,1,5,39,9
	.half	.L786-.L33
	.byte	3,1,1,5,44,9
	.half	.L787-.L786
	.byte	1,5,62,9
	.half	.L788-.L787
	.byte	3,127,1,5,21,9
	.half	.L789-.L788
	.byte	3,126,1,5,40,9
	.half	.L790-.L789
	.byte	3,6,1,5,27,9
	.half	.L34-.L790
	.byte	1,5,40,9
	.half	.L791-.L34
	.byte	1,4,1,5,1,7,9
	.half	.L364-.L791
	.byte	3,168,125,1,7,9
	.half	.L221-.L364
	.byte	0,1,1
.L764:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_disableSafetyWatchdog')
	.sect	'.debug_ranges'
.L220:
	.word	-1,.L126,0,.L221-.L126,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_enableCpuWatchdog')
	.sect	'.debug_info'
.L222:
	.word	407
	.half	3
	.word	.L223
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L225,.L224
	.byte	2
	.word	.L153
	.byte	3
	.byte	'IfxScuWdt_enableCpuWatchdog',0,1,224,1,6,1,1,1
	.word	.L128,.L366,.L127
	.byte	4
	.byte	'password',0,1,224,1,41
	.word	.L283,.L367
	.byte	5
	.word	.L128,.L366
	.byte	6
	.byte	'coreId',0,1,227,1,21
	.word	.L331,.L368
	.byte	6
	.byte	'wdt',0,1,228,1,21
	.word	.L266,.L369
	.byte	7
	.word	.L285,.L128,.L36
	.byte	8
	.word	.L286,.L128,.L36
	.byte	6
	.byte	'reg',0,2,143,6,21
	.word	.L287,.L370
	.byte	0,0,7
	.word	.L289,.L371,.L372
	.byte	9
	.word	.L292,.L373
	.byte	9
	.word	.L294,.L374
	.byte	10
	.word	.L296,.L371,.L372
	.byte	0,7
	.word	.L307,.L375,.L376
	.byte	9
	.word	.L310,.L377
	.byte	9
	.word	.L312,.L378
	.byte	10
	.word	.L314,.L375,.L376
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_enableCpuWatchdog')
	.sect	'.debug_abbrev'
.L223:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,9,5,0,49,16,2
	.byte	6,0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_enableCpuWatchdog')
	.sect	'.debug_line'
.L224:
	.word	.L793-.L792
.L792:
	.half	3
	.word	.L795-.L794
.L794:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L795:
	.byte	4,2,5,19,7,0,5,2
	.word	.L128
	.byte	3,143,6,1,5,37,9
	.half	.L441-.L128
	.byte	3,1,1,5,5,9
	.half	.L442-.L441
	.byte	1,4,1,5,48,9
	.half	.L36-.L442
	.byte	3,211,123,1,4,3,5,25,9
	.half	.L371-.L36
	.byte	3,211,1,1,5,5,9
	.half	.L796-.L371
	.byte	1,5,38,7,9
	.half	.L797-.L796
	.byte	3,5,1,5,45,9
	.half	.L798-.L797
	.byte	3,1,1,5,50,9
	.half	.L799-.L798
	.byte	1,5,69,9
	.half	.L800-.L799
	.byte	3,127,1,5,26,9
	.half	.L801-.L800
	.byte	3,126,1,5,34,9
	.half	.L37-.L801
	.byte	3,9,1,5,41,9
	.half	.L802-.L37
	.byte	3,1,1,5,46,9
	.half	.L803-.L802
	.byte	1,5,65,9
	.half	.L804-.L803
	.byte	3,127,1,5,22,9
	.half	.L805-.L804
	.byte	3,126,1,5,41,9
	.half	.L806-.L805
	.byte	3,6,1,5,28,9
	.half	.L38-.L806
	.byte	1,5,41,9
	.half	.L807-.L38
	.byte	1,4,1,5,16,7,9
	.half	.L372-.L807
	.byte	3,160,126,1,5,20,9
	.half	.L808-.L372
	.byte	1,4,3,5,25,9
	.half	.L375-.L808
	.byte	3,167,2,1,5,5,9
	.half	.L809-.L375
	.byte	1,5,38,7,9
	.half	.L810-.L809
	.byte	3,5,1,5,45,9
	.half	.L811-.L810
	.byte	3,1,1,5,50,9
	.half	.L812-.L811
	.byte	1,5,69,9
	.half	.L813-.L812
	.byte	3,127,1,5,26,9
	.half	.L814-.L813
	.byte	3,126,1,5,34,9
	.half	.L40-.L814
	.byte	3,9,1,5,41,9
	.half	.L815-.L40
	.byte	3,1,1,5,46,9
	.half	.L816-.L815
	.byte	1,5,65,9
	.half	.L817-.L816
	.byte	3,127,1,5,22,9
	.half	.L818-.L817
	.byte	3,126,1,5,41,9
	.half	.L819-.L818
	.byte	3,6,1,5,28,9
	.half	.L41-.L819
	.byte	1,5,41,9
	.half	.L820-.L41
	.byte	1,4,1,5,1,7,9
	.half	.L376-.L820
	.byte	3,203,125,1,7,9
	.half	.L226-.L376
	.byte	0,1,1
.L793:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_enableCpuWatchdog')
	.sect	'.debug_ranges'
.L225:
	.word	-1,.L128,0,.L226-.L128,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_enableSafetyWatchdog')
	.sect	'.debug_info'
.L227:
	.word	310
	.half	3
	.word	.L228
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L230,.L229
	.byte	2
	.word	.L153
	.byte	3
	.byte	'IfxScuWdt_enableSafetyWatchdog',0,1,236,1,6,1,1,1
	.word	.L130,.L379,.L129
	.byte	4
	.byte	'password',0,1,236,1,44
	.word	.L283,.L380
	.byte	5
	.word	.L130,.L379
	.byte	6
	.word	.L299,.L130,.L381
	.byte	7
	.word	.L301,.L382
	.byte	8
	.word	.L303,.L130,.L381
	.byte	0,6
	.word	.L317,.L383,.L384
	.byte	7
	.word	.L319,.L385
	.byte	8
	.word	.L321,.L383,.L384
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_enableSafetyWatchdog')
	.sect	'.debug_abbrev'
.L228:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_enableSafetyWatchdog')
	.sect	'.debug_line'
.L229:
	.word	.L822-.L821
.L821:
	.half	3
	.word	.L824-.L823
.L823:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L824:
	.byte	4,2,5,24,7,0,5,2
	.word	.L130
	.byte	3,205,3,1,5,5,9
	.half	.L825-.L130
	.byte	1,5,37,7,9
	.half	.L826-.L825
	.byte	3,5,1,5,43,9
	.half	.L827-.L826
	.byte	3,1,1,5,48,9
	.half	.L828-.L827
	.byte	1,5,66,9
	.half	.L829-.L828
	.byte	3,127,1,5,25,9
	.half	.L830-.L829
	.byte	3,126,1,5,33,9
	.half	.L43-.L830
	.byte	3,9,1,5,39,9
	.half	.L831-.L43
	.byte	3,1,1,5,44,9
	.half	.L832-.L831
	.byte	1,5,62,9
	.half	.L833-.L832
	.byte	3,127,1,5,21,9
	.half	.L834-.L833
	.byte	3,126,1,5,40,9
	.half	.L835-.L834
	.byte	3,6,1,5,27,9
	.half	.L44-.L835
	.byte	1,5,40,9
	.half	.L836-.L44
	.byte	1,4,1,5,20,7,9
	.half	.L381-.L836
	.byte	3,145,126,1,5,24,9
	.half	.L837-.L381
	.byte	1,4,2,9
	.half	.L383-.L837
	.byte	3,182,2,1,5,5,9
	.half	.L838-.L383
	.byte	1,5,37,7,9
	.half	.L839-.L838
	.byte	3,5,1,5,43,9
	.half	.L840-.L839
	.byte	3,1,1,5,48,9
	.half	.L841-.L840
	.byte	1,5,66,9
	.half	.L842-.L841
	.byte	3,127,1,5,25,9
	.half	.L843-.L842
	.byte	3,126,1,5,33,9
	.half	.L46-.L843
	.byte	3,9,1,5,39,9
	.half	.L844-.L46
	.byte	3,1,1,5,44,9
	.half	.L845-.L844
	.byte	1,5,62,9
	.half	.L846-.L845
	.byte	3,127,1,5,21,9
	.half	.L847-.L846
	.byte	3,126,1,5,40,9
	.half	.L848-.L847
	.byte	3,6,1,5,27,9
	.half	.L47-.L848
	.byte	1,5,40,9
	.half	.L849-.L47
	.byte	1,4,1,5,1,7,9
	.half	.L384-.L849
	.byte	3,188,125,1,7,9
	.half	.L231-.L384
	.byte	0,1,1
.L822:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_enableSafetyWatchdog')
	.sect	'.debug_ranges'
.L230:
	.word	-1,.L130,0,.L231-.L130,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_getCpuWatchdogPassword')
	.sect	'.debug_info'
.L232:
	.word	326
	.half	3
	.word	.L233
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L235,.L234
	.byte	2
	.word	.L153
	.byte	3
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,1,244,1,8
	.word	.L283
	.byte	1,1,1
	.word	.L132,.L386,.L131
	.byte	4
	.word	.L132,.L386
	.byte	5
	.word	.L285,.L132,.L49
	.byte	6
	.word	.L286,.L132,.L49
	.byte	7
	.byte	'reg',0,2,143,6,21
	.word	.L287,.L387
	.byte	0,0,5
	.word	.L388,.L389,.L50
	.byte	8
	.word	.L390,.L391
	.byte	6
	.word	.L392,.L389,.L50
	.byte	7
	.byte	'password',0,3,229,3,12
	.word	.L283,.L393
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_getCpuWatchdogPassword')
	.sect	'.debug_abbrev'
.L233:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,11,1,49,16,17,1
	.byte	18,1,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,8,5,0,49,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_getCpuWatchdogPassword')
	.sect	'.debug_line'
.L234:
	.word	.L851-.L850
.L850:
	.half	3
	.word	.L853-.L852
.L852:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L853:
	.byte	4,2,5,19,7,0,5,2
	.word	.L132
	.byte	3,143,6,1,5,37,9
	.half	.L444-.L132
	.byte	3,1,1,5,5,9
	.half	.L445-.L444
	.byte	1,4,1,5,69,9
	.half	.L49-.L445
	.byte	3,229,123,1,4,3,5,33,9
	.half	.L389-.L49
	.byte	3,244,1,1,5,14,9
	.half	.L446-.L389
	.byte	3,1,1,5,5,9
	.half	.L447-.L446
	.byte	3,2,1,4,1,9
	.half	.L50-.L447
	.byte	3,137,126,1,5,1,9
	.half	.L51-.L50
	.byte	3,1,1,7,9
	.half	.L236-.L51
	.byte	0,1,1
.L851:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_getCpuWatchdogPassword')
	.sect	'.debug_ranges'
.L235:
	.word	-1,.L132,0,.L236-.L132,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_getCpuWatchdogEndInit')
	.sect	'.debug_info'
.L237:
	.word	302
	.half	3
	.word	.L238
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L240,.L239
	.byte	2
	.word	.L153
	.byte	3
	.byte	'IfxScuWdt_getCpuWatchdogEndInit',0,1,250,1,9
	.word	.L394
	.byte	1,1,1
	.word	.L134,.L395,.L133
	.byte	4
	.word	.L134,.L395
	.byte	5
	.word	.L285,.L134,.L52
	.byte	6
	.word	.L286,.L134,.L52
	.byte	7
	.byte	'reg',0,2,143,6,21
	.word	.L287,.L396
	.byte	0,0,5
	.word	.L397,.L398,.L53
	.byte	8
	.word	.L399,.L400
	.byte	9
	.word	.L401,.L398,.L53
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_getCpuWatchdogEndInit')
	.sect	'.debug_abbrev'
.L238:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,11,1,49,16,17,1
	.byte	18,1,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_getCpuWatchdogEndInit')
	.sect	'.debug_line'
.L239:
	.word	.L855-.L854
.L854:
	.half	3
	.word	.L857-.L856
.L856:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L857:
	.byte	4,2,5,19,7,0,5,2
	.word	.L134
	.byte	3,143,6,1,5,37,9
	.half	.L448-.L134
	.byte	3,1,1,5,5,9
	.half	.L449-.L448
	.byte	1,4,1,5,77,9
	.half	.L52-.L449
	.byte	3,235,123,1,4,3,5,37,9
	.half	.L398-.L52
	.byte	3,247,1,1,5,5,9
	.half	.L858-.L398
	.byte	1,4,1,9
	.half	.L53-.L858
	.byte	3,137,126,1,5,1,9
	.half	.L54-.L53
	.byte	3,1,1,7,9
	.half	.L241-.L54
	.byte	0,1,1
.L855:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_getCpuWatchdogEndInit')
	.sect	'.debug_ranges'
.L240:
	.word	-1,.L134,0,.L241-.L134,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_getSafetyWatchdogPassword')
	.sect	'.debug_info'
.L242:
	.word	297
	.half	3
	.word	.L243
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L245,.L244
	.byte	2
	.word	.L153
	.byte	3
	.byte	'IfxScuWdt_getSafetyWatchdogPassword',0,1,128,2,8
	.word	.L283
	.byte	1,1,1
	.word	.L136,.L402,.L135
	.byte	4
	.word	.L136,.L402
	.byte	5
	.word	.L403,.L136,.L55
	.byte	6
	.word	.L404,.L136,.L55
	.byte	7
	.byte	'password',0,2,255,3,19
	.word	.L283,.L405
	.byte	7
	.byte	'watchdog',0,2,128,4,19
	.word	.L275,.L406
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_getSafetyWatchdogPassword')
	.sect	'.debug_abbrev'
.L243:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,11,1,49,16,17,1
	.byte	18,1,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_getSafetyWatchdogPassword')
	.sect	'.debug_line'
.L244:
	.word	.L860-.L859
.L859:
	.half	3
	.word	.L862-.L861
.L861:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0,0,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.h',0,0,0,0,0
.L862:
	.byte	4,2,5,41,7,0,5,2
	.word	.L136
	.byte	3,255,3,1,5,33,9
	.half	.L863-.L136
	.byte	3,5,1,5,14,9
	.half	.L451-.L863
	.byte	3,1,1,5,5,9
	.half	.L452-.L451
	.byte	3,2,1,4,1,9
	.half	.L55-.L452
	.byte	3,250,125,1,5,1,9
	.half	.L56-.L55
	.byte	3,1,1,7,9
	.half	.L246-.L56
	.byte	0,1,1
.L860:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_getSafetyWatchdogPassword')
	.sect	'.debug_ranges'
.L245:
	.word	-1,.L136,0,.L246-.L136,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_serviceCpuWatchdog')
	.sect	'.debug_info'
.L247:
	.word	235
	.half	3
	.word	.L248
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L250,.L249
	.byte	2
	.word	.L153
	.byte	3
	.byte	'IfxScuWdt_serviceCpuWatchdog',0,1,153,3,6,1,1,1
	.word	.L144,.L407,.L143
	.byte	4
	.byte	'password',0,1,153,3,42
	.word	.L283,.L408
	.byte	5
	.word	.L144,.L407
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_serviceCpuWatchdog')
	.sect	'.debug_abbrev'
.L248:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_serviceCpuWatchdog')
	.sect	'.debug_line'
.L249:
	.word	.L865-.L864
.L864:
	.half	3
	.word	.L867-.L866
.L866:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0,0,0,0,0
.L867:
	.byte	5,29,7,0,5,2
	.word	.L144
	.byte	3,154,3,1,5,1,9
	.half	.L459-.L144
	.byte	3,1,1,7,9
	.half	.L251-.L459
	.byte	0,1,1
.L865:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_serviceCpuWatchdog')
	.sect	'.debug_ranges'
.L250:
	.word	-1,.L144,0,.L251-.L144,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_serviceSafetyWatchdog')
	.sect	'.debug_info'
.L252:
	.word	238
	.half	3
	.word	.L253
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L255,.L254
	.byte	2
	.word	.L153
	.byte	3
	.byte	'IfxScuWdt_serviceSafetyWatchdog',0,1,159,3,6,1,1,1
	.word	.L146,.L409,.L145
	.byte	4
	.byte	'password',0,1,159,3,45
	.word	.L283,.L410
	.byte	5
	.word	.L146,.L409
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_serviceSafetyWatchdog')
	.sect	'.debug_abbrev'
.L253:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_serviceSafetyWatchdog')
	.sect	'.debug_line'
.L254:
	.word	.L869-.L868
.L868:
	.half	3
	.word	.L871-.L870
.L870:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0,0,0,0,0
.L871:
	.byte	5,32,7,0,5,2
	.word	.L146
	.byte	3,160,3,1,5,1,9
	.half	.L460-.L146
	.byte	3,1,1,7,9
	.half	.L256-.L460
	.byte	0,1,1
.L869:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_serviceSafetyWatchdog')
	.sect	'.debug_ranges'
.L255:
	.word	-1,.L146,0,.L256-.L146,0,0
	.sdecl	'.debug_info',debug,cluster('IfxScuWdt_enableWatchdogWithDebugger')
	.sect	'.debug_info'
.L257:
	.word	390
	.half	3
	.word	.L258
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L260,.L259
	.byte	2
	.word	.L153
	.byte	3
	.byte	'IfxScuWdt_enableWatchdogWithDebugger',0,1,177,3,9
	.word	.L394
	.byte	1,1,1
	.word	.L152,.L411,.L151
	.byte	4
	.word	.L152,.L411
	.byte	5
	.byte	'status',0,1,179,3,22
	.word	.L394,.L412
	.byte	5
	.byte	'oenEnabled',0,1,179,3,34
	.word	.L394,.L413
	.byte	5
	.byte	'watchdogEnabled',0,1,179,3,50
	.word	.L394,.L414
	.byte	5
	.byte	'ostateValue',0,1,180,3,22
	.word	.L331,.L415
	.byte	5
	.byte	'oecPtr',0,1,182,3,22
	.word	.L416,.L417
	.byte	5
	.byte	'ostatePtr',0,1,183,3,22
	.word	.L416,.L418
	.byte	5
	.byte	'ocntrlPtr',0,1,184,3,22
	.word	.L416,.L419
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxScuWdt_enableWatchdogWithDebugger')
	.sect	'.debug_abbrev'
.L258:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxScuWdt_enableWatchdogWithDebugger')
	.sect	'.debug_line'
.L259:
	.word	.L873-.L872
.L872:
	.half	3
	.word	.L875-.L874
.L874:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std\\IfxScuWdt.c',0,0,0,0,0
.L875:
	.byte	5,29,7,0,5,2
	.word	.L152
	.byte	3,178,3,1,5,34,9
	.half	.L465-.L152
	.byte	3,3,1,9
	.half	.L466-.L465
	.byte	3,1,1,9
	.half	.L467-.L466
	.byte	3,1,1,5,19,9
	.half	.L468-.L467
	.byte	3,3,1,5,32,9
	.half	.L469-.L468
	.byte	3,1,1,5,10,9
	.half	.L471-.L469
	.byte	3,2,1,5,19,7,9
	.half	.L876-.L471
	.byte	3,4,1,5,17,9
	.half	.L470-.L876
	.byte	1,5,19,9
	.half	.L877-.L470
	.byte	3,1,1,5,17,9
	.half	.L878-.L877
	.byte	1,5,19,9
	.half	.L879-.L878
	.byte	3,1,1,5,17,9
	.half	.L880-.L879
	.byte	1,5,19,9
	.half	.L881-.L880
	.byte	3,1,1,5,17,9
	.half	.L882-.L881
	.byte	1,5,23,9
	.half	.L883-.L882
	.byte	3,3,1,5,36,9
	.half	.L472-.L883
	.byte	3,1,1,5,5,9
	.half	.L106-.L472
	.byte	3,3,1,5,22,7,9
	.half	.L884-.L106
	.byte	3,3,1,5,20,9
	.half	.L473-.L884
	.byte	1,5,32,9
	.half	.L885-.L473
	.byte	1,5,16,9
	.half	.L107-.L885
	.byte	3,4,1,5,23,9
	.half	.L108-.L107
	.byte	3,6,1,5,36,9
	.half	.L474-.L108
	.byte	3,1,1,5,10,9
	.half	.L475-.L474
	.byte	3,2,1,5,16,7,9
	.half	.L886-.L475
	.byte	3,2,1,5,5,9
	.half	.L109-.L886
	.byte	3,5,1,5,1,9
	.half	.L110-.L109
	.byte	3,1,1,7,9
	.half	.L261-.L110
	.byte	0,1,1
.L873:
	.sdecl	'.debug_ranges',debug,cluster('IfxScuWdt_enableWatchdogWithDebugger')
	.sect	'.debug_ranges'
.L260:
	.word	-1,.L152,0,.L261-.L152,0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_changeCpuWatchdogPassword')
	.sect	'.debug_loc'
.L111:
	.word	-1,.L112,0,.L322-.L112
	.half	2
	.byte	138,0
	.word	0,0
.L324:
	.word	-1,.L112,0,.L322-.L112
	.half	1
	.byte	85
	.word	0,0
.L323:
	.word	-1,.L112,0,.L322-.L112
	.half	1
	.byte	84
	.word	0,0
.L327:
	.word	-1,.L112,.L420-.L112,.L421-.L112
	.half	1
	.byte	95
	.word	0,0
.L325:
	.word	-1,.L112,.L422-.L112,.L322-.L112
	.half	1
	.byte	111
	.word	0,0
.L326:
	.word	-1,.L112,.L423-.L112,.L4-.L112
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_changeCpuWatchdogReload')
	.sect	'.debug_loc'
.L113:
	.word	-1,.L114,0,.L328-.L114
	.half	2
	.byte	138,0
	.word	0,0
.L332:
	.word	0,0
.L329:
	.word	-1,.L114,0,.L328-.L114
	.half	1
	.byte	84
	.word	0,0
.L335:
	.word	-1,.L114,.L424-.L114,.L425-.L114
	.half	1
	.byte	95
	.word	0,0
.L330:
	.word	-1,.L114,0,.L328-.L114
	.half	1
	.byte	85
	.word	0,0
.L333:
	.word	-1,.L114,.L426-.L114,.L328-.L114
	.half	1
	.byte	111
	.word	0,0
.L334:
	.word	-1,.L114,.L427-.L114,.L8-.L114
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_changeSafetyWatchdogPassword')
	.sect	'.debug_loc'
.L115:
	.word	-1,.L116,0,.L336-.L116
	.half	2
	.byte	138,0
	.word	0,0
.L338:
	.word	-1,.L116,0,.L336-.L116
	.half	1
	.byte	85
	.word	0,0
.L337:
	.word	-1,.L116,0,.L336-.L116
	.half	1
	.byte	84
	.word	0,0
.L339:
	.word	-1,.L116,.L428-.L116,.L336-.L116
	.half	1
	.byte	111
	.word	0,0
.L340:
	.word	-1,.L116,.L429-.L116,.L11-.L116
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_changeSafetyWatchdogReload')
	.sect	'.debug_loc'
.L117:
	.word	-1,.L118,0,.L341-.L118
	.half	2
	.byte	138,0
	.word	0,0
.L342:
	.word	-1,.L118,0,.L341-.L118
	.half	1
	.byte	84
	.word	0,0
.L343:
	.word	-1,.L118,0,.L341-.L118
	.half	1
	.byte	85
	.word	0,0
.L344:
	.word	-1,.L118,.L430-.L118,.L341-.L118
	.half	1
	.byte	111
	.word	0,0
.L345:
	.word	-1,.L118,.L431-.L118,.L14-.L118
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_clearCpuEndinit')
	.sect	'.debug_loc'
.L119:
	.word	-1,.L120,0,.L282-.L120
	.half	2
	.byte	138,0
	.word	0,0
.L284:
	.word	-1,.L120,0,.L432-.L120
	.half	1
	.byte	84
	.word	0,0
.L295:
	.word	0,0
.L288:
	.word	-1,.L120,.L433-.L120,.L434-.L120
	.half	1
	.byte	95
	.word	0,0
.L293:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_clearSafetyEndinit')
	.sect	'.debug_loc'
.L121:
	.word	-1,.L122,0,.L297-.L122
	.half	2
	.byte	138,0
	.word	0,0
.L298:
	.word	-1,.L122,0,.L435-.L122
	.half	1
	.byte	84
	.word	0,0
.L302:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_disableCpuWatchdog')
	.sect	'.debug_loc'
.L123:
	.word	-1,.L124,0,.L346-.L124
	.half	2
	.byte	138,0
	.word	0,0
.L348:
	.word	0,0
.L347:
	.word	-1,.L124,0,.L436-.L124
	.half	1
	.byte	84
	.word	0,0
.L354:
	.word	0,0
.L358:
	.word	0,0
.L350:
	.word	-1,.L124,.L437-.L124,.L438-.L124
	.half	1
	.byte	95
	.word	0,0
.L353:
	.word	0,0
.L357:
	.word	0,0
.L349:
	.word	-1,.L124,.L351-.L124,.L346-.L124
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_disableSafetyWatchdog')
	.sect	'.debug_loc'
.L125:
	.word	-1,.L126,0,.L359-.L126
	.half	2
	.byte	138,0
	.word	0,0
.L360:
	.word	-1,.L126,0,.L439-.L126
	.half	1
	.byte	84
	.word	0,0
.L362:
	.word	0,0
.L365:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_enableCpuWatchdog')
	.sect	'.debug_loc'
.L127:
	.word	-1,.L128,0,.L366-.L128
	.half	2
	.byte	138,0
	.word	0,0
.L368:
	.word	0,0
.L367:
	.word	-1,.L128,0,.L440-.L128
	.half	1
	.byte	84
	.word	0,0
.L374:
	.word	0,0
.L378:
	.word	0,0
.L370:
	.word	-1,.L128,.L441-.L128,.L442-.L128
	.half	1
	.byte	95
	.word	0,0
.L373:
	.word	0,0
.L377:
	.word	0,0
.L369:
	.word	-1,.L128,.L371-.L128,.L366-.L128
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_enableSafetyWatchdog')
	.sect	'.debug_loc'
.L129:
	.word	-1,.L130,0,.L379-.L130
	.half	2
	.byte	138,0
	.word	0,0
.L380:
	.word	-1,.L130,0,.L443-.L130
	.half	1
	.byte	84
	.word	0,0
.L382:
	.word	0,0
.L385:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_enableWatchdogWithDebugger')
	.sect	'.debug_loc'
.L151:
	.word	-1,.L152,0,.L411-.L152
	.half	2
	.byte	138,0
	.word	0,0
.L419:
	.word	-1,.L152,.L468-.L152,.L411-.L152
	.half	1
	.byte	100
	.word	0,0
.L417:
	.word	-1,.L152,.L466-.L152,.L411-.L152
	.half	1
	.byte	111
	.word	0,0
.L413:
	.word	-1,.L152,.L469-.L152,.L470-.L152
	.half	1
	.byte	95
	.word	.L472-.L152,.L473-.L152
	.half	1
	.byte	95
	.word	.L107-.L152,.L108-.L152
	.half	1
	.byte	95
	.word	0,0
.L418:
	.word	-1,.L152,.L467-.L152,.L411-.L152
	.half	1
	.byte	98
	.word	0,0
.L415:
	.word	-1,.L152,.L469-.L152,.L471-.L152
	.half	1
	.byte	95
	.word	.L472-.L152,.L106-.L152
	.half	1
	.byte	95
	.word	.L474-.L152,.L475-.L152
	.half	1
	.byte	95
	.word	0,0
.L412:
	.word	-1,.L152,.L465-.L152,.L411-.L152
	.half	1
	.byte	82
	.word	0,0
.L414:
	.word	-1,.L152,.L474-.L152,.L411-.L152
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_getCpuWatchdogEndInit')
	.sect	'.debug_loc'
.L133:
	.word	-1,.L134,0,.L395-.L134
	.half	2
	.byte	138,0
	.word	0,0
.L396:
	.word	-1,.L134,.L448-.L134,.L449-.L134
	.half	1
	.byte	95
	.word	0,0
.L400:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_getCpuWatchdogPassword')
	.sect	'.debug_loc'
.L131:
	.word	-1,.L132,0,.L386-.L132
	.half	2
	.byte	138,0
	.word	0,0
.L393:
	.word	-1,.L132,.L446-.L132,.L447-.L132
	.half	1
	.byte	95
	.word	.L447-.L132,.L386-.L132
	.half	1
	.byte	82
	.word	0,0
.L387:
	.word	-1,.L132,.L444-.L132,.L445-.L132
	.half	1
	.byte	95
	.word	0,0
.L391:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_getSafetyWatchdogPassword')
	.sect	'.debug_loc'
.L135:
	.word	-1,.L136,0,.L402-.L136
	.half	2
	.byte	138,0
	.word	0,0
.L405:
	.word	-1,.L136,.L451-.L136,.L452-.L136
	.half	1
	.byte	95
	.word	.L452-.L136,.L402-.L136
	.half	1
	.byte	82
	.word	0,0
.L406:
	.word	-1,.L136,.L450-.L136,.L402-.L136
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_initConfig')
	.sect	'.debug_loc'
.L137:
	.word	-1,.L138,0,.L262-.L138
	.half	2
	.byte	138,0
	.word	0,0
.L264:
	.word	-1,.L138,0,.L262-.L138
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_initCpuWatchdog')
	.sect	'.debug_loc'
.L139:
	.word	-1,.L140,0,.L265-.L140
	.half	2
	.byte	138,0
	.word	0,0
.L269:
	.word	-1,.L140,0,.L453-.L140
	.half	1
	.byte	101
	.word	0,0
.L267:
	.word	-1,.L140,0,.L453-.L140
	.half	1
	.byte	100
	.word	0,0
.L271:
	.word	-1,.L140,.L454-.L140,.L58-.L140
	.half	1
	.byte	95
	.word	0,0
.L273:
	.word	-1,.L140,.L455-.L140,.L453-.L140
	.half	1
	.byte	81
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_initSafetyWatchdog')
	.sect	'.debug_loc'
.L141:
	.word	-1,.L142,0,.L274-.L142
	.half	2
	.byte	138,0
	.word	0,0
.L277:
	.word	-1,.L142,0,.L456-.L142
	.half	1
	.byte	101
	.word	0,0
.L276:
	.word	-1,.L142,0,.L456-.L142
	.half	1
	.byte	100
	.word	0,0
.L279:
	.word	-1,.L142,.L457-.L142,.L78-.L142
	.half	1
	.byte	95
	.word	0,0
.L281:
	.word	-1,.L142,.L458-.L142,.L456-.L142
	.half	1
	.byte	81
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_serviceCpuWatchdog')
	.sect	'.debug_loc'
.L143:
	.word	-1,.L144,0,.L407-.L144
	.half	2
	.byte	138,0
	.word	0,0
.L408:
	.word	-1,.L144,0,.L459-.L144
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_serviceSafetyWatchdog')
	.sect	'.debug_loc'
.L145:
	.word	-1,.L146,0,.L409-.L146
	.half	2
	.byte	138,0
	.word	0,0
.L410:
	.word	-1,.L146,0,.L460-.L146
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_setCpuEndinit')
	.sect	'.debug_loc'
.L147:
	.word	-1,.L148,0,.L304-.L148
	.half	2
	.byte	138,0
	.word	0,0
.L305:
	.word	-1,.L148,0,.L461-.L148
	.half	1
	.byte	84
	.word	0,0
.L313:
	.word	0,0
.L306:
	.word	-1,.L148,.L462-.L148,.L463-.L148
	.half	1
	.byte	95
	.word	0,0
.L311:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxScuWdt_setSafetyEndinit')
	.sect	'.debug_loc'
.L149:
	.word	-1,.L150,0,.L315-.L150
	.half	2
	.byte	138,0
	.word	0,0
.L316:
	.word	-1,.L150,0,.L464-.L150
	.half	1
	.byte	84
	.word	0,0
.L320:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L887:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_changeCpuWatchdogPassword')
	.sect	'.debug_frame'
	.word	24
	.word	.L887,.L112,.L322-.L112
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_changeCpuWatchdogReload')
	.sect	'.debug_frame'
	.word	24
	.word	.L887,.L114,.L328-.L114
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_changeSafetyWatchdogPassword')
	.sect	'.debug_frame'
	.word	24
	.word	.L887,.L116,.L336-.L116
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_changeSafetyWatchdogReload')
	.sect	'.debug_frame'
	.word	24
	.word	.L887,.L118,.L341-.L118
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_clearCpuEndinit')
	.sect	'.debug_frame'
	.word	24
	.word	.L887,.L120,.L282-.L120
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_clearSafetyEndinit')
	.sect	'.debug_frame'
	.word	24
	.word	.L887,.L122,.L297-.L122
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_disableCpuWatchdog')
	.sect	'.debug_frame'
	.word	24
	.word	.L887,.L124,.L346-.L124
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_disableSafetyWatchdog')
	.sect	'.debug_frame'
	.word	24
	.word	.L887,.L126,.L359-.L126
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_enableCpuWatchdog')
	.sect	'.debug_frame'
	.word	24
	.word	.L887,.L128,.L366-.L128
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_enableSafetyWatchdog')
	.sect	'.debug_frame'
	.word	24
	.word	.L887,.L130,.L379-.L130
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_getCpuWatchdogPassword')
	.sect	'.debug_frame'
	.word	24
	.word	.L887,.L132,.L386-.L132
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_getCpuWatchdogEndInit')
	.sect	'.debug_frame'
	.word	24
	.word	.L887,.L134,.L395-.L134
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_getSafetyWatchdogPassword')
	.sect	'.debug_frame'
	.word	24
	.word	.L887,.L136,.L402-.L136
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_initConfig')
	.sect	'.debug_frame'
	.word	24
	.word	.L887,.L138,.L262-.L138
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_initCpuWatchdog')
	.sect	'.debug_frame'
	.word	12
	.word	.L887,.L140,.L265-.L140
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_initSafetyWatchdog')
	.sect	'.debug_frame'
	.word	12
	.word	.L887,.L142,.L274-.L142
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_serviceCpuWatchdog')
	.sect	'.debug_frame'
	.word	12
	.word	.L887,.L144,.L407-.L144
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_serviceSafetyWatchdog')
	.sect	'.debug_frame'
	.word	12
	.word	.L887,.L146,.L409-.L146
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_setCpuEndinit')
	.sect	'.debug_frame'
	.word	24
	.word	.L887,.L148,.L304-.L148
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_setSafetyEndinit')
	.sect	'.debug_frame'
	.word	24
	.word	.L887,.L150,.L315-.L150
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxScuWdt_enableWatchdogWithDebugger')
	.sect	'.debug_frame'
	.word	20
	.word	.L887,.L152,.L411-.L152
	.byte	8,19,8,21,8,22,8,23


	; Module end
