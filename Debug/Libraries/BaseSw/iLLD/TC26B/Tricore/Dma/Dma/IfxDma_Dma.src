	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 99754241"
	.compiler_invocation	"ctc --dep-file=Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\.IfxDma_Dma.o.d --fp-model=c,f,l,n,r,S,T,z -D__CPU__=tc26x -D__CPU_TC26X__ --core=tc1.6.x --iso=99 -ID:\\smartcar\\smartcar -ID:\\smartcar\\smartcar\\CODE -ID:\\smartcar\\smartcar\\Libraries -ID:\\smartcar\\smartcar\\Libraries\\BaseSw -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Build -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Impl -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\DataHandling -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\InternalMux -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_PinMap -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Asc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Lin -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Spi -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6 -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Icu -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\PwmBc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\PwmHl -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Timer -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\TPwm -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif\\Cam -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Irq -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Dsadc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Rdc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts\\Dts -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Emem -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Emem\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray\\Eray -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth\\Phy_Pef7071 -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce\\Crc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Flash -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Flash\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12 -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12\\IncrEnc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\Pwm -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\Timer -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tim -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tim\\In -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\Pwm -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\Timer -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Trig -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl\\Hssl -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\I2c -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom\\Driver -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc\\Msc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican\\Can -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Io -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5 -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5\\Psi5 -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s\\Psi5s -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\SpiMaster -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\SpiSlave -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent\\Sent -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Smu -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Smu\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Src -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm\\Timer -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Adc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra\\Platform -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra\\Platform\\Tricore -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra\\Platform\\Tricore\\Compilers -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra\\Sfr -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra\\Sfr\\TC26B -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra\\Sfr\\TC26B\\_Reg -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Service -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Service\\CpuGeneric -ID:\\smartcar\\smartcar\\Libraries\\seekfree_libraries -ID:\\smartcar\\smartcar\\Libraries\\seekfree_libraries\\common -ID:\\smartcar\\smartcar\\Libraries\\seekfree_peripheral -ID:\\smartcar\\smartcar\\USER -g2 --make-target=Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.o -t0 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O0 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.src ..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.c"
	.compiler_name		"ctc"
	;source	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.c'

	
$TC16X
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_configureTransactionSet',code,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_configureTransactionSet'
	.align	2
	

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	     2   * \file IfxDma_Dma.c
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	     3   * \brief DMA DMA details
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	     4   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	     5   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	     6   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	     7   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	     9   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    10   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    12   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    13   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    14   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    15   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    16  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    19  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    20   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    21   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    22   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    23   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    24   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    25   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    26  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    27   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    31   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    32   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    33  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    40   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    41  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    42   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    43   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    44  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    45  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    46  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    47  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    48  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    49  #include "IfxDma_Dma.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    50  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    51  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    52  /*-----------------------Private Function Prototypes--------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    53  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    54  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    55  /** \brief local function to copy a transaction set into DMA channel SFRs or memory location (for linked lists)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    56   * \param channel Specifies the pointer to DMA channel registers
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    57   * \param config pointer to the DMA default channel configuration structure
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    58   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    59   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    60  IFX_STATIC void IfxDma_Dma_configureTransactionSet(Ifx_DMA_CH *channel, const IfxDma_Dma_ChannelConfig *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    61  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    62  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    63  /*-------------------------Function Implementations---------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    64  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    65  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    66  IFX_STATIC void IfxDma_Dma_configureTransactionSet(Ifx_DMA_CH *channel, const IfxDma_Dma_ChannelConfig *config)
; Function IfxDma_Dma_configureTransactionSet
.L22:
IfxDma_Dma_configureTransactionSet:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    67  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    68      /* shadow address shall be 32-Byte Aligned */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    69      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    70          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, ((config->shadowAddress & 0x1F) == 0U));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    71      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    72  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    73      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    74          Ifx_DMA_CH_CHCFGR chcfgr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    75          chcfgr.U          = 0;
	mov	d15,#0
.L186:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    76          chcfgr.B.TREL     = config->transferCount;
	ld.hu	d0,[a5]26
.L278:
	insert	d15,d15,d0,#0,#14
.L279:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    77          chcfgr.B.BLKM     = config->blockMode;
	ld.bu	d0,[a5]28
.L280:
	insert	d15,d15,d0,#16,#3
.L281:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    78          chcfgr.B.RROAT    = config->requestMode;
	ld.bu	d0,[a5]29
.L282:
	insert	d15,d15,d0,#19,#1
.L283:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    79          chcfgr.B.CHMODE   = config->operationMode;
	ld.bu	d0,[a5]30
.L284:
	insert	d15,d15,d0,#20,#1
.L285:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    80          chcfgr.B.CHDW     = config->moveSize;
	ld.bu	d0,[a5]31
.L286:
	insert	d15,d15,d0,#21,#3
.L287:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    81          chcfgr.B.PRSEL    = config->requestSource;
	ld.bu	d0,[a5]33
.L288:
	insert	d15,d15,d0,#28,#1
.L289:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    82          chcfgr.B.PATSEL   = config->pattern;
	ld.bu	d0,[a5]32
.L290:
	insert	d15,d15,d0,#24,#3
.L291:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    83  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    84          channel->CHCFGR.U = chcfgr.U;
	st.w	[a4]20,d15
.L180:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    85      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    86  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    87      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    88          Ifx_DMA_CH_ADICR adicr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    89          adicr.U       = 0;
	mov	d1,#0
.L188:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    90          adicr.B.SMF   = config->sourceAddressIncrementStep;
	ld.bu	d0,[a5]36
.L292:
	insert	d1,d1,d0,#0,#3
.L293:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    91          adicr.B.INCS  = config->sourceAddressIncrementDirection;
	ld.bu	d0,[a5]37
.L294:
	insert	d1,d1,d0,#3,#1
.L295:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    92          adicr.B.CBLS  = config->sourceAddressCircularRange;
	ld.bu	d0,[a5]38
.L296:
	insert	d1,d1,d0,#8,#4
.L297:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    93          adicr.B.SCBE  = config->sourceCircularBufferEnabled;
	ld.bu	d0,[a5]43
.L298:
	insert	d1,d1,d0,#20,#1
.L299:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    94          adicr.B.DMF   = config->destinationAddressIncrementStep;
	ld.bu	d0,[a5]39
.L300:
	insert	d1,d1,d0,#4,#3
.L301:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    95          adicr.B.INCD  = config->destinationAddressIncrementDirection;
	ld.bu	d0,[a5]40
.L302:
	insert	d1,d1,d0,#7,#1
.L303:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    96          adicr.B.CBLD  = config->destinationAddressCircularRange;
	ld.bu	d0,[a5]41
.L304:
	insert	d1,d1,d0,#12,#4
.L305:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    97          adicr.B.DCBE  = config->destinationCircularBufferEnabled;
	ld.bu	d0,[a5]44
.L306:
	insert	d1,d1,d0,#21,#1
.L307:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    98          adicr.B.SHCT  = config->shadowControl;
	ld.bu	d0,[a5]42
.L308:
	insert	d1,d1,d0,#16,#4
.L309:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	    99          adicr.B.STAMP = config->timestampEnabled;
	ld.bu	d0,[a5]45
.L310:
	insert	d1,d1,d0,#22,#1
.L311:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   100          adicr.B.WRPSE = config->wrapSourceInterruptEnabled;
	ld.bu	d0,[a5]46
.L312:
	insert	d1,d1,d0,#24,#1
.L313:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   101          adicr.B.WRPDE = config->wrapDestinationInterruptEnabled;
	ld.bu	d0,[a5]47
.L314:
	insert	d1,d1,d0,#25,#1
.L315:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   102          adicr.B.INTCT = (config->channelInterruptEnabled ? 2 : 0) | (config->channelInterruptControl ? 1 : 0);
	ld.bu	d15,[a5]48
.L187:
	jeq	d15,#0,.L2
.L316:
	mov	d0,#2
.L317:
	j	.L3
.L2:
	mov	d0,#0
.L3:
	ld.bu	d15,[a5]49
.L318:
	jeq	d15,#0,.L4
.L319:
	mov	d15,#1
.L320:
	j	.L5
.L4:
	mov	d15,#0
.L5:
	or	d0,d15
.L321:
	insert	d1,d1,d0,#26,#2
.L322:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   103          adicr.B.IRDV  = config->interruptRaiseThreshold;
	ld.bu	d15,[a5]50
.L323:
	insert	d1,d1,d15,#28,#4
.L324:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   104          adicr.B.ETRL  = config->transactionRequestLostInterruptEnabled;
	ld.bu	d15,[a5]51
.L325:
	insert	d1,d1,d15,#23,#1
.L326:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   105          //enter also the circular buffer enable bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   106  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   107          channel->ADICR.U = adicr.U;
	st.w	[a4]16,d1
.L183:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   108      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   109      channel->SADR.U   = config->sourceAddress;
	ld.w	d15,[a5]6
.L327:
	st.w	[a4]8,d15
.L328:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   110      channel->DADR.U   = config->destinationAddress;
	ld.w	d15,[a5]10
.L329:
	st.w	[a4]12,d15
.L330:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   111      channel->SDCRCR.U = config->sourceDestinationAddressCrc;
	ld.w	d15,[a5]22
.L331:
	st.w	[a4]4,d15
.L332:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   112      channel->RDCRCR.U = config->readDataCrc;
	ld.w	d15,[a5]18
.L333:
	st.w	[a4],d15
.L334:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   113  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   114      // write not allowed if SHCT=1 or SHCT=2
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   115      if ((config->shadowControl != IfxDma_ChannelShadow_none) &&
	ld.bu	d15,[a5]42
.L335:
	jeq	d15,#0,.L6
.L336:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   116          (config->shadowControl != IfxDma_ChannelShadow_src) &&
	ld.bu	d15,[a5]42
.L337:
	jeq	d15,#1,.L7
.L338:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   117          (config->shadowControl != IfxDma_ChannelShadow_dst))
	ld.bu	d15,[a5]42
.L339:
	jeq	d15,#2,.L8
.L340:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   118      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   119          channel->SHADR.U = config->shadowAddress;
	ld.w	d15,[a5]14
.L341:
	st.w	[a4]24,d15
.L8:
.L7:
.L6:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   120      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   121  }
	ret
.L176:
	
__IfxDma_Dma_configureTransactionSet_function_end:
	.size	IfxDma_Dma_configureTransactionSet,__IfxDma_Dma_configureTransactionSet_function_end-IfxDma_Dma_configureTransactionSet
.L80:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_createModuleHandle',code,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_createModuleHandle'
	.align	2
	
	.global	IfxDma_Dma_createModuleHandle

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   122  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   123  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   124  void IfxDma_Dma_createModuleHandle(IfxDma_Dma *dmaHandle, Ifx_DMA *dma)
; Function IfxDma_Dma_createModuleHandle
.L24:
IfxDma_Dma_createModuleHandle:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   125  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   126      dmaHandle->dma = dma;
	st.a	[a4],a5
.L207:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   127  }
	ret
.L81:
	
__IfxDma_Dma_createModuleHandle_function_end:
	.size	IfxDma_Dma_createModuleHandle,__IfxDma_Dma_createModuleHandle_function_end-IfxDma_Dma_createModuleHandle
.L45:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_deInitChannel',code,cluster('IfxDma_Dma_deInitChannel')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_deInitChannel'
	.align	2
	
	.global	IfxDma_Dma_deInitChannel

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   128  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   129  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   130  void IfxDma_Dma_deInitChannel(IfxDma_Dma *dma, IfxDma_ChannelId channel)
; Function IfxDma_Dma_deInitChannel
.L26:
IfxDma_Dma_deInitChannel:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   131  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   132      if (IfxDma_isChannelTransactionEnabled(dma->dma, channel))
	ld.a	a15,[a4]
.L91:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    44   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    45   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    46   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    47   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    48   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    49   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    50   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    51   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    52   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    53   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    54   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    55   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    56   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    57   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    58   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    59   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    60   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    61  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    62  #ifndef IFXDMA_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    63  #define IFXDMA_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    64  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    65  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    66  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    67  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    68  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    69  #include "_Impl/IfxDma_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    70  #include "IfxDma_bf.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    72  #include "IfxDma_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    73  #include "Src/Std/IfxSrc.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    74  #include "Scu/Std/IfxScuWdt.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    75  #include "Scu/Std/IfxScuCcu.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    76  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    77  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    78  /*--------------------------------Enumerations--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    79  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    80  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    81  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    82   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    83  /** \brief Bus Master Mode definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    84   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    85   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    86  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    87  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    88      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    89      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    90  } IfxDma_BusMasterMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    91  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    92  /** \brief Channel Bus Priority definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    93   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    94  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    95  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    96      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    97      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    98      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    99  } IfxDma_ChannelBusPriority;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   100  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   101  /** \brief DMA circular buffer (wrap around) definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   102   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   103   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   104  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   105  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   122  } IfxDma_ChannelIncrementCircular;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   123  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   124  /** \brief DMA incrementation direction definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   125   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   126   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   127  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   128  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   129      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   130      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   131  } IfxDma_ChannelIncrementDirection;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   132  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   133  /** \brief DMA incrementation definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   134   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   135   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   136  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   137  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   143      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   144      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   145      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   146  } IfxDma_ChannelIncrementStep;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   147  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   148  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   149   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   150   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   151  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   152  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   153      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   154      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   155  } IfxDma_ChannelInterruptControl;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   156  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   157  /** \brief DMA transfer definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   158   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   159   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   160  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   161  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   167      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   168      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   169      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   170  } IfxDma_ChannelMove;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   171  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   172  /** \brief DMA move size definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   173   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   174   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   175  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   176  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   180      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   181      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   182      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   183  } IfxDma_ChannelMoveSize;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   184  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   185  /** \brief DMA operation mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   186   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   187   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   188  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   189  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   190      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   191      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   192  } IfxDma_ChannelOperationMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   193  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   194  /** \brief Pattern detection selection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   195   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   196   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   197  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   198  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   204      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   205      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   206      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   207  } IfxDma_ChannelPattern;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   208  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   209  /** \brief Channel Priority definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   210   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   211  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   212  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   213      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   214      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   215      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   216  } IfxDma_ChannelPriority;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   217  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   218  /** \brief DMA request mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   219   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   220   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   221  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   222  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   223      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   224      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   225  } IfxDma_ChannelRequestMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   226  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   227  /** \brief DMA request selection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   228   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   229   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   230  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   231  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   232      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   233      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelRequestSource;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   235  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   236  /** \brief shadow definition definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   237   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   238   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   239  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   240  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   251      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   252      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   253      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   254  } IfxDma_ChannelShadow;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   255  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   256  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   257  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   259      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   260      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   261      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   262  } IfxDma_HardwareResourcePartition;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   263  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   264  /** \brief DMA move engine definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   265   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   266  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   267  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   268      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   269      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   270  } IfxDma_MoveEngine;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   271  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   272  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   273   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   274   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   275  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   276  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   277      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   278      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   279  } IfxDma_SleepMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   280  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   281  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   282  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   283  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   284   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   285  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   286  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   287  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   288  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   289  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   290  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   291   * This API needs to be used after the IfxDma_resetChannel()
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   292   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   293   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   294   * \return TRUE if the channel is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   295   * FALSE if the channel is not reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   296   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   297   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   298   *      // check whether the channel is reset or not and also the hardware trigger disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   299   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   300   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   301   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   302   *              // Dma is out of RESET and there is no hardware request enabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   303   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   304   *      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   305   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   306   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   307   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   308  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   309  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   310  /** \brief Reset the channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   311   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   312   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   313   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   314   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   315   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   316   *      // Apply reset to the channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   317   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   318   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   319   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   320   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   321  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   322  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   323  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   324  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   325  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   326   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   327  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   328  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   329  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   330  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   331  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   332  /** \brief Clear the channel transaction request lost flag status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   333   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   334   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   335   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   336   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   337   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   338   *      // Clear the channel transaction request lost flag status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   339   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   340   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   341   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   342   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   343  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   344  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   345  /** \brief Disable a DMA channel hardware transaction request
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   346   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   347   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   348   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   349   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   350   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   351   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   352   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   353  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   354  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   355  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   356   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   357   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   358   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   359   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   360   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   361   *      // Disable the transaction request lost interrupt for given channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   362   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   363   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   364   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   366  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   368  /** \brief Enable a DMA channel hardware transaction request
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   369   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   370   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   371   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   372   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   373   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   374   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   375   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   376   *              IfxSrc_setRequest(src);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   377   *      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   378   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   379   *      // Do not restrict the hardware triggering to only one transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   380   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   381   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   382   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   383   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   384   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   385   *      // Check for end of transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   386   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   387   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   388   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   389   *      // Enable the hardware trigger for channel 3
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   391   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   392   *      // Disable the hardware trigger for channel 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   393   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   394   *      // Hardware triggers for second time
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   395   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   396   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   397   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   398   *              IfxSrc_setRequest(src);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   399   *      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   400   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   401   *      // Restrict the hardware triggering to only one transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   402   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   403   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   404   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   405   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   406   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   407  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   408  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   409  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   410   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   411   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   412   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   413   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   414   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   415   *      // Enable the transaction request lost interrupt for given channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   416   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   417   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   418   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   419   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   420  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   421  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   422  /** \brief Check the channel transaction request lost flag status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   423   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   424   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   425   * \return TRUE if the TRL is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   426   * FALSE if the TRL is not set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   427   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   428   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   429   *      boolean trlFlag;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   430   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   431   *      // Check whether the channel transaction request lost flag is set or not
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   432   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   433   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   434   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   435   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   436  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   437  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   438  /** \brief Converts DMA circular range to circular code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   439   * \param range DMA circular range
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   440   * \return DMA circular code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   441   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   442  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   443  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   444  /** \brief Return the hardware transaction request status of a DMA channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   445   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   446   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   447   * \return TRUE if the hardware transaction request is enabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   448   * FALSE if the hardware transaction request is disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   449   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   450   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   451   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   452   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   453  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   454  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   455  /** \brief Return the status of a DMA channel (transaction pending)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   456   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   457   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   458   * \return TRUE if a transaction request for the given channel is pending
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   459   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   460   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   461   *      // check for the channel request pending with the channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   462   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   463   *              // There is channel request pending for channel 0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   464   *              result |= 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   465   *      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   466   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   467   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   468   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   469  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   470  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   471  /** \brief Sets the sensitivity of the module to sleep signal
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   472   * \param dma pointer to DMA registers
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   473   * \param mode mode selection (enable/disable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   474   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   475   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   476  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   477  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   478  /** \brief Request a DMA channel transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   479   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   480   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   481   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   482   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   483   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   484   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   485   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   486  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   487  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   488  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   489  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   490  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   491   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   492  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   493  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   494  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   495  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   496  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   497  /** \brief Clear the DMA error status flags
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   498   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   499   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   500   * \param mask value holds the bits to clear or mask
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   501   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   502   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   503   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   504   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   505   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_S |    // move engine source error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   510   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   511   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   512   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   513   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   514   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   515   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   516  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   517  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   518  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   519   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   520   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   521   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   522   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   523   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   524   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   525   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   526  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   527  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   528  /** \brief Disable the generation of a Move engine source error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   529   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   530   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   531   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   532   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   533   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   534   *      // Disable the move engine source and destination move errors
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   535   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   536   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   537   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   538   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   539   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   540  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   541  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   542  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   543   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   544   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   545   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   546   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   547   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   548   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   549   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   550  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   551  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   552  /** \brief Enable the generation of a Move engine source error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   553   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   554   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   555   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   556   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   557   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   558   *      // Enable the move engine source and destination move errors
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   559   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   560   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   561   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   562   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   563   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   564  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   565  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   566  /** \brief Return the DMA error status flags
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   567   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   568   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   569   * \return the content of the DMA.ERRSR register
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   570   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   571   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   572   *      uint32 errorFlags = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   573   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   574   *      // Get the status of the error flags of move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   575   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   576   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   578   *              }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   579   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   580   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   581   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   582   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   583   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   584   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   585   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   586   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   587   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   588   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   589   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   590   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   591   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   592   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   593   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   594   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   595   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   596   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   597   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   598   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   599   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   600   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   601   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   602   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   603   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   604   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   605   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   606  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   607  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   608  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   609  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   610  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   611   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   612  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   613  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   614  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   615  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   616  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   617  /** \brief Get a channel source address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   618   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   619   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   620   * \return Actual channel destination address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   621   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   622   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   623   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   624   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   625   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   626   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   627   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   628  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   629  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   630  /** \brief Get a channel source address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   631   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   632   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   633   * \return Actual channel source address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   634   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   635   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   636   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   637   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   638   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   639   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   640  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   641  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   642  /** \brief Return the DMA channel suspend Mode status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   643   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   644   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   645   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   646   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   647  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   648  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   649  /** \brief Return remaining DMA transfer count
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   650   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   651   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   652   * \return Remaining DMA transfer count
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   653   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   654   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   655   *      // Wait till transfer count (TCOUNT) becomes 0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   656   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   657   *      bool notFinished;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   658   *      do {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   659   *              notFinished = false;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   660   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   661   *                              notFinished = true;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   662   *                              break;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   663   *                      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   664   *      } while( notFinished );
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   665   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   666   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   667   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   668  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   669  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   670  /** \brief get the time stamp
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   671   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   672   * \return the current time stamp
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   673   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   674   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   675   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   676   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   677   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   678   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   679  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   680  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   681  /** \brief Configure the move count for each DMA channel transfer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   682   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   683   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   684   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   685   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   686   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   687   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   688   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   689   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   690  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   691  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   692  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   693   * After a transaction, the hardware request transaction remain enabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   694   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   695   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   696   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   697   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   698   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   699   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   700   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   701  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   702  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   703  /** \brief Configure the destination address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   704   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   705   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   706   * \param address is the Initial address of the destination pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   707   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   708   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   709   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   710   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   711   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   712  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   713  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   714  /** \brief Configure a DMA channel destination pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   715   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   716   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   717   * \param incStep Specifies the pointer incrementation step
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   718   * \param direction Specifies the incrementation direction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   719   * \param size Specifies the size of the circular buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   720   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   721   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   722   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   723   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   724   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   725  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   726  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   727  /** \brief Configure a DMA channel move
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   728   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   729   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   730   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   731   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   732   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   733   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   734   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   735   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   736  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   737  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   738  /** \brief Configure a DMA channel shadow pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   739   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   740   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   741   * \param shadow Specifies the shadow pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   742   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   743   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   744   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   745   *      // Push the shadow mode into double buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   746   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   747   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   748   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   749   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   750   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   751  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   752  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   753  /** \brief Configure a DMA channel to "single transaction mode"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   754   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   755   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   756   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   757   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   758   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   759   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   760   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   761   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   762  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   763  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   764  /** \brief Configure a DMA channel to "single transaction mode"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   765   * One transfer request starts a complete DMA transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   766   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   767   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   768   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   769   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   770   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   771   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   772   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   773  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   774  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   775  /** \brief Configure a DMA channel to "single transfer mode"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   776   * A transfer request is required for each transfer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   777   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   778   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   779   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   780   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   781   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   782   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   783   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   784  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   785  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   786  /** \brief Configure the source address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   787   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   788   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   789   * \param address is the Initial address of the source pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   790   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   791   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   792   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   793   *      // Check for the end of current transaction and before trigger the channel request for
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   794   *      // for another channel, re configure the source and destination addresses
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   795   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   796   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   797   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the source address for the channel 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   800   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   801   *      // Re-Program the destination address for channel 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   803   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   804   *      // Start DMA transaction for channel 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   805   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   806   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   807   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   808   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   809  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   810  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   811  /** \brief Configure a DMA channel source pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   812   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   813   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   814   * \param incStep Specifies the pointer incrementation step
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   815   * \param direction Specifies the incrementation direction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   816   * \param size Specifies the size of the circular buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   817   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   818   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   819   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   820   *      // Re-program the source and destination circular buffer control fields
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   821   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   822   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   823   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   824   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   825   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   826   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   827  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   828  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   829  /** \brief Configure a DMA channel suspend enable
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   830   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   831   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   832   * \param enable enable (1) / disable (0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   833   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   834   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   835  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   836  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   837  /** \brief Configure the move count of a DMA channel transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   838   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   839   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   840   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   841   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   842   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   843   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   844   *      // Start DMA transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   845   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   846   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   847   *      // Wait till end of transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   848   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   849   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the TREL configuration for channel 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   852   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the BLKM configuration for channel 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   855   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   856   *      // Change the Move size configuration for channel 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   858   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the first transfer is initiated
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   861   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   862   *      // Pull down the channel pending request after the transaction gets over
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   864   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   867   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   868   *      // Start DMA transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   869   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   870   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   871   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   872   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   873  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   874  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   875  /** \brief Configure the shadow pointer register to read only
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   876   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   877   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   878   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   879   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   880   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   881   *      // Disable the shadow mode to come out of double buffer mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   882   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   883   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   884   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   885   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   886  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   887  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   888  /** \brief Configure the shadow pointer register to write-able
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   889   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   890   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   891   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   892   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   893   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   894   *      // Enable the shadow mode to come out of double buffer mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   895   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   896   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   897   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   898   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   899  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   900  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   901  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   902  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   903  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   904   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   905  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   906  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   907  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   908  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   909  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   910  /** \brief Clear channel halt request and aknowledgement
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   911   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   912   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   913   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   914   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   915   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   916   *      // Quit the halt mode of operation
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   917   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   918   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   919   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   920   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   921  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   922  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   923  /** \brief Get channel halt aknowledgement
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   924   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   925   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   926   * \return halt aknowledgement
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   927   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   928   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   929   *      // Check for the channel halt aknowledgement
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   930   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   931   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   932   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   933   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   934  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   935  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   936  /** \brief setting channel halt request
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   937   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   938   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   939   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   940   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   941   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   942   *      // Halt the channel processing
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   943   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   944   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   945   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   946   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   947  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   948  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   949  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   950  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   951  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   952   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   953  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   954  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   955  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   956  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   957  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   958  /** \brief get information on buffer being read by software and clear the notification flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   959   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   960   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   961   * \return TRUE  if one of the buffers is being read by software
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   962   * FALSE if one of the buffers is already read by software
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   963   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   964   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   965   *      // Check the buffer being read (Double buffer operation mode)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   966   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   967   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   968   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   969   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   970  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   971  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   972  /** \brief get Double buffer selection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   973   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   974   * \param channelId channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   975   * \return TRUE if buffer 1 is being filled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   976   * FALSE if buffer 0 is being filled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   977   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   978   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   979   *      boolean buffer_being_filled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   980   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   981   *      // Check the buffer being filled (Double buffer operation mode)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   982   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   983   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   984   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   985   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   986  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   987  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   988  /** \brief keeps the double buffer active
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   989   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   990   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   991   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   992   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   993   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   994   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   995   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   996   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   997   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   998  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   999  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1000  /** \brief Double buffer switch application
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1001   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1002   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1003   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1004   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1005   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1006   *      // Apply software buffer switch
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1007   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1008   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1009   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1010   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1011  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1012  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1013  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1014  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1015  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1016   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1017  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1018  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1019  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1020  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1021  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1022  /** \brief Clear a channel transfer interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1023   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1024   * \param channelId channel for which the interrupt flag should be cleared
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1025   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1026   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1027   * see Dma.INTSR
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1028   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1029   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1030  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1031  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1032  /** \brief Disable channel interrupt trigger
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1033   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1034   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1035   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1036   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1037   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1038   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1039   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1040   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1041   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1042  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1043  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1044  /** \brief Enable channel interrupt trigger
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1045   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1046   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1047   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1048   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1049   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1050   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1051   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1052   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1053   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1054  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1055  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1056  /** \brief Return and clear a channel transfer interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1057   * The flag is automatically cleared with the call to this function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1058   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1059   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1060   * \return TRUE if the interrupt flag is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1061   * FALSE if the interrupt flag is not set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1062   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1063   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1064   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1065   *      // and clear it once it is set and checked
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1066   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1067   *      // Wait till end of the transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1068   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1069   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1070   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1071   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1072  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1073  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1074  /** \brief Returns and clears the pattern detection interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1075   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1076   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1077   * \return TRUE  if pattern detection for a given channel is found
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1078   * FALSE if pattern detection for a given channel is not found
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1079   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1080   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1081   *      // wait till pattern match is found for given channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1082   *      // and clear it once it is set and checked
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1083   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1084   *      // Wait for the pattern detection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1085   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1086   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1087   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1088   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1089  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1090  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1091  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1092   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1093   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1094   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1095   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1096   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1097   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1098   *      // wait for the destination buffer wrap interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1099   *      // and clear it once it is set and checked
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1100   *      boolean destinationWrapFlag;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1101   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1102   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1103   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1104   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1105   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1106  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1107  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1108  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1109   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1110   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1111   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1112   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1113   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1114   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1115   *      // wait for the source buffer wrap interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1116   *      // and clear it once it is set and checked
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1117   *      boolean sourceWrapFlag;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1118   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1119   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1120   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1121   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1122   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1123  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1124  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1125  /** \brief Return a channel transfer interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1126   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1127   * \param channelId channel for which the interrupt flag should be returned
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1128   * \return TRUE if the interrupt flag is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1129   * FALSE if the interrupt flag is not set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1130   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1131   * see Dma.INTSR
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1132   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1133   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1134  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1135  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1136  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1137   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1138   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1139   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1140   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1141   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1142   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1143   *      boolean patternDetectOldVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1144   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1145   *      // Check the old value of the pattern detection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1146   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1147   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1148   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1149   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1150  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1151  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1152  /** \brief Returns the SRC pointer for given DMA channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1153   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1154   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1155   * \return SRC pointer for given DMA channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1156   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1157   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1158   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1159   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1160   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1161   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1162  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1163  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1164  /** \brief Setting of channel interrupt service request by software
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1165   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1166   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1167   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1168   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1169   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1170   *      // Set the channel interrupt service request through software
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1171   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1172   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1173   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1174   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1175  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1176  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1177  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1178  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1179  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1180  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1181  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1182  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1183  /** \brief Configure the hardware resource partition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1184   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1185   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1186   * \param resourcePartition Hardware resource partition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1187   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1188   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1189   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1190   *      // Set the required hardware resource partition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1191   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1192   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1193   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1194   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1195  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1196  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1197  /** \brief Sets the Interrupt control value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1198   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1199   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1200   * \param value Interrupt control value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1201   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1202   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1203  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1204  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1205  /** \brief Sets the Circular Buffer Destination Length
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1206   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1207   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1208   * \param length Circular Buffer Destination Length
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1209   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1210   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1211  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1212  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1213  /** \brief Sets the Circular Buffer Source Length
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1214   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1215   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1216   * \param length Circular Buffer Source Length
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1217   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1218   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1219  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1220  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1221  /** \brief Enable the Source Circular Buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1222   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1223   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1224   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1225   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1226  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1227  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1228  /** \brief Enable the Destination Circular Buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1229   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1230   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1231   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1232   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1233  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1234  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1235  /** \brief Returns the Data CRC
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1236   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1237   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1238   * \return The Data CRC value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1239   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1240  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1241  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1242  /** \brief Returns the Source and Destination CRC
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1243   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1244   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1245   * \return The source and destination CRC values
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1246   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1247  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1248  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1249  /** \brief Returns the ERR pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1250   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1251   * \return ERR pointer for given DMA
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1252   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1253  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1254  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1255  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1256  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1257  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1258  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1259  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1260  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1261      dma->TSR[channelId].B.HLTCLR = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1262  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1263  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1264  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1265  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1266  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1267      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1268  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1269  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1270  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1271  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1272  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1273      dma->TSR[channelId].B.CTL = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1274  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1275  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1277  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1278  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1279      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1280      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1281          dma->BLK1.CLRE.U = mask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1282      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1283      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1284      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1285          dma->BLK0.CLRE.U = mask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1286      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1287  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1288  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1289  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1290  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1291  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1292      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1293  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1294  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1295  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1296  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1297  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1298      dma->TSR[channelId].B.DCH = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1299  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1300  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1301  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1302  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1303  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1304      dma->CH[channelId].ADICR.B.ETRL = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1305  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1306  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1307  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1308  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1309  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1310      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1311      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1312          dma->BLK1.EER.B.EDER = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1313      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1314      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1315      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1316          dma->BLK0.EER.B.EDER = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1317      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1318  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1319  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1320  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1321  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1322  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1323      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1324      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1325          dma->BLK1.EER.B.ESER = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1326      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1327      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1328      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1329          dma->BLK0.EER.B.ESER = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1330      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1331  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1332  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1333  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1334  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1335  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1336      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1337  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1338  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1339  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1340  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1341  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1342      dma->TSR[channelId].B.ECH = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1343  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1344  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1345  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1346  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1347  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1348      dma->CH[channelId].ADICR.B.ETRL = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1349  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1350  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1351  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1352  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1353  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1354      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1355      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1356          dma->BLK1.EER.B.EDER = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1357      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1358      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1359      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1360          dma->BLK0.EER.B.EDER = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1361      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1362  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1363  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1364  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1365  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1366  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1367      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1368      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1369          dma->BLK1.EER.B.ESER = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1370      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1371      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1372      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1373          dma->BLK0.EER.B.ESER = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1374      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1375  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1376  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1377  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1378  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1379  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1380      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1381  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1382      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1383  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1384      if (result == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1385      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1386          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1387      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1388  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1389      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1390  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1391  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1392  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1393  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1394  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1395      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1396  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1397      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1398  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1399      if (result == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1400      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1401          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1402      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1403  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1404      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1405  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1406  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1407  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1408  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1409  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1410      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1411  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1412      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1413  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1414      if (result == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1415      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1416          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1417      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1418  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1419      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1420  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1421  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1422  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1423  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1424  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1425      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1426  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1427      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1428  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1429      if (result == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1430      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1431          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1432      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1433  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1434      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1435  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1436  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1437  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1438  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1439  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1440      return dma->CH[channelId].DADR.U;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1441  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1442  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1443  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1444  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1445  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1446      return dma->TSR[channelId].B.HLTACK != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1447  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1448  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1449  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1450  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1451  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1452      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1453  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1454      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1455  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1456      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1457  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1458  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1459  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1460  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1461  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1462      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1463  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1464  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1465  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1466  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1467  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1468      return dma->CH[channelId].SADR.U;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1469  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1470  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1471  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1472  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1473  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1474      return dma->SUSACR[channelId].B.SUSAC;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1475  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1476  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1477  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1478  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1479  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1480      return dma->TSR[channelId].B.TRL != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1481  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1482  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1483  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1484  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1485  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1486      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1487  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1488  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1489  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1490  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1491  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1492      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1493  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1494  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1495  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1496  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1497  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1498      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1499  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1500      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1501  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1502      if (result == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1503      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1504          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1505      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1506  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1507      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1508  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1509  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1510  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1511  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1512  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1513      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1514  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1515  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1516  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1517  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1518  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1519      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1520      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1521          return dma->BLK1.ERRSR.U;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1522      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1523      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1524      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1525          return dma->BLK0.ERRSR.U;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1526      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1527  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1528  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1529  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1530  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1531  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1533      // only a single DMA available, therefore no check for the dma pointer required
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1535  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1536  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1537  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1538  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1539  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1540      return dma->TIME.U;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1541  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1542  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1543  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1544  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1545  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1546      return dma->TSR[channelId].B.RST == 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1547  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1548  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1549  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1550  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1551  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1552      return dma->TSR[channelId].B.HTRE != 0;
	mul	d15,d4,#4
	addsc.a	a15,a15,d15,#0
.L212:
	ld.bu	d15,[a15]7680
	extr.u	d15,d15,#1,#1
.L213:
	ne	d15,d15,#0
.L214:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1552      return dma->TSR[channelId].B.HTRE != 0;      (inlined)
	j	.L9

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1553  }      (inlined)
.L9:
	jeq	d15,#0,.L10
.L215:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   133  action(dma->dma, channel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   134      }
	ld.a	a15,[a4]
.L98:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    44   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    45   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    46   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    47   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    48   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    49   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    50   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    51   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    52   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    53   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    54   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    55   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    56   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    57   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    58   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    59   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    60   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    61  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    62  #ifndef IFXDMA_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    63  #define IFXDMA_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    64  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    65  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    66  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    67  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    68  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    69  #include "_Impl/IfxDma_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    70  #include "IfxDma_bf.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    72  #include "IfxDma_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    73  #include "Src/Std/IfxSrc.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    74  #include "Scu/Std/IfxScuWdt.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    75  #include "Scu/Std/IfxScuCcu.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    76  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    77  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    78  /*--------------------------------Enumerations--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    79  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    80  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    81  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    82   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    83  /** \brief Bus Master Mode definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    84   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    85   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    86  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    87  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    88      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    89      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    90  } IfxDma_BusMasterMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    91  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    92  /** \brief Channel Bus Priority definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    93   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    94  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    95  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    96      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    97      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    98      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    99  } IfxDma_ChannelBusPriority;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   100  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   101  /** \brief DMA circular buffer (wrap around) definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   102   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   103   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   104  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   105  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   122  } IfxDma_ChannelIncrementCircular;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   123  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   124  /** \brief DMA incrementation direction definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   125   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   126   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   127  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   128  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   129      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   130      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   131  } IfxDma_ChannelIncrementDirection;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   132  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   133  /** \brief DMA incrementation definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   134   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   135   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   136  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   137  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   143      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   144      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   145      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   146  } IfxDma_ChannelIncrementStep;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   147  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   148  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   149   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   150   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   151  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   152  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   153      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   154      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   155  } IfxDma_ChannelInterruptControl;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   156  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   157  /** \brief DMA transfer definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   158   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   159   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   160  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   161  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   167      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   168      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   169      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   170  } IfxDma_ChannelMove;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   171  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   172  /** \brief DMA move size definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   173   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   174   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   175  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   176  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   180      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   181      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   182      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   183  } IfxDma_ChannelMoveSize;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   184  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   185  /** \brief DMA operation mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   186   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   187   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   188  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   189  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   190      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   191      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   192  } IfxDma_ChannelOperationMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   193  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   194  /** \brief Pattern detection selection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   195   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   196   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   197  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   198  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   204      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   205      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   206      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   207  } IfxDma_ChannelPattern;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   208  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   209  /** \brief Channel Priority definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   210   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   211  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   212  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   213      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   214      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   215      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   216  } IfxDma_ChannelPriority;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   217  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   218  /** \brief DMA request mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   219   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   220   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   221  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   222  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   223      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   224      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   225  } IfxDma_ChannelRequestMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   226  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   227  /** \brief DMA request selection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   228   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   229   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   230  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   231  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   232      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   233      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelRequestSource;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   235  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   236  /** \brief shadow definition definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   237   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   238   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   239  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   240  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   251      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   252      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   253      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   254  } IfxDma_ChannelShadow;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   255  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   256  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   257  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   259      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   260      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   261      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   262  } IfxDma_HardwareResourcePartition;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   263  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   264  /** \brief DMA move engine definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   265   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   266  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   267  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   268      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   269      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   270  } IfxDma_MoveEngine;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   271  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   272  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   273   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   274   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   275  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   276  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   277      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   278      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   279  } IfxDma_SleepMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   280  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   281  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   282  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   283  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   284   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   285  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   286  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   287  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   288  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   289  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   290  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   291   * This API needs to be used after the IfxDma_resetChannel()
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   292   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   293   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   294   * \return TRUE if the channel is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   295   * FALSE if the channel is not reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   296   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   297   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   298   *      // check whether the channel is reset or not and also the hardware trigger disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   299   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   300   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   301   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   302   *              // Dma is out of RESET and there is no hardware request enabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   303   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   304   *      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   305   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   306   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   307   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   308  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   309  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   310  /** \brief Reset the channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   311   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   312   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   313   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   314   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   315   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   316   *      // Apply reset to the channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   317   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   318   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   319   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   320   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   321  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   322  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   323  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   324  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   325  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   326   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   327  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   328  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   329  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   330  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   331  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   332  /** \brief Clear the channel transaction request lost flag status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   333   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   334   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   335   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   336   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   337   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   338   *      // Clear the channel transaction request lost flag status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   339   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   340   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   341   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   342   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   343  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   344  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   345  /** \brief Disable a DMA channel hardware transaction request
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   346   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   347   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   348   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   349   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   350   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   351   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   352   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   353  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   354  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   355  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   356   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   357   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   358   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   359   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   360   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   361   *      // Disable the transaction request lost interrupt for given channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   362   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   363   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   364   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   366  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   368  /** \brief Enable a DMA channel hardware transaction request
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   369   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   370   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   371   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   372   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   373   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   374   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   375   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   376   *              IfxSrc_setRequest(src);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   377   *      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   378   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   379   *      // Do not restrict the hardware triggering to only one transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   380   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   381   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   382   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   383   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   384   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   385   *      // Check for end of transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   386   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   387   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   388   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   389   *      // Enable the hardware trigger for channel 3
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   391   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   392   *      // Disable the hardware trigger for channel 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   393   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   394   *      // Hardware triggers for second time
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   395   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   396   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   397   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   398   *              IfxSrc_setRequest(src);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   399   *      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   400   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   401   *      // Restrict the hardware triggering to only one transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   402   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   403   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   404   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   405   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   406   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   407  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   408  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   409  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   410   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   411   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   412   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   413   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   414   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   415   *      // Enable the transaction request lost interrupt for given channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   416   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   417   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   418   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   419   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   420  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   421  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   422  /** \brief Check the channel transaction request lost flag status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   423   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   424   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   425   * \return TRUE if the TRL is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   426   * FALSE if the TRL is not set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   427   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   428   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   429   *      boolean trlFlag;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   430   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   431   *      // Check whether the channel transaction request lost flag is set or not
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   432   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   433   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   434   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   435   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   436  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   437  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   438  /** \brief Converts DMA circular range to circular code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   439   * \param range DMA circular range
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   440   * \return DMA circular code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   441   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   442  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   443  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   444  /** \brief Return the hardware transaction request status of a DMA channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   445   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   446   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   447   * \return TRUE if the hardware transaction request is enabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   448   * FALSE if the hardware transaction request is disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   449   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   450   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   451   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   452   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   453  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   454  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   455  /** \brief Return the status of a DMA channel (transaction pending)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   456   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   457   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   458   * \return TRUE if a transaction request for the given channel is pending
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   459   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   460   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   461   *      // check for the channel request pending with the channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   462   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   463   *              // There is channel request pending for channel 0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   464   *              result |= 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   465   *      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   466   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   467   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   468   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   469  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   470  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   471  /** \brief Sets the sensitivity of the module to sleep signal
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   472   * \param dma pointer to DMA registers
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   473   * \param mode mode selection (enable/disable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   474   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   475   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   476  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   477  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   478  /** \brief Request a DMA channel transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   479   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   480   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   481   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   482   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   483   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   484   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   485   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   486  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   487  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   488  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   489  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   490  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   491   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   492  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   493  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   494  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   495  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   496  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   497  /** \brief Clear the DMA error status flags
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   498   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   499   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   500   * \param mask value holds the bits to clear or mask
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   501   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   502   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   503   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   504   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   505   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_S |    // move engine source error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   510   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   511   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   512   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   513   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   514   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   515   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   516  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   517  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   518  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   519   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   520   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   521   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   522   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   523   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   524   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   525   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   526  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   527  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   528  /** \brief Disable the generation of a Move engine source error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   529   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   530   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   531   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   532   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   533   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   534   *      // Disable the move engine source and destination move errors
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   535   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   536   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   537   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   538   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   539   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   540  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   541  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   542  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   543   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   544   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   545   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   546   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   547   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   548   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   549   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   550  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   551  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   552  /** \brief Enable the generation of a Move engine source error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   553   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   554   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   555   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   556   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   557   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   558   *      // Enable the move engine source and destination move errors
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   559   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   560   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   561   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   562   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   563   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   564  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   565  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   566  /** \brief Return the DMA error status flags
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   567   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   568   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   569   * \return the content of the DMA.ERRSR register
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   570   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   571   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   572   *      uint32 errorFlags = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   573   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   574   *      // Get the status of the error flags of move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   575   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   576   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   578   *              }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   579   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   580   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   581   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   582   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   583   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   584   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   585   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   586   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   587   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   588   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   589   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   590   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   591   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   592   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   593   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   594   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   595   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   596   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   597   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   598   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   599   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   600   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   601   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   602   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   603   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   604   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   605   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   606  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   607  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   608  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   609  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   610  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   611   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   612  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   613  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   614  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   615  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   616  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   617  /** \brief Get a channel source address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   618   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   619   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   620   * \return Actual channel destination address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   621   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   622   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   623   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   624   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   625   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   626   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   627   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   628  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   629  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   630  /** \brief Get a channel source address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   631   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   632   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   633   * \return Actual channel source address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   634   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   635   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   636   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   637   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   638   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   639   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   640  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   641  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   642  /** \brief Return the DMA channel suspend Mode status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   643   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   644   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   645   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   646   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   647  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   648  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   649  /** \brief Return remaining DMA transfer count
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   650   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   651   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   652   * \return Remaining DMA transfer count
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   653   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   654   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   655   *      // Wait till transfer count (TCOUNT) becomes 0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   656   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   657   *      bool notFinished;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   658   *      do {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   659   *              notFinished = false;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   660   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   661   *                              notFinished = true;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   662   *                              break;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   663   *                      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   664   *      } while( notFinished );
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   665   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   666   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   667   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   668  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   669  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   670  /** \brief get the time stamp
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   671   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   672   * \return the current time stamp
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   673   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   674   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   675   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   676   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   677   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   678   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   679  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   680  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   681  /** \brief Configure the move count for each DMA channel transfer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   682   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   683   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   684   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   685   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   686   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   687   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   688   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   689   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   690  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   691  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   692  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   693   * After a transaction, the hardware request transaction remain enabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   694   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   695   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   696   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   697   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   698   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   699   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   700   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   701  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   702  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   703  /** \brief Configure the destination address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   704   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   705   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   706   * \param address is the Initial address of the destination pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   707   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   708   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   709   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   710   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   711   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   712  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   713  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   714  /** \brief Configure a DMA channel destination pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   715   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   716   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   717   * \param incStep Specifies the pointer incrementation step
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   718   * \param direction Specifies the incrementation direction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   719   * \param size Specifies the size of the circular buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   720   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   721   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   722   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   723   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   724   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   725  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   726  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   727  /** \brief Configure a DMA channel move
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   728   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   729   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   730   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   731   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   732   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   733   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   734   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   735   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   736  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   737  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   738  /** \brief Configure a DMA channel shadow pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   739   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   740   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   741   * \param shadow Specifies the shadow pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   742   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   743   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   744   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   745   *      // Push the shadow mode into double buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   746   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   747   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   748   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   749   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   750   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   751  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   752  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   753  /** \brief Configure a DMA channel to "single transaction mode"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   754   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   755   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   756   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   757   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   758   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   759   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   760   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   761   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   762  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   763  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   764  /** \brief Configure a DMA channel to "single transaction mode"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   765   * One transfer request starts a complete DMA transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   766   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   767   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   768   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   769   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   770   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   771   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   772   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   773  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   774  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   775  /** \brief Configure a DMA channel to "single transfer mode"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   776   * A transfer request is required for each transfer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   777   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   778   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   779   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   780   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   781   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   782   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   783   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   784  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   785  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   786  /** \brief Configure the source address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   787   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   788   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   789   * \param address is the Initial address of the source pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   790   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   791   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   792   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   793   *      // Check for the end of current transaction and before trigger the channel request for
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   794   *      // for another channel, re configure the source and destination addresses
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   795   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   796   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   797   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the source address for the channel 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   800   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   801   *      // Re-Program the destination address for channel 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   803   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   804   *      // Start DMA transaction for channel 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   805   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   806   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   807   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   808   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   809  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   810  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   811  /** \brief Configure a DMA channel source pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   812   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   813   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   814   * \param incStep Specifies the pointer incrementation step
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   815   * \param direction Specifies the incrementation direction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   816   * \param size Specifies the size of the circular buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   817   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   818   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   819   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   820   *      // Re-program the source and destination circular buffer control fields
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   821   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   822   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   823   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   824   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   825   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   826   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   827  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   828  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   829  /** \brief Configure a DMA channel suspend enable
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   830   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   831   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   832   * \param enable enable (1) / disable (0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   833   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   834   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   835  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   836  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   837  /** \brief Configure the move count of a DMA channel transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   838   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   839   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   840   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   841   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   842   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   843   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   844   *      // Start DMA transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   845   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   846   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   847   *      // Wait till end of transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   848   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   849   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the TREL configuration for channel 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   852   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the BLKM configuration for channel 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   855   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   856   *      // Change the Move size configuration for channel 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   858   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the first transfer is initiated
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   861   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   862   *      // Pull down the channel pending request after the transaction gets over
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   864   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   867   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   868   *      // Start DMA transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   869   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   870   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   871   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   872   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   873  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   874  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   875  /** \brief Configure the shadow pointer register to read only
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   876   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   877   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   878   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   879   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   880   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   881   *      // Disable the shadow mode to come out of double buffer mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   882   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   883   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   884   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   885   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   886  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   887  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   888  /** \brief Configure the shadow pointer register to write-able
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   889   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   890   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   891   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   892   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   893   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   894   *      // Enable the shadow mode to come out of double buffer mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   895   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   896   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   897   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   898   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   899  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   900  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   901  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   902  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   903  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   904   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   905  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   906  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   907  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   908  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   909  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   910  /** \brief Clear channel halt request and aknowledgement
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   911   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   912   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   913   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   914   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   915   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   916   *      // Quit the halt mode of operation
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   917   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   918   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   919   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   920   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   921  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   922  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   923  /** \brief Get channel halt aknowledgement
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   924   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   925   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   926   * \return halt aknowledgement
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   927   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   928   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   929   *      // Check for the channel halt aknowledgement
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   930   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   931   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   932   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   933   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   934  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   935  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   936  /** \brief setting channel halt request
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   937   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   938   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   939   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   940   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   941   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   942   *      // Halt the channel processing
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   943   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   944   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   945   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   946   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   947  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   948  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   949  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   950  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   951  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   952   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   953  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   954  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   955  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   956  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   957  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   958  /** \brief get information on buffer being read by software and clear the notification flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   959   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   960   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   961   * \return TRUE  if one of the buffers is being read by software
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   962   * FALSE if one of the buffers is already read by software
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   963   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   964   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   965   *      // Check the buffer being read (Double buffer operation mode)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   966   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   967   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   968   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   969   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   970  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   971  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   972  /** \brief get Double buffer selection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   973   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   974   * \param channelId channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   975   * \return TRUE if buffer 1 is being filled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   976   * FALSE if buffer 0 is being filled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   977   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   978   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   979   *      boolean buffer_being_filled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   980   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   981   *      // Check the buffer being filled (Double buffer operation mode)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   982   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   983   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   984   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   985   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   986  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   987  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   988  /** \brief keeps the double buffer active
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   989   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   990   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   991   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   992   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   993   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   994   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   995   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   996   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   997   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   998  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   999  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1000  /** \brief Double buffer switch application
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1001   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1002   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1003   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1004   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1005   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1006   *      // Apply software buffer switch
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1007   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1008   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1009   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1010   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1011  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1012  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1013  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1014  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1015  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1016   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1017  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1018  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1019  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1020  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1021  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1022  /** \brief Clear a channel transfer interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1023   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1024   * \param channelId channel for which the interrupt flag should be cleared
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1025   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1026   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1027   * see Dma.INTSR
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1028   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1029   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1030  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1031  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1032  /** \brief Disable channel interrupt trigger
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1033   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1034   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1035   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1036   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1037   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1038   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1039   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1040   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1041   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1042  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1043  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1044  /** \brief Enable channel interrupt trigger
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1045   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1046   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1047   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1048   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1049   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1050   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1051   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1052   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1053   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1054  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1055  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1056  /** \brief Return and clear a channel transfer interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1057   * The flag is automatically cleared with the call to this function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1058   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1059   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1060   * \return TRUE if the interrupt flag is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1061   * FALSE if the interrupt flag is not set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1062   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1063   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1064   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1065   *      // and clear it once it is set and checked
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1066   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1067   *      // Wait till end of the transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1068   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1069   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1070   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1071   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1072  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1073  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1074  /** \brief Returns and clears the pattern detection interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1075   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1076   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1077   * \return TRUE  if pattern detection for a given channel is found
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1078   * FALSE if pattern detection for a given channel is not found
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1079   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1080   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1081   *      // wait till pattern match is found for given channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1082   *      // and clear it once it is set and checked
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1083   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1084   *      // Wait for the pattern detection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1085   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1086   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1087   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1088   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1089  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1090  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1091  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1092   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1093   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1094   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1095   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1096   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1097   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1098   *      // wait for the destination buffer wrap interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1099   *      // and clear it once it is set and checked
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1100   *      boolean destinationWrapFlag;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1101   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1102   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1103   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1104   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1105   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1106  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1107  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1108  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1109   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1110   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1111   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1112   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1113   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1114   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1115   *      // wait for the source buffer wrap interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1116   *      // and clear it once it is set and checked
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1117   *      boolean sourceWrapFlag;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1118   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1119   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1120   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1121   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1122   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1123  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1124  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1125  /** \brief Return a channel transfer interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1126   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1127   * \param channelId channel for which the interrupt flag should be returned
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1128   * \return TRUE if the interrupt flag is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1129   * FALSE if the interrupt flag is not set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1130   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1131   * see Dma.INTSR
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1132   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1133   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1134  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1135  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1136  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1137   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1138   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1139   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1140   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1141   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1142   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1143   *      boolean patternDetectOldVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1144   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1145   *      // Check the old value of the pattern detection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1146   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1147   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1148   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1149   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1150  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1151  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1152  /** \brief Returns the SRC pointer for given DMA channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1153   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1154   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1155   * \return SRC pointer for given DMA channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1156   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1157   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1158   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1159   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1160   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1161   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1162  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1163  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1164  /** \brief Setting of channel interrupt service request by software
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1165   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1166   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1167   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1168   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1169   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1170   *      // Set the channel interrupt service request through software
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1171   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1172   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1173   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1174   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1175  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1176  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1177  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1178  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1179  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1180  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1181  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1182  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1183  /** \brief Configure the hardware resource partition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1184   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1185   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1186   * \param resourcePartition Hardware resource partition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1187   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1188   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1189   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1190   *      // Set the required hardware resource partition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1191   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1192   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1193   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1194   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1195  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1196  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1197  /** \brief Sets the Interrupt control value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1198   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1199   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1200   * \param value Interrupt control value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1201   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1202   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1203  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1204  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1205  /** \brief Sets the Circular Buffer Destination Length
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1206   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1207   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1208   * \param length Circular Buffer Destination Length
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1209   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1210   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1211  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1212  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1213  /** \brief Sets the Circular Buffer Source Length
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1214   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1215   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1216   * \param length Circular Buffer Source Length
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1217   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1218   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1219  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1220  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1221  /** \brief Enable the Source Circular Buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1222   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1223   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1224   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1225   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1226  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1227  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1228  /** \brief Enable the Destination Circular Buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1229   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1230   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1231   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1232   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1233  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1234  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1235  /** \brief Returns the Data CRC
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1236   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1237   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1238   * \return The Data CRC value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1239   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1240  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1241  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1242  /** \brief Returns the Source and Destination CRC
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1243   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1244   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1245   * \return The source and destination CRC values
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1246   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1247  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1248  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1249  /** \brief Returns the ERR pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1250   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1251   * \return ERR pointer for given DMA
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1252   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1253  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1254  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1255  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1256  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1257  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1258  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1259  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1260  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1261      dma->TSR[channelId].B.HLTCLR = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1262  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1263  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1264  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1265  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1266  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1267      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1268  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1269  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1270  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1271  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1272  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1273      dma->TSR[channelId].B.CTL = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1274  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1275  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1277  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1278  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1279      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1280      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1281          dma->BLK1.CLRE.U = mask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1282      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1283      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1284      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1285          dma->BLK0.CLRE.U = mask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1286      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1287  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1288  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1289  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1290  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1291  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1292      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1293  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1294  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1295  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1296  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1297  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1298      dma->TSR[channelId].B.DCH = 1;
	mul	d15,d4,#4
	addsc.a	a2,a15,d15,#0
	mul	d15,d4,#4
	addsc.a	a15,a15,d15,#0
.L216:
	ld.bu	d15,[a15]7682
.L217:
	or	d15,#2
	st.b	[a2]7682,d15
.L10:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   135  ctionEnabled(dma->dma, channel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   136      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   137          IfxDma_disableChannelTransaction(dma->dma, channel);
	ld.a	a15,[a4]
.L105:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    44   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    45   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    46   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    47   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    48   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    49   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    50   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    51   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    52   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    53   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    54   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    55   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    56   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    57   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    58   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    59   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    60   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    61  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    62  #ifndef IFXDMA_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    63  #define IFXDMA_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    64  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    65  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    66  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    67  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    68  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    69  #include "_Impl/IfxDma_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    70  #include "IfxDma_bf.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    72  #include "IfxDma_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    73  #include "Src/Std/IfxSrc.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    74  #include "Scu/Std/IfxScuWdt.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    75  #include "Scu/Std/IfxScuCcu.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    76  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    77  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    78  /*--------------------------------Enumerations--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    79  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    80  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    81  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    82   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    83  /** \brief Bus Master Mode definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    84   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    85   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    86  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    87  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    88      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    89      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    90  } IfxDma_BusMasterMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    91  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    92  /** \brief Channel Bus Priority definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    93   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    94  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    95  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    96      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    97      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    98      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    99  } IfxDma_ChannelBusPriority;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   100  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   101  /** \brief DMA circular buffer (wrap around) definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   102   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   103   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   104  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   105  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   122  } IfxDma_ChannelIncrementCircular;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   123  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   124  /** \brief DMA incrementation direction definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   125   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   126   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   127  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   128  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   129      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   130      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   131  } IfxDma_ChannelIncrementDirection;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   132  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   133  /** \brief DMA incrementation definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   134   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   135   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   136  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   137  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   143      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   144      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   145      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   146  } IfxDma_ChannelIncrementStep;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   147  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   148  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   149   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   150   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   151  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   152  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   153      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   154      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   155  } IfxDma_ChannelInterruptControl;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   156  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   157  /** \brief DMA transfer definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   158   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   159   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   160  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   161  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   167      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   168      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   169      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   170  } IfxDma_ChannelMove;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   171  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   172  /** \brief DMA move size definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   173   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   174   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   175  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   176  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   180      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   181      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   182      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   183  } IfxDma_ChannelMoveSize;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   184  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   185  /** \brief DMA operation mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   186   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   187   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   188  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   189  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   190      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   191      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   192  } IfxDma_ChannelOperationMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   193  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   194  /** \brief Pattern detection selection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   195   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   196   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   197  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   198  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   204      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   205      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   206      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   207  } IfxDma_ChannelPattern;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   208  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   209  /** \brief Channel Priority definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   210   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   211  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   212  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   213      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   214      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   215      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   216  } IfxDma_ChannelPriority;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   217  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   218  /** \brief DMA request mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   219   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   220   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   221  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   222  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   223      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   224      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   225  } IfxDma_ChannelRequestMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   226  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   227  /** \brief DMA request selection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   228   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   229   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   230  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   231  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   232      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   233      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelRequestSource;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   235  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   236  /** \brief shadow definition definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   237   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   238   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   239  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   240  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   251      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   252      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   253      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   254  } IfxDma_ChannelShadow;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   255  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   256  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   257  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   259      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   260      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   261      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   262  } IfxDma_HardwareResourcePartition;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   263  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   264  /** \brief DMA move engine definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   265   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   266  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   267  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   268      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   269      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   270  } IfxDma_MoveEngine;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   271  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   272  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   273   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   274   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   275  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   276  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   277      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   278      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   279  } IfxDma_SleepMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   280  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   281  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   282  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   283  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   284   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   285  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   286  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   287  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   288  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   289  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   290  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   291   * This API needs to be used after the IfxDma_resetChannel()
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   292   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   293   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   294   * \return TRUE if the channel is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   295   * FALSE if the channel is not reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   296   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   297   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   298   *      // check whether the channel is reset or not and also the hardware trigger disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   299   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   300   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   301   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   302   *              // Dma is out of RESET and there is no hardware request enabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   303   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   304   *      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   305   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   306   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   307   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   308  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   309  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   310  /** \brief Reset the channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   311   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   312   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   313   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   314   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   315   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   316   *      // Apply reset to the channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   317   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   318   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   319   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   320   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   321  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   322  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   323  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   324  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   325  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   326   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   327  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   328  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   329  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   330  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   331  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   332  /** \brief Clear the channel transaction request lost flag status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   333   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   334   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   335   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   336   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   337   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   338   *      // Clear the channel transaction request lost flag status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   339   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   340   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   341   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   342   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   343  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   344  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   345  /** \brief Disable a DMA channel hardware transaction request
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   346   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   347   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   348   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   349   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   350   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   351   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   352   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   353  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   354  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   355  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   356   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   357   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   358   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   359   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   360   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   361   *      // Disable the transaction request lost interrupt for given channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   362   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   363   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   364   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   366  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   368  /** \brief Enable a DMA channel hardware transaction request
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   369   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   370   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   371   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   372   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   373   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   374   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   375   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   376   *              IfxSrc_setRequest(src);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   377   *      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   378   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   379   *      // Do not restrict the hardware triggering to only one transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   380   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   381   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   382   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   383   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   384   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   385   *      // Check for end of transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   386   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   387   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   388   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   389   *      // Enable the hardware trigger for channel 3
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   391   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   392   *      // Disable the hardware trigger for channel 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   393   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   394   *      // Hardware triggers for second time
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   395   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   396   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   397   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   398   *              IfxSrc_setRequest(src);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   399   *      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   400   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   401   *      // Restrict the hardware triggering to only one transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   402   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   403   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   404   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   405   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   406   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   407  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   408  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   409  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   410   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   411   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   412   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   413   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   414   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   415   *      // Enable the transaction request lost interrupt for given channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   416   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   417   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   418   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   419   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   420  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   421  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   422  /** \brief Check the channel transaction request lost flag status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   423   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   424   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   425   * \return TRUE if the TRL is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   426   * FALSE if the TRL is not set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   427   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   428   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   429   *      boolean trlFlag;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   430   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   431   *      // Check whether the channel transaction request lost flag is set or not
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   432   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   433   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   434   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   435   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   436  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   437  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   438  /** \brief Converts DMA circular range to circular code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   439   * \param range DMA circular range
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   440   * \return DMA circular code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   441   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   442  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   443  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   444  /** \brief Return the hardware transaction request status of a DMA channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   445   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   446   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   447   * \return TRUE if the hardware transaction request is enabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   448   * FALSE if the hardware transaction request is disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   449   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   450   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   451   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   452   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   453  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   454  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   455  /** \brief Return the status of a DMA channel (transaction pending)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   456   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   457   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   458   * \return TRUE if a transaction request for the given channel is pending
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   459   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   460   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   461   *      // check for the channel request pending with the channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   462   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   463   *              // There is channel request pending for channel 0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   464   *              result |= 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   465   *      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   466   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   467   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   468   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   469  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   470  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   471  /** \brief Sets the sensitivity of the module to sleep signal
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   472   * \param dma pointer to DMA registers
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   473   * \param mode mode selection (enable/disable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   474   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   475   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   476  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   477  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   478  /** \brief Request a DMA channel transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   479   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   480   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   481   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   482   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   483   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   484   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   485   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   486  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   487  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   488  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   489  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   490  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   491   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   492  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   493  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   494  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   495  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   496  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   497  /** \brief Clear the DMA error status flags
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   498   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   499   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   500   * \param mask value holds the bits to clear or mask
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   501   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   502   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   503   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   504   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   505   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_S |    // move engine source error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   510   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   511   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   512   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   513   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   514   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   515   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   516  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   517  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   518  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   519   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   520   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   521   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   522   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   523   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   524   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   525   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   526  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   527  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   528  /** \brief Disable the generation of a Move engine source error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   529   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   530   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   531   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   532   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   533   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   534   *      // Disable the move engine source and destination move errors
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   535   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   536   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   537   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   538   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   539   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   540  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   541  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   542  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   543   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   544   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   545   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   546   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   547   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   548   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   549   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   550  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   551  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   552  /** \brief Enable the generation of a Move engine source error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   553   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   554   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   555   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   556   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   557   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   558   *      // Enable the move engine source and destination move errors
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   559   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   560   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   561   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   562   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   563   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   564  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   565  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   566  /** \brief Return the DMA error status flags
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   567   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   568   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   569   * \return the content of the DMA.ERRSR register
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   570   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   571   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   572   *      uint32 errorFlags = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   573   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   574   *      // Get the status of the error flags of move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   575   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   576   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   578   *              }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   579   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   580   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   581   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   582   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   583   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   584   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   585   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   586   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   587   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   588   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   589   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   590   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   591   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   592   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   593   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   594   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   595   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   596   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   597   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   598   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   599   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   600   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   601   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   602   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   603   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   604   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   605   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   606  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   607  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   608  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   609  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   610  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   611   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   612  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   613  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   614  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   615  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   616  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   617  /** \brief Get a channel source address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   618   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   619   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   620   * \return Actual channel destination address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   621   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   622   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   623   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   624   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   625   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   626   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   627   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   628  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   629  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   630  /** \brief Get a channel source address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   631   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   632   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   633   * \return Actual channel source address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   634   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   635   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   636   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   637   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   638   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   639   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   640  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   641  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   642  /** \brief Return the DMA channel suspend Mode status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   643   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   644   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   645   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   646   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   647  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   648  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   649  /** \brief Return remaining DMA transfer count
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   650   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   651   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   652   * \return Remaining DMA transfer count
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   653   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   654   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   655   *      // Wait till transfer count (TCOUNT) becomes 0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   656   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   657   *      bool notFinished;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   658   *      do {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   659   *              notFinished = false;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   660   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   661   *                              notFinished = true;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   662   *                              break;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   663   *                      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   664   *      } while( notFinished );
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   665   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   666   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   667   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   668  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   669  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   670  /** \brief get the time stamp
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   671   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   672   * \return the current time stamp
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   673   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   674   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   675   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   676   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   677   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   678   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   679  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   680  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   681  /** \brief Configure the move count for each DMA channel transfer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   682   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   683   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   684   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   685   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   686   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   687   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   688   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   689   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   690  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   691  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   692  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   693   * After a transaction, the hardware request transaction remain enabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   694   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   695   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   696   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   697   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   698   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   699   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   700   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   701  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   702  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   703  /** \brief Configure the destination address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   704   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   705   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   706   * \param address is the Initial address of the destination pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   707   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   708   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   709   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   710   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   711   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   712  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   713  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   714  /** \brief Configure a DMA channel destination pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   715   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   716   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   717   * \param incStep Specifies the pointer incrementation step
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   718   * \param direction Specifies the incrementation direction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   719   * \param size Specifies the size of the circular buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   720   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   721   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   722   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   723   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   724   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   725  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   726  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   727  /** \brief Configure a DMA channel move
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   728   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   729   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   730   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   731   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   732   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   733   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   734   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   735   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   736  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   737  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   738  /** \brief Configure a DMA channel shadow pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   739   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   740   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   741   * \param shadow Specifies the shadow pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   742   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   743   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   744   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   745   *      // Push the shadow mode into double buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   746   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   747   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   748   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   749   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   750   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   751  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   752  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   753  /** \brief Configure a DMA channel to "single transaction mode"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   754   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   755   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   756   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   757   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   758   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   759   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   760   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   761   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   762  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   763  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   764  /** \brief Configure a DMA channel to "single transaction mode"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   765   * One transfer request starts a complete DMA transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   766   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   767   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   768   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   769   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   770   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   771   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   772   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   773  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   774  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   775  /** \brief Configure a DMA channel to "single transfer mode"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   776   * A transfer request is required for each transfer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   777   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   778   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   779   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   780   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   781   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   782   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   783   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   784  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   785  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   786  /** \brief Configure the source address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   787   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   788   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   789   * \param address is the Initial address of the source pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   790   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   791   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   792   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   793   *      // Check for the end of current transaction and before trigger the channel request for
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   794   *      // for another channel, re configure the source and destination addresses
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   795   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   796   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   797   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the source address for the channel 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   800   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   801   *      // Re-Program the destination address for channel 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   803   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   804   *      // Start DMA transaction for channel 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   805   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   806   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   807   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   808   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   809  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   810  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   811  /** \brief Configure a DMA channel source pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   812   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   813   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   814   * \param incStep Specifies the pointer incrementation step
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   815   * \param direction Specifies the incrementation direction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   816   * \param size Specifies the size of the circular buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   817   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   818   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   819   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   820   *      // Re-program the source and destination circular buffer control fields
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   821   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   822   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   823   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   824   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   825   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   826   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   827  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   828  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   829  /** \brief Configure a DMA channel suspend enable
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   830   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   831   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   832   * \param enable enable (1) / disable (0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   833   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   834   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   835  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   836  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   837  /** \brief Configure the move count of a DMA channel transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   838   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   839   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   840   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   841   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   842   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   843   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   844   *      // Start DMA transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   845   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   846   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   847   *      // Wait till end of transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   848   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   849   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the TREL configuration for channel 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   852   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the BLKM configuration for channel 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   855   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   856   *      // Change the Move size configuration for channel 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   858   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the first transfer is initiated
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   861   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   862   *      // Pull down the channel pending request after the transaction gets over
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   864   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   867   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   868   *      // Start DMA transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   869   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   870   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   871   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   872   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   873  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   874  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   875  /** \brief Configure the shadow pointer register to read only
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   876   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   877   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   878   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   879   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   880   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   881   *      // Disable the shadow mode to come out of double buffer mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   882   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   883   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   884   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   885   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   886  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   887  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   888  /** \brief Configure the shadow pointer register to write-able
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   889   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   890   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   891   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   892   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   893   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   894   *      // Enable the shadow mode to come out of double buffer mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   895   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   896   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   897   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   898   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   899  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   900  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   901  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   902  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   903  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   904   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   905  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   906  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   907  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   908  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   909  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   910  /** \brief Clear channel halt request and aknowledgement
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   911   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   912   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   913   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   914   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   915   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   916   *      // Quit the halt mode of operation
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   917   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   918   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   919   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   920   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   921  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   922  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   923  /** \brief Get channel halt aknowledgement
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   924   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   925   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   926   * \return halt aknowledgement
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   927   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   928   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   929   *      // Check for the channel halt aknowledgement
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   930   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   931   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   932   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   933   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   934  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   935  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   936  /** \brief setting channel halt request
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   937   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   938   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   939   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   940   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   941   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   942   *      // Halt the channel processing
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   943   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   944   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   945   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   946   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   947  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   948  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   949  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   950  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   951  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   952   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   953  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   954  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   955  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   956  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   957  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   958  /** \brief get information on buffer being read by software and clear the notification flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   959   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   960   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   961   * \return TRUE  if one of the buffers is being read by software
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   962   * FALSE if one of the buffers is already read by software
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   963   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   964   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   965   *      // Check the buffer being read (Double buffer operation mode)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   966   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   967   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   968   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   969   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   970  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   971  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   972  /** \brief get Double buffer selection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   973   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   974   * \param channelId channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   975   * \return TRUE if buffer 1 is being filled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   976   * FALSE if buffer 0 is being filled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   977   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   978   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   979   *      boolean buffer_being_filled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   980   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   981   *      // Check the buffer being filled (Double buffer operation mode)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   982   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   983   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   984   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   985   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   986  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   987  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   988  /** \brief keeps the double buffer active
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   989   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   990   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   991   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   992   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   993   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   994   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   995   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   996   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   997   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   998  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   999  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1000  /** \brief Double buffer switch application
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1001   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1002   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1003   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1004   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1005   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1006   *      // Apply software buffer switch
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1007   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1008   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1009   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1010   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1011  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1012  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1013  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1014  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1015  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1016   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1017  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1018  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1019  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1020  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1021  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1022  /** \brief Clear a channel transfer interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1023   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1024   * \param channelId channel for which the interrupt flag should be cleared
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1025   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1026   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1027   * see Dma.INTSR
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1028   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1029   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1030  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1031  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1032  /** \brief Disable channel interrupt trigger
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1033   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1034   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1035   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1036   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1037   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1038   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1039   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1040   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1041   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1042  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1043  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1044  /** \brief Enable channel interrupt trigger
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1045   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1046   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1047   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1048   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1049   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1050   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1051   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1052   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1053   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1054  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1055  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1056  /** \brief Return and clear a channel transfer interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1057   * The flag is automatically cleared with the call to this function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1058   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1059   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1060   * \return TRUE if the interrupt flag is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1061   * FALSE if the interrupt flag is not set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1062   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1063   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1064   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1065   *      // and clear it once it is set and checked
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1066   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1067   *      // Wait till end of the transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1068   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1069   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1070   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1071   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1072  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1073  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1074  /** \brief Returns and clears the pattern detection interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1075   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1076   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1077   * \return TRUE  if pattern detection for a given channel is found
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1078   * FALSE if pattern detection for a given channel is not found
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1079   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1080   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1081   *      // wait till pattern match is found for given channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1082   *      // and clear it once it is set and checked
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1083   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1084   *      // Wait for the pattern detection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1085   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1086   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1087   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1088   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1089  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1090  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1091  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1092   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1093   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1094   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1095   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1096   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1097   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1098   *      // wait for the destination buffer wrap interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1099   *      // and clear it once it is set and checked
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1100   *      boolean destinationWrapFlag;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1101   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1102   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1103   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1104   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1105   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1106  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1107  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1108  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1109   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1110   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1111   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1112   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1113   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1114   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1115   *      // wait for the source buffer wrap interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1116   *      // and clear it once it is set and checked
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1117   *      boolean sourceWrapFlag;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1118   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1119   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1120   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1121   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1122   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1123  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1124  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1125  /** \brief Return a channel transfer interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1126   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1127   * \param channelId channel for which the interrupt flag should be returned
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1128   * \return TRUE if the interrupt flag is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1129   * FALSE if the interrupt flag is not set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1130   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1131   * see Dma.INTSR
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1132   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1133   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1134  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1135  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1136  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1137   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1138   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1139   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1140   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1141   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1142   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1143   *      boolean patternDetectOldVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1144   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1145   *      // Check the old value of the pattern detection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1146   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1147   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1148   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1149   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1150  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1151  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1152  /** \brief Returns the SRC pointer for given DMA channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1153   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1154   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1155   * \return SRC pointer for given DMA channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1156   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1157   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1158   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1159   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1160   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1161   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1162  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1163  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1164  /** \brief Setting of channel interrupt service request by software
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1165   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1166   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1167   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1168   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1169   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1170   *      // Set the channel interrupt service request through software
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1171   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1172   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1173   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1174   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1175  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1176  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1177  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1178  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1179  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1180  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1181  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1182  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1183  /** \brief Configure the hardware resource partition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1184   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1185   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1186   * \param resourcePartition Hardware resource partition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1187   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1188   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1189   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1190   *      // Set the required hardware resource partition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1191   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1192   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1193   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1194   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1195  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1196  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1197  /** \brief Sets the Interrupt control value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1198   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1199   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1200   * \param value Interrupt control value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1201   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1202   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1203  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1204  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1205  /** \brief Sets the Circular Buffer Destination Length
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1206   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1207   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1208   * \param length Circular Buffer Destination Length
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1209   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1210   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1211  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1212  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1213  /** \brief Sets the Circular Buffer Source Length
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1214   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1215   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1216   * \param length Circular Buffer Source Length
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1217   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1218   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1219  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1220  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1221  /** \brief Enable the Source Circular Buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1222   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1223   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1224   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1225   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1226  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1227  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1228  /** \brief Enable the Destination Circular Buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1229   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1230   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1231   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1232   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1233  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1234  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1235  /** \brief Returns the Data CRC
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1236   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1237   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1238   * \return The Data CRC value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1239   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1240  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1241  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1242  /** \brief Returns the Source and Destination CRC
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1243   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1244   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1245   * \return The source and destination CRC values
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1246   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1247  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1248  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1249  /** \brief Returns the ERR pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1250   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1251   * \return ERR pointer for given DMA
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1252   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1253  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1254  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1255  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1256  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1257  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1258  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1259  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1260  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1261      dma->TSR[channelId].B.HLTCLR = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1262  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1263  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1264  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1265  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1266  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1267      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1268  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1269  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1270  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1271  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1272  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1273      dma->TSR[channelId].B.CTL = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1274  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1275  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1277  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1278  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1279      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1280      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1281          dma->BLK1.CLRE.U = mask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1282      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1283      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1284      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1285          dma->BLK0.CLRE.U = mask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1286      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1287  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1288  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1289  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1290  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1291  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1292      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1293  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1294  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1295  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1296  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1297  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1298      dma->TSR[channelId].B.DCH = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1299  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1300  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1301  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1302  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1303  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1304      dma->CH[channelId].ADICR.B.ETRL = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1305  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1306  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1307  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1308  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1309  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1310      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1311      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1312          dma->BLK1.EER.B.EDER = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1313      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1314      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1315      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1316          dma->BLK0.EER.B.EDER = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1317      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1318  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1319  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1320  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1321  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1322  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1323      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1324      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1325          dma->BLK1.EER.B.ESER = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1326      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1327      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1328      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1329          dma->BLK0.EER.B.ESER = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1330      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1331  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1332  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1333  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1334  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1335  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1336      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1337  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1338  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1339  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1340  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1341  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1342      dma->TSR[channelId].B.ECH = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1343  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1344  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1345  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1346  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1347  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1348      dma->CH[channelId].ADICR.B.ETRL = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1349  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1350  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1351  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1352  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1353  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1354      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1355      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1356          dma->BLK1.EER.B.EDER = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1357      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1358      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1359      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1360          dma->BLK0.EER.B.EDER = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1361      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1362  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1363  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1364  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1365  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1366  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1367      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1368      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1369          dma->BLK1.EER.B.ESER = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1370      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1371      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1372      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1373          dma->BLK0.EER.B.ESER = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1374      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1375  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1376  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1377  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1378  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1379  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1380      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1381  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1382      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1383  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1384      if (result == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1385      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1386          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1387      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1388  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1389      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1390  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1391  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1392  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1393  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1394  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1395      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1396  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1397      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1398  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1399      if (result == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1400      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1401          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1402      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1403  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1404      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1405  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1406  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1407  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1408  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1409  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1410      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1411  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1412      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1413  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1414      if (result == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1415      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1416          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1417      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1418  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1419      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1420  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1421  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1422  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1423  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1424  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1425      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1426  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1427      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1428  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1429      if (result == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1430      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1431          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1432      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1433  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1434      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1435  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1436  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1437  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1438  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1439  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1440      return dma->CH[channelId].DADR.U;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1441  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1442  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1443  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1444  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1445  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1446      return dma->TSR[channelId].B.HLTACK != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1447  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1448  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1449  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1450  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1451  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1452      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1453  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1454      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1455  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1456      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1457  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1458  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1459  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1460  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1461  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1462      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1463  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1464  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1465  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1466  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1467  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1468      return dma->CH[channelId].SADR.U;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1469  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1470  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1471  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1472  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1473  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1474      return dma->SUSACR[channelId].B.SUSAC;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1475  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1476  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1477  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1478  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1479  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1480      return dma->TSR[channelId].B.TRL != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1481  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1482  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1483  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1484  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1485  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1486      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1487  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1488  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1489  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1490  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1491  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1492      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1493  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1494  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1495  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1496  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1497  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1498      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1499  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1500      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1501  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1502      if (result == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1503      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1504          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1505      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1506  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1507      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1508  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1509  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1510  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1511  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1512  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1513      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1514  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1515  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1516  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1517  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1518  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1519      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1520      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1521          return dma->BLK1.ERRSR.U;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1522      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1523      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1524      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1525          return dma->BLK0.ERRSR.U;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1526      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1527  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1528  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1529  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1530  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1531  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1533      // only a single DMA available, therefore no check for the dma pointer required
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1535  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1536  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1537  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1538  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1539  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1540      return dma->TIME.U;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1541  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1542  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1543  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1544  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1545  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1546      return dma->TSR[channelId].B.RST == 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1547  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1548  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1549  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1550  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1551  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1552      return dma->TSR[channelId].B.HTRE != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1553  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1554  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1555  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1556  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1557  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1558      return dma->TSR[channelId].B.CH != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1559  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1560  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1561  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1562  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1563  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1564      dma->CH[channelId].CHCSR.U = 0U << IFX_DMA_CH_CHCSR_FROZEN_OFF;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1565  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1566  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1567  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1568  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1569  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1570      dma->TSR[channelId].B.RST = 1;
	mul	d15,d4,#4
	addsc.a	a2,a15,d15,#0
	mul	d15,d4,#4
	addsc.a	a15,a15,d15,#0
.L218:
	ld.bu	d15,[a15]7680
.L219:
	or	d15,#1
	st.b	[a2]7680,d15
.L106:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   138   }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   139  
	j	.L11
.L12:
.L11:
	ld.a	a15,[a4]
.L113:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    44   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    45   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    46   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    47   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    48   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    49   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    50   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    51   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    52   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    53   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    54   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    55   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    56   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    57   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    58   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    59   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    60   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    61  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    62  #ifndef IFXDMA_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    63  #define IFXDMA_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    64  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    65  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    66  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    67  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    68  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    69  #include "_Impl/IfxDma_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    70  #include "IfxDma_bf.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    72  #include "IfxDma_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    73  #include "Src/Std/IfxSrc.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    74  #include "Scu/Std/IfxScuWdt.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    75  #include "Scu/Std/IfxScuCcu.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    76  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    77  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    78  /*--------------------------------Enumerations--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    79  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    80  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    81  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    82   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    83  /** \brief Bus Master Mode definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    84   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    85   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    86  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    87  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    88      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    89      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    90  } IfxDma_BusMasterMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    91  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    92  /** \brief Channel Bus Priority definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    93   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    94  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    95  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    96      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    97      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    98      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    99  } IfxDma_ChannelBusPriority;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   100  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   101  /** \brief DMA circular buffer (wrap around) definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   102   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   103   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   104  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   105  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   122  } IfxDma_ChannelIncrementCircular;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   123  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   124  /** \brief DMA incrementation direction definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   125   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   126   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   127  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   128  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   129      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   130      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   131  } IfxDma_ChannelIncrementDirection;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   132  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   133  /** \brief DMA incrementation definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   134   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   135   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   136  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   137  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   143      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   144      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   145      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   146  } IfxDma_ChannelIncrementStep;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   147  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   148  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   149   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   150   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   151  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   152  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   153      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   154      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   155  } IfxDma_ChannelInterruptControl;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   156  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   157  /** \brief DMA transfer definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   158   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   159   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   160  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   161  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   167      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   168      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   169      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   170  } IfxDma_ChannelMove;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   171  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   172  /** \brief DMA move size definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   173   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   174   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   175  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   176  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   180      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   181      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   182      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   183  } IfxDma_ChannelMoveSize;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   184  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   185  /** \brief DMA operation mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   186   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   187   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   188  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   189  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   190      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   191      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   192  } IfxDma_ChannelOperationMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   193  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   194  /** \brief Pattern detection selection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   195   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   196   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   197  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   198  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   204      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   205      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   206      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   207  } IfxDma_ChannelPattern;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   208  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   209  /** \brief Channel Priority definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   210   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   211  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   212  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   213      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   214      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   215      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   216  } IfxDma_ChannelPriority;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   217  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   218  /** \brief DMA request mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   219   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   220   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   221  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   222  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   223      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   224      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   225  } IfxDma_ChannelRequestMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   226  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   227  /** \brief DMA request selection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   228   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   229   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   230  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   231  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   232      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   233      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelRequestSource;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   235  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   236  /** \brief shadow definition definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   237   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   238   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   239  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   240  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   251      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   252      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   253      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   254  } IfxDma_ChannelShadow;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   255  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   256  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   257  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   259      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   260      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   261      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   262  } IfxDma_HardwareResourcePartition;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   263  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   264  /** \brief DMA move engine definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   265   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   266  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   267  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   268      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   269      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   270  } IfxDma_MoveEngine;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   271  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   272  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   273   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   274   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   275  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   276  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   277      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   278      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   279  } IfxDma_SleepMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   280  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   281  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   282  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   283  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   284   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   285  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   286  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   287  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   288  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   289  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   290  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   291   * This API needs to be used after the IfxDma_resetChannel()
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   292   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   293   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   294   * \return TRUE if the channel is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   295   * FALSE if the channel is not reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   296   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   297   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   298   *      // check whether the channel is reset or not and also the hardware trigger disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   299   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   300   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   301   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   302   *              // Dma is out of RESET and there is no hardware request enabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   303   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   304   *      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   305   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   306   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   307   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   308  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   309  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   310  /** \brief Reset the channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   311   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   312   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   313   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   314   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   315   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   316   *      // Apply reset to the channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   317   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   318   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   319   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   320   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   321  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   322  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   323  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   324  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   325  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   326   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   327  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   328  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   329  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   330  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   331  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   332  /** \brief Clear the channel transaction request lost flag status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   333   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   334   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   335   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   336   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   337   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   338   *      // Clear the channel transaction request lost flag status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   339   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   340   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   341   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   342   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   343  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   344  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   345  /** \brief Disable a DMA channel hardware transaction request
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   346   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   347   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   348   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   349   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   350   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   351   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   352   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   353  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   354  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   355  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   356   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   357   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   358   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   359   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   360   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   361   *      // Disable the transaction request lost interrupt for given channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   362   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   363   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   364   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   366  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   368  /** \brief Enable a DMA channel hardware transaction request
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   369   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   370   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   371   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   372   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   373   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   374   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   375   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   376   *              IfxSrc_setRequest(src);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   377   *      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   378   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   379   *      // Do not restrict the hardware triggering to only one transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   380   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   381   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   382   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   383   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   384   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   385   *      // Check for end of transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   386   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   387   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   388   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   389   *      // Enable the hardware trigger for channel 3
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   391   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   392   *      // Disable the hardware trigger for channel 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   393   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   394   *      // Hardware triggers for second time
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   395   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   396   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   397   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   398   *              IfxSrc_setRequest(src);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   399   *      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   400   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   401   *      // Restrict the hardware triggering to only one transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   402   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   403   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   404   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   405   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   406   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   407  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   408  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   409  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   410   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   411   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   412   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   413   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   414   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   415   *      // Enable the transaction request lost interrupt for given channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   416   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   417   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   418   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   419   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   420  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   421  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   422  /** \brief Check the channel transaction request lost flag status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   423   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   424   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   425   * \return TRUE if the TRL is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   426   * FALSE if the TRL is not set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   427   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   428   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   429   *      boolean trlFlag;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   430   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   431   *      // Check whether the channel transaction request lost flag is set or not
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   432   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   433   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   434   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   435   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   436  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   437  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   438  /** \brief Converts DMA circular range to circular code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   439   * \param range DMA circular range
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   440   * \return DMA circular code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   441   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   442  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   443  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   444  /** \brief Return the hardware transaction request status of a DMA channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   445   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   446   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   447   * \return TRUE if the hardware transaction request is enabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   448   * FALSE if the hardware transaction request is disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   449   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   450   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   451   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   452   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   453  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   454  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   455  /** \brief Return the status of a DMA channel (transaction pending)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   456   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   457   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   458   * \return TRUE if a transaction request for the given channel is pending
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   459   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   460   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   461   *      // check for the channel request pending with the channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   462   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   463   *              // There is channel request pending for channel 0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   464   *              result |= 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   465   *      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   466   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   467   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   468   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   469  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   470  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   471  /** \brief Sets the sensitivity of the module to sleep signal
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   472   * \param dma pointer to DMA registers
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   473   * \param mode mode selection (enable/disable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   474   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   475   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   476  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   477  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   478  /** \brief Request a DMA channel transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   479   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   480   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   481   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   482   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   483   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   484   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   485   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   486  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   487  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   488  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   489  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   490  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   491   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   492  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   493  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   494  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   495  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   496  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   497  /** \brief Clear the DMA error status flags
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   498   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   499   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   500   * \param mask value holds the bits to clear or mask
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   501   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   502   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   503   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   504   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   505   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_S |    // move engine source error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   510   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   511   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   512   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   513   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   514   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   515   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   516  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   517  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   518  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   519   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   520   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   521   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   522   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   523   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   524   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   525   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   526  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   527  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   528  /** \brief Disable the generation of a Move engine source error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   529   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   530   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   531   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   532   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   533   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   534   *      // Disable the move engine source and destination move errors
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   535   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   536   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   537   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   538   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   539   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   540  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   541  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   542  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   543   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   544   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   545   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   546   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   547   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   548   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   549   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   550  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   551  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   552  /** \brief Enable the generation of a Move engine source error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   553   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   554   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   555   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   556   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   557   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   558   *      // Enable the move engine source and destination move errors
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   559   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   560   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   561   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   562   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   563   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   564  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   565  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   566  /** \brief Return the DMA error status flags
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   567   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   568   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   569   * \return the content of the DMA.ERRSR register
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   570   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   571   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   572   *      uint32 errorFlags = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   573   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   574   *      // Get the status of the error flags of move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   575   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   576   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   578   *              }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   579   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   580   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   581   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   582   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   583   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   584   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   585   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   586   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   587   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   588   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   589   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   590   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   591   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   592   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   593   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   594   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   595   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   596   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   597   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   598   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   599   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   600   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   601   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   602   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   603   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   604   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   605   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   606  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   607  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   608  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   609  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   610  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   611   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   612  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   613  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   614  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   615  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   616  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   617  /** \brief Get a channel source address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   618   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   619   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   620   * \return Actual channel destination address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   621   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   622   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   623   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   624   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   625   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   626   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   627   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   628  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   629  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   630  /** \brief Get a channel source address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   631   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   632   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   633   * \return Actual channel source address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   634   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   635   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   636   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   637   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   638   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   639   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   640  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   641  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   642  /** \brief Return the DMA channel suspend Mode status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   643   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   644   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   645   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   646   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   647  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   648  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   649  /** \brief Return remaining DMA transfer count
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   650   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   651   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   652   * \return Remaining DMA transfer count
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   653   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   654   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   655   *      // Wait till transfer count (TCOUNT) becomes 0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   656   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   657   *      bool notFinished;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   658   *      do {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   659   *              notFinished = false;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   660   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   661   *                              notFinished = true;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   662   *                              break;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   663   *                      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   664   *      } while( notFinished );
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   665   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   666   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   667   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   668  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   669  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   670  /** \brief get the time stamp
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   671   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   672   * \return the current time stamp
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   673   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   674   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   675   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   676   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   677   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   678   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   679  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   680  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   681  /** \brief Configure the move count for each DMA channel transfer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   682   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   683   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   684   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   685   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   686   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   687   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   688   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   689   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   690  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   691  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   692  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   693   * After a transaction, the hardware request transaction remain enabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   694   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   695   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   696   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   697   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   698   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   699   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   700   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   701  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   702  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   703  /** \brief Configure the destination address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   704   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   705   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   706   * \param address is the Initial address of the destination pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   707   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   708   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   709   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   710   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   711   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   712  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   713  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   714  /** \brief Configure a DMA channel destination pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   715   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   716   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   717   * \param incStep Specifies the pointer incrementation step
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   718   * \param direction Specifies the incrementation direction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   719   * \param size Specifies the size of the circular buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   720   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   721   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   722   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   723   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   724   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   725  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   726  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   727  /** \brief Configure a DMA channel move
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   728   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   729   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   730   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   731   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   732   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   733   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   734   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   735   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   736  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   737  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   738  /** \brief Configure a DMA channel shadow pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   739   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   740   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   741   * \param shadow Specifies the shadow pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   742   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   743   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   744   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   745   *      // Push the shadow mode into double buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   746   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   747   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   748   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   749   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   750   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   751  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   752  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   753  /** \brief Configure a DMA channel to "single transaction mode"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   754   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   755   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   756   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   757   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   758   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   759   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   760   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   761   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   762  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   763  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   764  /** \brief Configure a DMA channel to "single transaction mode"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   765   * One transfer request starts a complete DMA transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   766   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   767   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   768   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   769   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   770   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   771   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   772   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   773  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   774  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   775  /** \brief Configure a DMA channel to "single transfer mode"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   776   * A transfer request is required for each transfer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   777   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   778   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   779   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   780   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   781   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   782   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   783   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   784  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   785  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   786  /** \brief Configure the source address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   787   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   788   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   789   * \param address is the Initial address of the source pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   790   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   791   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   792   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   793   *      // Check for the end of current transaction and before trigger the channel request for
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   794   *      // for another channel, re configure the source and destination addresses
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   795   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   796   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   797   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the source address for the channel 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   800   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   801   *      // Re-Program the destination address for channel 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   803   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   804   *      // Start DMA transaction for channel 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   805   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   806   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   807   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   808   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   809  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   810  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   811  /** \brief Configure a DMA channel source pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   812   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   813   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   814   * \param incStep Specifies the pointer incrementation step
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   815   * \param direction Specifies the incrementation direction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   816   * \param size Specifies the size of the circular buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   817   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   818   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   819   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   820   *      // Re-program the source and destination circular buffer control fields
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   821   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   822   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   823   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   824   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   825   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   826   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   827  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   828  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   829  /** \brief Configure a DMA channel suspend enable
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   830   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   831   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   832   * \param enable enable (1) / disable (0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   833   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   834   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   835  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   836  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   837  /** \brief Configure the move count of a DMA channel transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   838   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   839   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   840   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   841   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   842   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   843   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   844   *      // Start DMA transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   845   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   846   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   847   *      // Wait till end of transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   848   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   849   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the TREL configuration for channel 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   852   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the BLKM configuration for channel 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   855   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   856   *      // Change the Move size configuration for channel 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   858   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the first transfer is initiated
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   861   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   862   *      // Pull down the channel pending request after the transaction gets over
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   864   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   867   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   868   *      // Start DMA transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   869   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   870   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   871   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   872   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   873  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   874  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   875  /** \brief Configure the shadow pointer register to read only
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   876   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   877   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   878   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   879   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   880   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   881   *      // Disable the shadow mode to come out of double buffer mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   882   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   883   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   884   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   885   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   886  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   887  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   888  /** \brief Configure the shadow pointer register to write-able
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   889   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   890   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   891   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   892   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   893   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   894   *      // Enable the shadow mode to come out of double buffer mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   895   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   896   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   897   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   898   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   899  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   900  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   901  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   902  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   903  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   904   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   905  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   906  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   907  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   908  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   909  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   910  /** \brief Clear channel halt request and aknowledgement
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   911   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   912   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   913   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   914   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   915   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   916   *      // Quit the halt mode of operation
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   917   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   918   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   919   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   920   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   921  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   922  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   923  /** \brief Get channel halt aknowledgement
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   924   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   925   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   926   * \return halt aknowledgement
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   927   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   928   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   929   *      // Check for the channel halt aknowledgement
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   930   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   931   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   932   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   933   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   934  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   935  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   936  /** \brief setting channel halt request
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   937   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   938   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   939   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   940   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   941   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   942   *      // Halt the channel processing
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   943   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   944   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   945   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   946   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   947  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   948  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   949  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   950  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   951  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   952   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   953  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   954  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   955  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   956  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   957  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   958  /** \brief get information on buffer being read by software and clear the notification flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   959   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   960   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   961   * \return TRUE  if one of the buffers is being read by software
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   962   * FALSE if one of the buffers is already read by software
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   963   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   964   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   965   *      // Check the buffer being read (Double buffer operation mode)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   966   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   967   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   968   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   969   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   970  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   971  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   972  /** \brief get Double buffer selection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   973   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   974   * \param channelId channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   975   * \return TRUE if buffer 1 is being filled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   976   * FALSE if buffer 0 is being filled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   977   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   978   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   979   *      boolean buffer_being_filled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   980   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   981   *      // Check the buffer being filled (Double buffer operation mode)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   982   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   983   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   984   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   985   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   986  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   987  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   988  /** \brief keeps the double buffer active
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   989   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   990   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   991   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   992   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   993   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   994   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   995   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   996   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   997   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   998  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   999  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1000  /** \brief Double buffer switch application
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1001   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1002   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1003   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1004   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1005   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1006   *      // Apply software buffer switch
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1007   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1008   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1009   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1010   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1011  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1012  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1013  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1014  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1015  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1016   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1017  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1018  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1019  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1020  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1021  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1022  /** \brief Clear a channel transfer interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1023   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1024   * \param channelId channel for which the interrupt flag should be cleared
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1025   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1026   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1027   * see Dma.INTSR
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1028   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1029   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1030  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1031  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1032  /** \brief Disable channel interrupt trigger
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1033   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1034   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1035   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1036   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1037   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1038   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1039   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1040   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1041   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1042  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1043  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1044  /** \brief Enable channel interrupt trigger
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1045   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1046   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1047   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1048   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1049   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1050   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1051   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1052   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1053   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1054  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1055  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1056  /** \brief Return and clear a channel transfer interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1057   * The flag is automatically cleared with the call to this function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1058   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1059   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1060   * \return TRUE if the interrupt flag is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1061   * FALSE if the interrupt flag is not set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1062   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1063   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1064   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1065   *      // and clear it once it is set and checked
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1066   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1067   *      // Wait till end of the transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1068   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1069   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1070   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1071   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1072  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1073  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1074  /** \brief Returns and clears the pattern detection interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1075   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1076   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1077   * \return TRUE  if pattern detection for a given channel is found
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1078   * FALSE if pattern detection for a given channel is not found
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1079   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1080   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1081   *      // wait till pattern match is found for given channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1082   *      // and clear it once it is set and checked
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1083   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1084   *      // Wait for the pattern detection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1085   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1086   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1087   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1088   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1089  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1090  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1091  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1092   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1093   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1094   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1095   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1096   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1097   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1098   *      // wait for the destination buffer wrap interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1099   *      // and clear it once it is set and checked
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1100   *      boolean destinationWrapFlag;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1101   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1102   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1103   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1104   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1105   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1106  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1107  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1108  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1109   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1110   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1111   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1112   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1113   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1114   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1115   *      // wait for the source buffer wrap interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1116   *      // and clear it once it is set and checked
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1117   *      boolean sourceWrapFlag;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1118   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1119   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1120   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1121   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1122   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1123  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1124  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1125  /** \brief Return a channel transfer interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1126   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1127   * \param channelId channel for which the interrupt flag should be returned
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1128   * \return TRUE if the interrupt flag is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1129   * FALSE if the interrupt flag is not set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1130   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1131   * see Dma.INTSR
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1132   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1133   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1134  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1135  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1136  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1137   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1138   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1139   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1140   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1141   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1142   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1143   *      boolean patternDetectOldVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1144   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1145   *      // Check the old value of the pattern detection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1146   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1147   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1148   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1149   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1150  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1151  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1152  /** \brief Returns the SRC pointer for given DMA channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1153   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1154   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1155   * \return SRC pointer for given DMA channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1156   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1157   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1158   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1159   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1160   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1161   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1162  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1163  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1164  /** \brief Setting of channel interrupt service request by software
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1165   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1166   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1167   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1168   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1169   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1170   *      // Set the channel interrupt service request through software
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1171   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1172   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1173   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1174   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1175  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1176  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1177  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1178  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1179  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1180  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1181  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1182  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1183  /** \brief Configure the hardware resource partition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1184   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1185   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1186   * \param resourcePartition Hardware resource partition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1187   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1188   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1189   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1190   *      // Set the required hardware resource partition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1191   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1192   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1193   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1194   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1195  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1196  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1197  /** \brief Sets the Interrupt control value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1198   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1199   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1200   * \param value Interrupt control value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1201   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1202   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1203  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1204  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1205  /** \brief Sets the Circular Buffer Destination Length
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1206   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1207   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1208   * \param length Circular Buffer Destination Length
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1209   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1210   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1211  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1212  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1213  /** \brief Sets the Circular Buffer Source Length
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1214   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1215   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1216   * \param length Circular Buffer Source Length
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1217   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1218   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1219  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1220  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1221  /** \brief Enable the Source Circular Buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1222   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1223   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1224   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1225   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1226  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1227  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1228  /** \brief Enable the Destination Circular Buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1229   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1230   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1231   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1232   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1233  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1234  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1235  /** \brief Returns the Data CRC
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1236   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1237   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1238   * \return The Data CRC value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1239   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1240  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1241  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1242  /** \brief Returns the Source and Destination CRC
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1243   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1244   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1245   * \return The source and destination CRC values
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1246   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1247  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1248  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1249  /** \brief Returns the ERR pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1250   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1251   * \return ERR pointer for given DMA
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1252   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1253  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1254  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1255  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1256  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1257  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1258  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1259  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1260  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1261      dma->TSR[channelId].B.HLTCLR = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1262  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1263  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1264  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1265  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1266  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1267      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1268  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1269  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1270  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1271  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1272  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1273      dma->TSR[channelId].B.CTL = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1274  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1275  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1277  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1278  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1279      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1280      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1281          dma->BLK1.CLRE.U = mask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1282      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1283      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1284      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1285          dma->BLK0.CLRE.U = mask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1286      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1287  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1288  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1289  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1290  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1291  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1292      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1293  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1294  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1295  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1296  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1297  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1298      dma->TSR[channelId].B.DCH = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1299  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1300  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1301  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1302  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1303  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1304      dma->CH[channelId].ADICR.B.ETRL = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1305  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1306  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1307  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1308  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1309  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1310      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1311      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1312          dma->BLK1.EER.B.EDER = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1313      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1314      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1315      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1316          dma->BLK0.EER.B.EDER = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1317      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1318  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1319  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1320  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1321  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1322  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1323      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1324      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1325          dma->BLK1.EER.B.ESER = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1326      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1327      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1328      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1329          dma->BLK0.EER.B.ESER = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1330      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1331  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1332  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1333  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1334  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1335  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1336      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1337  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1338  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1339  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1340  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1341  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1342      dma->TSR[channelId].B.ECH = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1343  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1344  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1345  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1346  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1347  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1348      dma->CH[channelId].ADICR.B.ETRL = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1349  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1350  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1351  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1352  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1353  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1354      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1355      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1356          dma->BLK1.EER.B.EDER = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1357      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1358      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1359      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1360          dma->BLK0.EER.B.EDER = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1361      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1362  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1363  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1364  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1365  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1366  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1367      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1368      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1369          dma->BLK1.EER.B.ESER = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1370      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1371      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1372      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1373          dma->BLK0.EER.B.ESER = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1374      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1375  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1376  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1377  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1378  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1379  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1380      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1381  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1382      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1383  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1384      if (result == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1385      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1386          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1387      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1388  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1389      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1390  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1391  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1392  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1393  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1394  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1395      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1396  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1397      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1398  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1399      if (result == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1400      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1401          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1402      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1403  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1404      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1405  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1406  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1407  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1408  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1409  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1410      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1411  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1412      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1413  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1414      if (result == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1415      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1416          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1417      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1418  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1419      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1420  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1421  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1422  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1423  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1424  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1425      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1426  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1427      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1428  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1429      if (result == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1430      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1431          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1432      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1433  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1434      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1435  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1436  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1437  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1438  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1439  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1440      return dma->CH[channelId].DADR.U;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1441  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1442  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1443  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1444  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1445  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1446      return dma->TSR[channelId].B.HLTACK != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1447  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1448  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1449  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1450  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1451  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1452      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1453  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1454      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1455  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1456      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1457  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1458  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1459  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1460  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1461  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1462      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1463  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1464  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1465  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1466  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1467  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1468      return dma->CH[channelId].SADR.U;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1469  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1470  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1471  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1472  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1473  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1474      return dma->SUSACR[channelId].B.SUSAC;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1475  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1476  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1477  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1478  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1479  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1480      return dma->TSR[channelId].B.TRL != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1481  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1482  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1483  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1484  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1485  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1486      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1487  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1488  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1489  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1490  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1491  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1492      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1493  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1494  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1495  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1496  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1497  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1498      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1499  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1500      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1501  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1502      if (result == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1503      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1504          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1505      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1506  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1507      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1508  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1509  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1510  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1511  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1512  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1513      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1514  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1515  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1516  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1517  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1518  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1519      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1520      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1521          return dma->BLK1.ERRSR.U;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1522      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1523      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1524      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1525          return dma->BLK0.ERRSR.U;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1526      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1527  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1528  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1529  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1530  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1531  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1533      // only a single DMA available, therefore no check for the dma pointer required
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1535  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1536  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1537  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1538  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1539  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1540      return dma->TIME.U;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1541  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1542  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1543  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1544  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1545  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1546      return dma->TSR[channelId].B.RST == 0;
	mul	d15,d4,#4
	addsc.a	a15,a15,d15,#0
.L220:
	ld.bu	d15,[a15]7680
	and	d15,#1
.L221:
	eq	d15,d15,#0
.L222:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1546      return dma->TSR[channelId].B.RST == 0;      (inlined)
	j	.L13

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1547  }      (inlined)
.L13:
	jeq	d15,#0,.L12
.L223:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   140  ionEnabled(dma->dma, channel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   141      {
	ret
.L86:
	
__IfxDma_Dma_deInitChannel_function_end:
	.size	IfxDma_Dma_deInitChannel,__IfxDma_Dma_deInitChannel_function_end-IfxDma_Dma_deInitChannel
.L50:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_initChannel',code,cluster('IfxDma_Dma_initChannel')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_initChannel'
	.align	2
	
	.global	IfxDma_Dma_initChannel

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   142          IfxDma_disableChannelTransaction(dma->dma, channel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   143      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   144  
; Function IfxDma_Dma_initChannel
.L28:
IfxDma_Dma_initChannel:	.type	func
	mov.aa	a15,a4
.L190:
	mov.aa	a12,a5
.L192:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   145      IfxDma_resetChannel(dma->dma, channel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   146  
	ld.a	a2,[a12]
.L239:
	ld.a	a13,[a2]
.L193:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   147      while (!(IfxDma_isChannelReset(dma->dma, channel)))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   148      {}
	st.a	[a15],a13
.L240:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   149  }
	ld.b	d15,[a12]4
.L241:
	st.b	[a15]4,d15
.L242:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   150  
	ld.b	d15,[a12]4
.L243:
	mul	d15,d15,#32
	addsc.a	a2,a13,d15,#0
	lea	a2,[a2]8192
.L244:
	st.a	[a15]8,a2
.L245:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   151  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   152  void IfxDma_Dma_initChannel(IfxDma_Dma_Channel *channel, const IfxDma_Dma_ChannelConfig *config)
	ld.a	a4,[a15]8
.L189:
	mov.aa	a5,a12
	call	IfxDma_Dma_configureTransactionSet
.L133:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   153  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   154      Ifx_DMA *dma = config->module->dma;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   155  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   156      channel->dma       = dma;
	mov	d0,#0
.L194:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   157      channel->channelId = config->channelId;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   158      channel->channel   = &dma->CH[config->channelId];
	ld.bu	d15,[a12]35
.L246:
	jeq	d15,#0,.L14
.L247:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   159  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   160      IfxDma_Dma_configureTransactionSet(channel->channel, config);
	mov	d15,#1
.L248:
	insert	d0,d0,d15,#16,#1
.L249:
	j	.L15
.L14:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   161  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   162      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   163          Ifx_DMA_TSR tsr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   164          tsr.U = 0;
	mov	d15,#1
.L250:
	insert	d0,d0,d15,#17,#1
.L15:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   165  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   166          if (config->hardwareRequestEnabled)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   167          {
	ld.b	d15,[a15]4
.L251:
	mul	d15,d15,#4
	addsc.a	a2,a13,d15,#0
.L252:
	st.w	[a2]7680,d0
.L134:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   168              tsr.B.ECH = 1;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   169          }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   170          else
	ld.hu	d15,[a12]52
.L253:
	jlt.u	d15,#1,.L16
.L137:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   171          {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   172              tsr.B.DCH = 1;
	ld.a	a2,[a15]
.L254:
	ld.b	d15,[a15]4
.L141:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);      (inlined)
	jz.a	a2,.L17
.L17:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    44   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    45   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    46   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    47   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    48   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    49   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    50   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    51   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    52   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    53   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    54   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    55   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    56   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    57   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    58   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    59   * \ingroup IfxLld_Dma_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    60   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    61  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    62  #ifndef IFXDMA_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    63  #define IFXDMA_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    64  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    65  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    66  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    67  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    68  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    69  #include "_Impl/IfxDma_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    70  #include "IfxDma_bf.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    72  #include "IfxDma_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    73  #include "Src/Std/IfxSrc.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    74  #include "Scu/Std/IfxScuWdt.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    75  #include "Scu/Std/IfxScuCcu.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    76  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    77  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    78  /*--------------------------------Enumerations--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    79  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    80  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    81  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    82   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    83  /** \brief Bus Master Mode definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    84   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    85   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    86  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    87  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    88      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    89      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    90  } IfxDma_BusMasterMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    91  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    92  /** \brief Channel Bus Priority definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    93   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    94  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    95  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    96      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    97      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    98      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    99  } IfxDma_ChannelBusPriority;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   100  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   101  /** \brief DMA circular buffer (wrap around) definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   102   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   103   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   104  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   105  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   122  } IfxDma_ChannelIncrementCircular;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   123  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   124  /** \brief DMA incrementation direction definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   125   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   126   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   127  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   128  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   129      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   130      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   131  } IfxDma_ChannelIncrementDirection;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   132  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   133  /** \brief DMA incrementation definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   134   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   135   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   136  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   137  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   143      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   144      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   145      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   146  } IfxDma_ChannelIncrementStep;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   147  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   148  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   149   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   150   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   151  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   152  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   153      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   154      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   155  } IfxDma_ChannelInterruptControl;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   156  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   157  /** \brief DMA transfer definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   158   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   159   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   160  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   161  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   167      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   168      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   169      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   170  } IfxDma_ChannelMove;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   171  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   172  /** \brief DMA move size definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   173   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   174   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   175  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   176  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   180      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   181      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   182      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   183  } IfxDma_ChannelMoveSize;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   184  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   185  /** \brief DMA operation mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   186   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   187   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   188  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   189  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   190      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   191      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   192  } IfxDma_ChannelOperationMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   193  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   194  /** \brief Pattern detection selection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   195   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   196   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   197  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   198  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   204      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   205      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   206      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   207  } IfxDma_ChannelPattern;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   208  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   209  /** \brief Channel Priority definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   210   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   211  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   212  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   213      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   214      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   215      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   216  } IfxDma_ChannelPriority;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   217  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   218  /** \brief DMA request mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   219   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   220   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   221  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   222  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   223      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   224      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   225  } IfxDma_ChannelRequestMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   226  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   227  /** \brief DMA request selection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   228   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   229   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   230  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   231  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   232      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   233      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelRequestSource;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   235  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   236  /** \brief shadow definition definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   237   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   238   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   239  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   240  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   251      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   252      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   253      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   254  } IfxDma_ChannelShadow;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   255  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   256  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   257  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   259      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   260      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   261      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   262  } IfxDma_HardwareResourcePartition;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   263  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   264  /** \brief DMA move engine definition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   265   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   266  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   267  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   268      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   269      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   270  } IfxDma_MoveEngine;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   271  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   272  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   273   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   274   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   275  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   276  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   277      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   278      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   279  } IfxDma_SleepMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   280  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   281  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   282  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   283  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   284   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   285  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   286  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   287  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   288  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   289  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   290  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   291   * This API needs to be used after the IfxDma_resetChannel()
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   292   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   293   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   294   * \return TRUE if the channel is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   295   * FALSE if the channel is not reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   296   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   297   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   298   *      // check whether the channel is reset or not and also the hardware trigger disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   299   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   300   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   301   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   302   *              // Dma is out of RESET and there is no hardware request enabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   303   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   304   *      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   305   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   306   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   307   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   308  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   309  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   310  /** \brief Reset the channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   311   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   312   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   313   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   314   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   315   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   316   *      // Apply reset to the channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   317   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   318   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   319   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   320   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   321  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   322  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   323  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   324  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   325  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   326   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   327  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   328  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   329  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   330  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   331  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   332  /** \brief Clear the channel transaction request lost flag status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   333   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   334   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   335   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   336   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   337   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   338   *      // Clear the channel transaction request lost flag status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   339   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   340   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   341   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   342   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   343  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   344  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   345  /** \brief Disable a DMA channel hardware transaction request
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   346   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   347   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   348   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   349   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   350   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   351   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   352   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   353  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   354  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   355  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   356   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   357   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   358   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   359   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   360   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   361   *      // Disable the transaction request lost interrupt for given channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   362   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   363   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   364   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   366  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   368  /** \brief Enable a DMA channel hardware transaction request
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   369   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   370   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   371   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   372   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   373   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   374   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   375   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   376   *              IfxSrc_setRequest(src);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   377   *      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   378   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   379   *      // Do not restrict the hardware triggering to only one transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   380   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   381   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   382   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   383   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   384   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   385   *      // Check for end of transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   386   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   387   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   388   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   389   *      // Enable the hardware trigger for channel 3
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   391   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   392   *      // Disable the hardware trigger for channel 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   393   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   394   *      // Hardware triggers for second time
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   395   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   396   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   397   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   398   *              IfxSrc_setRequest(src);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   399   *      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   400   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   401   *      // Restrict the hardware triggering to only one transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   402   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   403   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   404   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   405   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   406   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   407  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   408  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   409  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   410   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   411   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   412   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   413   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   414   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   415   *      // Enable the transaction request lost interrupt for given channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   416   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   417   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   418   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   419   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   420  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   421  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   422  /** \brief Check the channel transaction request lost flag status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   423   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   424   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   425   * \return TRUE if the TRL is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   426   * FALSE if the TRL is not set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   427   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   428   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   429   *      boolean trlFlag;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   430   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   431   *      // Check whether the channel transaction request lost flag is set or not
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   432   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   433   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   434   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   435   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   436  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   437  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   438  /** \brief Converts DMA circular range to circular code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   439   * \param range DMA circular range
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   440   * \return DMA circular code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   441   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   442  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   443  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   444  /** \brief Return the hardware transaction request status of a DMA channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   445   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   446   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   447   * \return TRUE if the hardware transaction request is enabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   448   * FALSE if the hardware transaction request is disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   449   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   450   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   451   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   452   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   453  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   454  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   455  /** \brief Return the status of a DMA channel (transaction pending)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   456   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   457   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   458   * \return TRUE if a transaction request for the given channel is pending
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   459   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   460   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   461   *      // check for the channel request pending with the channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   462   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   463   *              // There is channel request pending for channel 0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   464   *              result |= 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   465   *      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   466   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   467   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   468   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   469  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   470  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   471  /** \brief Sets the sensitivity of the module to sleep signal
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   472   * \param dma pointer to DMA registers
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   473   * \param mode mode selection (enable/disable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   474   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   475   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   476  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   477  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   478  /** \brief Request a DMA channel transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   479   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   480   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   481   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   482   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   483   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   484   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   485   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   486  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   487  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   488  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   489  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   490  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   491   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   492  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   493  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   494  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   495  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   496  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   497  /** \brief Clear the DMA error status flags
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   498   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   499   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   500   * \param mask value holds the bits to clear or mask
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   501   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   502   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   503   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   504   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   505   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_S |    // move engine source error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   510   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   511   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   512   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   513   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   514   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   515   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   516  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   517  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   518  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   519   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   520   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   521   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   522   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   523   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   524   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   525   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   526  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   527  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   528  /** \brief Disable the generation of a Move engine source error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   529   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   530   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   531   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   532   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   533   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   534   *      // Disable the move engine source and destination move errors
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   535   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   536   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   537   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   538   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   539   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   540  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   541  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   542  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   543   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   544   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   545   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   546   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   547   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   548   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   549   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   550  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   551  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   552  /** \brief Enable the generation of a Move engine source error interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   553   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   554   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   555   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   556   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   557   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   558   *      // Enable the move engine source and destination move errors
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   559   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   560   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   561   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   562   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   563   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   564  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   565  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   566  /** \brief Return the DMA error status flags
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   567   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   568   * \param moveEngine pointer to the DMA move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   569   * \return the content of the DMA.ERRSR register
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   570   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   571   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   572   *      uint32 errorFlags = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   573   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   574   *      // Get the status of the error flags of move engine
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   575   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   576   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   578   *              }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   579   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   580   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   581   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   582   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   583   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   584   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   585   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   586   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   587   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   588   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   589   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   590   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   591   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   592   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   593   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   594   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   595   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   596   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   597   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   598   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   599   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   600   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   601   *           // ...
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   602   *           }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   603   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   604   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   605   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   606  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   607  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   608  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   609  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   610  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   611   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   612  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   613  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   614  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   615  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   616  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   617  /** \brief Get a channel source address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   618   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   619   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   620   * \return Actual channel destination address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   621   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   622   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   623   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   624   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   625   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   626   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   627   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   628  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   629  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   630  /** \brief Get a channel source address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   631   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   632   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   633   * \return Actual channel source address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   634   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   635   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   636   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   637   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   638   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   639   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   640  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   641  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   642  /** \brief Return the DMA channel suspend Mode status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   643   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   644   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   645   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   646   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   647  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   648  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   649  /** \brief Return remaining DMA transfer count
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   650   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   651   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   652   * \return Remaining DMA transfer count
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   653   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   654   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   655   *      // Wait till transfer count (TCOUNT) becomes 0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   656   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   657   *      bool notFinished;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   658   *      do {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   659   *              notFinished = false;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   660   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   661   *                              notFinished = true;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   662   *                              break;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   663   *                      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   664   *      } while( notFinished );
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   665   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   666   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   667   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   668  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   669  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   670  /** \brief get the time stamp
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   671   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   672   * \return the current time stamp
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   673   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   674   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   675   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   676   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   677   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   678   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   679  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   680  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   681  /** \brief Configure the move count for each DMA channel transfer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   682   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   683   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   684   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   685   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   686   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   687   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   688   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   689   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   690  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   691  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   692  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   693   * After a transaction, the hardware request transaction remain enabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   694   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   695   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   696   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   697   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   698   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   699   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   700   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   701  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   702  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   703  /** \brief Configure the destination address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   704   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   705   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   706   * \param address is the Initial address of the destination pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   707   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   708   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   709   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   710   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   711   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   712  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   713  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   714  /** \brief Configure a DMA channel destination pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   715   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   716   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   717   * \param incStep Specifies the pointer incrementation step
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   718   * \param direction Specifies the incrementation direction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   719   * \param size Specifies the size of the circular buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   720   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   721   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   722   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   723   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   724   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   725  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   726  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   727  /** \brief Configure a DMA channel move
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   728   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   729   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   730   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   731   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   732   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   733   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   734   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   735   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   736  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   737  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   738  /** \brief Configure a DMA channel shadow pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   739   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   740   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   741   * \param shadow Specifies the shadow pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   742   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   743   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   744   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   745   *      // Push the shadow mode into double buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   746   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   747   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   748   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   749   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   750   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   751  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   752  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   753  /** \brief Configure a DMA channel to "single transaction mode"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   754   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   755   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   756   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   757   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   758   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   759   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   760   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   761   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   762  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   763  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   764  /** \brief Configure a DMA channel to "single transaction mode"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   765   * One transfer request starts a complete DMA transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   766   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   767   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   768   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   769   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   770   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   771   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   772   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   773  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   774  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   775  /** \brief Configure a DMA channel to "single transfer mode"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   776   * A transfer request is required for each transfer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   777   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   778   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   779   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   780   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   781   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   782   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   783   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   784  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   785  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   786  /** \brief Configure the source address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   787   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   788   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   789   * \param address is the Initial address of the source pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   790   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   791   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   792   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   793   *      // Check for the end of current transaction and before trigger the channel request for
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   794   *      // for another channel, re configure the source and destination addresses
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   795   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   796   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   797   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the source address for the channel 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   800   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   801   *      // Re-Program the destination address for channel 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   803   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   804   *      // Start DMA transaction for channel 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   805   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   806   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   807   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   808   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   809  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   810  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   811  /** \brief Configure a DMA channel source pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   812   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   813   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   814   * \param incStep Specifies the pointer incrementation step
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   815   * \param direction Specifies the incrementation direction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   816   * \param size Specifies the size of the circular buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   817   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   818   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   819   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   820   *      // Re-program the source and destination circular buffer control fields
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   821   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   822   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   823   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   824   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   825   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   826   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   827  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   828  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   829  /** \brief Configure a DMA channel suspend enable
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   830   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   831   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   832   * \param enable enable (1) / disable (0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   833   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   834   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   835  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   836  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   837  /** \brief Configure the move count of a DMA channel transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   838   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   839   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   840   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   841   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   842   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   843   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   844   *      // Start DMA transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   845   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   846   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   847   *      // Wait till end of transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   848   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   849   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the TREL configuration for channel 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   852   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the BLKM configuration for channel 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   855   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   856   *      // Change the Move size configuration for channel 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   858   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the first transfer is initiated
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   861   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   862   *      // Pull down the channel pending request after the transaction gets over
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   864   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   867   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   868   *      // Start DMA transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   869   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   870   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   871   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   872   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   873  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   874  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   875  /** \brief Configure the shadow pointer register to read only
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   876   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   877   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   878   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   879   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   880   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   881   *      // Disable the shadow mode to come out of double buffer mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   882   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   883   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   884   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   885   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   886  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   887  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   888  /** \brief Configure the shadow pointer register to write-able
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   889   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   890   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   891   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   892   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   893   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   894   *      // Enable the shadow mode to come out of double buffer mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   895   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   896   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   897   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   898   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   899  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   900  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   901  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   902  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   903  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   904   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   905  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   906  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   907  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   908  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   909  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   910  /** \brief Clear channel halt request and aknowledgement
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   911   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   912   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   913   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   914   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   915   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   916   *      // Quit the halt mode of operation
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   917   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   918   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   919   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   920   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   921  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   922  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   923  /** \brief Get channel halt aknowledgement
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   924   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   925   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   926   * \return halt aknowledgement
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   927   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   928   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   929   *      // Check for the channel halt aknowledgement
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   930   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   931   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   932   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   933   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   934  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   935  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   936  /** \brief setting channel halt request
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   937   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   938   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   939   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   940   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   941   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   942   *      // Halt the channel processing
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   943   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   944   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   945   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   946   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   947  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   948  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   949  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   950  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   951  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   952   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   953  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   954  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   955  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   956  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   957  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   958  /** \brief get information on buffer being read by software and clear the notification flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   959   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   960   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   961   * \return TRUE  if one of the buffers is being read by software
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   962   * FALSE if one of the buffers is already read by software
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   963   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   964   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   965   *      // Check the buffer being read (Double buffer operation mode)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   966   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   967   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   968   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   969   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   970  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   971  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   972  /** \brief get Double buffer selection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   973   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   974   * \param channelId channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   975   * \return TRUE if buffer 1 is being filled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   976   * FALSE if buffer 0 is being filled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   977   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   978   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   979   *      boolean buffer_being_filled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   980   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   981   *      // Check the buffer being filled (Double buffer operation mode)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   982   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   983   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   984   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   985   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   986  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   987  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   988  /** \brief keeps the double buffer active
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   989   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   990   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   991   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   992   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   993   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   994   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   995   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   996   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   997   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   998  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   999  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1000  /** \brief Double buffer switch application
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1001   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1002   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1003   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1004   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1005   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1006   *      // Apply software buffer switch
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1007   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1008   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1009   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1010   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1011  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1012  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1013  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1014  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1015  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1016   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1017  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1018  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1019  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1020  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1021  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1022  /** \brief Clear a channel transfer interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1023   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1024   * \param channelId channel for which the interrupt flag should be cleared
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1025   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1026   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1027   * see Dma.INTSR
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1028   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1029   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1030  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1031  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1032  /** \brief Disable channel interrupt trigger
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1033   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1034   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1035   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1036   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1037   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1038   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1039   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1040   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1041   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1042  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1043  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1044  /** \brief Enable channel interrupt trigger
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1045   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1046   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1047   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1048   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1049   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1050   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1051   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1052   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1053   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1054  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1055  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1056  /** \brief Return and clear a channel transfer interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1057   * The flag is automatically cleared with the call to this function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1058   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1059   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1060   * \return TRUE if the interrupt flag is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1061   * FALSE if the interrupt flag is not set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1062   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1063   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1064   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1065   *      // and clear it once it is set and checked
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1066   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1067   *      // Wait till end of the transaction
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1068   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1069   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1070   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1071   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1072  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1073  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1074  /** \brief Returns and clears the pattern detection interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1075   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1076   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1077   * \return TRUE  if pattern detection for a given channel is found
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1078   * FALSE if pattern detection for a given channel is not found
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1079   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1080   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1081   *      // wait till pattern match is found for given channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1082   *      // and clear it once it is set and checked
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1083   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1084   *      // Wait for the pattern detection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1085   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1086   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1087   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1088   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1089  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1090  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1091  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1092   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1093   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1094   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1095   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1096   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1097   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1098   *      // wait for the destination buffer wrap interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1099   *      // and clear it once it is set and checked
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1100   *      boolean destinationWrapFlag;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1101   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1102   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1103   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1104   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1105   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1106  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1107  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1108  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1109   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1110   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1111   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1112   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1113   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1114   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1115   *      // wait for the source buffer wrap interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1116   *      // and clear it once it is set and checked
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1117   *      boolean sourceWrapFlag;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1118   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1119   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1120   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1121   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1122   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1123  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1124  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1125  /** \brief Return a channel transfer interrupt flag
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1126   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1127   * \param channelId channel for which the interrupt flag should be returned
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1128   * \return TRUE if the interrupt flag is set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1129   * FALSE if the interrupt flag is not set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1130   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1131   * see Dma.INTSR
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1132   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1133   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1134  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1135  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1136  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1137   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1138   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1139   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1140   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1141   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1142   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1143   *      boolean patternDetectOldVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1144   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1145   *      // Check the old value of the pattern detection
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1146   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1147   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1148   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1149   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1150  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1151  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1152  /** \brief Returns the SRC pointer for given DMA channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1153   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1154   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1155   * \return SRC pointer for given DMA channel
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1156   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1157   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1158   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1159   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1160   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1161   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1162  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1163  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1164  /** \brief Setting of channel interrupt service request by software
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1165   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1166   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1167   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1168   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1169   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1170   *      // Set the channel interrupt service request through software
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1171   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1172   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1173   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1174   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1175  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1176  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1177  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1178  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1179  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1180  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1181  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1182  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1183  /** \brief Configure the hardware resource partition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1184   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1185   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1186   * \param resourcePartition Hardware resource partition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1187   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1188   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1189   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1190   *      // Set the required hardware resource partition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1191   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1192   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1193   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1194   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1195  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1196  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1197  /** \brief Sets the Interrupt control value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1198   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1199   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1200   * \param value Interrupt control value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1201   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1202   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1203  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1204  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1205  /** \brief Sets the Circular Buffer Destination Length
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1206   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1207   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1208   * \param length Circular Buffer Destination Length
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1209   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1210   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1211  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1212  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1213  /** \brief Sets the Circular Buffer Source Length
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1214   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1215   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1216   * \param length Circular Buffer Source Length
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1217   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1218   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1219  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1220  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1221  /** \brief Enable the Source Circular Buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1222   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1223   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1224   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1225   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1226  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1227  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1228  /** \brief Enable the Destination Circular Buffer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1229   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1230   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1231   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1232   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1233  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1234  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1235  /** \brief Returns the Data CRC
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1236   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1237   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1238   * \return The Data CRC value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1239   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1240  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1241  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1242  /** \brief Returns the Source and Destination CRC
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1243   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1244   * \param channelId DMA channel number
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1245   * \return The source and destination CRC values
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1246   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1247  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1248  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1249  /** \brief Returns the ERR pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1250   * \param dma pointer to DMA module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1251   * \return ERR pointer for given DMA
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1252   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1253  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1254  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1255  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1256  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1257  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1258  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1259  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1260  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1261      dma->TSR[channelId].B.HLTCLR = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1262  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1263  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1264  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1265  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1266  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1267      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1268  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1269  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1270  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1271  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1272  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1273      dma->TSR[channelId].B.CTL = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1274  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1275  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1277  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1278  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1279      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1280      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1281          dma->BLK1.CLRE.U = mask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1282      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1283      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1284      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1285          dma->BLK0.CLRE.U = mask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1286      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1287  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1288  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1289  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1290  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1291  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1292      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1293  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1294  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1295  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1296  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1297  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1298      dma->TSR[channelId].B.DCH = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1299  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1300  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1301  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1302  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1303  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1304      dma->CH[channelId].ADICR.B.ETRL = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1305  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1306  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1307  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1308  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1309  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1310      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1311      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1312          dma->BLK1.EER.B.EDER = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1313      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1314      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1315      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1316          dma->BLK0.EER.B.EDER = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1317      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1318  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1319  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1320  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1321  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1322  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1323      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1324      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1325          dma->BLK1.EER.B.ESER = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1326      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1327      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1328      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1329          dma->BLK0.EER.B.ESER = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1330      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1331  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1332  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1333  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1334  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1335  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1336      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1337  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1338  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1339  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1340  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1341  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1342      dma->TSR[channelId].B.ECH = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1343  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1344  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1345  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1346  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1347  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1348      dma->CH[channelId].ADICR.B.ETRL = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1349  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1350  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1351  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1352  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1353  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1354      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1355      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1356          dma->BLK1.EER.B.EDER = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1357      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1358      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1359      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1360          dma->BLK0.EER.B.EDER = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1361      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1362  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1363  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1364  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1365  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1366  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1367      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1368      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1369          dma->BLK1.EER.B.ESER = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1370      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1371      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1372      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1373          dma->BLK0.EER.B.ESER = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1374      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1375  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1376  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1377  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1378  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1379  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1380      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1381  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1382      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1383  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1384      if (result == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1385      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1386          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1387      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1388  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1389      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1390  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1391  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1392  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1393  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1394  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1395      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1396  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1397      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1398  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1399      if (result == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1400      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1401          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1402      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1403  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1404      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1405  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1406  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1407  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1408  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1409  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1410      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1411  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1412      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1413  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1414      if (result == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1415      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1416          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1417      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1418  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1419      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1420  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1421  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1422  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1423  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1424  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1425      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1426  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1427      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1428  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1429      if (result == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1430      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1431          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1432      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1433  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1434      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1435  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1436  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1437  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1438  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1439  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1440      return dma->CH[channelId].DADR.U;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1441  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1442  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1443  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1444  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1445  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1446      return dma->TSR[channelId].B.HLTACK != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1447  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1448  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1449  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1450  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1451  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1452      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1453  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1454      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1455  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1456      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1457  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1458  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1459  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1460  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1461  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1462      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1463  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1464  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1465  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1466  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1467  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1468      return dma->CH[channelId].SADR.U;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1469  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1470  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1471  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1472  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1473  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1474      return dma->SUSACR[channelId].B.SUSAC;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1475  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1476  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1477  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1478  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1479  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1480      return dma->TSR[channelId].B.TRL != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1481  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1482  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1483  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1484  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1485  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1486      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1487  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1488  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1489  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1490  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1491  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1492      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1493  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1494  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1495  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1496  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1497  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1498      boolean result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1499  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1500      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1501  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1502      if (result == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1503      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1504          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1505      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1506  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1507      return result;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1508  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1509  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1510  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1511  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1512  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1513      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1514  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1515  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1516  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1517  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1518  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1519      if (moveEngine == IfxDma_MoveEngine_1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1520      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1521          return dma->BLK1.ERRSR.U;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1522      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1523      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1524      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1525          return dma->BLK0.ERRSR.U;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1526      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1527  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1528  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1529  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1530  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1531  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1533      // only a single DMA available, therefore no check for the dma pointer required
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
	mul	d15,d15,#4
	mov.a	a15,d15
.L191:
	movh.a	a3,#61444
	add.a	a3,a15
	lea	a15,[a3]-31488
.L196:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];      (inlined)
	j	.L18

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1535  }      (inlined)
.L18:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   173  el->channelId].U = tsr.U;
	ld.bu	d0,[a12]54
.L195:
	ld.hu	d15,[a12]52
.L148:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src SRC
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    46   * \{
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    47   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    48   * \addtogroup IfxLld_Src_Usage
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    49   * \{
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    50   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    51   * For Aurix controller peripherals that can generate service requests is connected to one
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    52   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    53   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    54   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    55   * details of these APIs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    56   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    57   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    58   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    59   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    60   * Service request node is initialized to configure the following,\n
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    61   * 1) Route the interrupt trigger to service provider, which are:\n
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    62   *  __a. One of the available CPUs or\n
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    63   *  __b. DMA controller\n
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    64   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    65   * 2) Priority of CPU Interrupt or DMA Trigger.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    66   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    67   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    68   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    69   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    70   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    71   * User must configure the service request node in the application / driver files.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    72   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    73   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    74   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    75   * Enable the service request node to connect the trigger event from the hardware to service provider.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    76   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    77   * Example:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    78   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    79   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    80   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    81   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    82   * //file: myApplication.c
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    83   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    84   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    85   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    86   * void myDriverInitFunction(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    87   * {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    88   *    // driver init code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    89   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    90   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    91   *    // and priority specified at Ifx_IntPrioDef.h globally
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    92   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0, IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    93   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    94   *    // Step2: Enable the service request node
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    95   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    96   * }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    97   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    98   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    99   * \}
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   100   * \}
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   101   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   102   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   103   * \ingroup IfxLld_Src_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   104   * \defgroup IfxLld_Src_Std_Module Module Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   105   * \ingroup IfxLld_Src_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   106   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   107  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   108  #ifndef IFXSRC_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   109  #define IFXSRC_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   110  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   111  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   112  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   113  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   114  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   115  #include "_Impl/IfxSrc_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   116  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   117  #include "IfxSrc_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   118  /** \addtogroup IfxLld_Src_Std_Service_Request
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   119   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   120  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   121  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   122  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   123  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   124  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   125  /** \brief Resets the overrun flag of the Service Request.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   126   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   127   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   128   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   129   * Usage example: see \ref IfxSrc_init
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   130   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   131   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   132  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   133  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   134  /** \brief Resets a specific interrupt service by software.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   135   * \param src pointer to the Service Request Control register which the request should be cleared.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   136   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   137   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   138   * Usage example: see \ref IfxSrc_init
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   139   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   140   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   141  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   142  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   143  /** \brief Gets the current overrun status.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   144   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   145   * \return current service request control overrun status.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   146   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   147   * Usage example: see \ref IfxSrc_init
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   148   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   149   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   150  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   151  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   152  /** \brief Gets the current request status.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   153   * \param src pointer to the Service Request Control register for which the request status should be returned.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   154   * \return current service request control request status.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   155   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   156   * Usage example: see \ref IfxSrc_init
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   157   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   158   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   159  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   160  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   161  /** \brief Requests a specific interrupt service by software
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   162   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   163   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   164   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   165   * Usage example: see \ref IfxSrc_init
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   166   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   167   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   168  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   169  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   170  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   171  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   172  /** \addtogroup IfxLld_Src_Std_Module
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   173   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   174  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   175  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   176  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   177  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   178  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   179  /** \brief DeInitializes the service request control register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   180   * \param src pointer to the Service Request Control register which should be deinitialised.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   181   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   182   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   183   * Usage example: see \ref IfxSrc_init
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   184   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   185   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   186  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   187  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   188  /** \brief Disables a specific interrupt service request.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   189   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   190   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   191   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   192   * Usage example: see \ref IfxSrc_init
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   193   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   194   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   195  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   196  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   197  /** \brief Enables a specific interrupt service request.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   198   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   199   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   200   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   201   * Usage example: see \ref IfxSrc_init
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   202   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   203   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   204  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   205  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   206  /** \brief Initializes the service request control register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   207   * \param src pointer to the Service Request Control register which should be initialised.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   208   * \param typOfService type of interrupt service provider.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   209   * \param priority Interrupt priority.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   210   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   211   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   212   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   213   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   214   * //define the interrupt priority
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   215   * #define IFXASCLIN0_TX_INTPRIO 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   216   * //get the service request
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   217   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   218   * //initlaise the service request
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   219   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   220   * // enable the service
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   221   * IfxSrc_enable( src );
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   222   * //check for service request flags and clear if they occur
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   223   * if ( IfxSrc_isRequested( src ) == TRUE )
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   224   * {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   225   *    IfxSrc_clearRequest( src );
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   226   * }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   227   * if ( IfxSrc_isOverrun( src ) == TRUE )
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   228   * {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   229   *      IfxSrc_clearOverrun( src );
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   230   * }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   231   * // Atlast deinitialise the service control
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   232   * IfxSrc_deinit( src );
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   233   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   234   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   235   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   236  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   237  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   238  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   239  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   240  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   241  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   242  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   243  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   244  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   245  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   246      src->B.IOVCLR = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   247  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   248  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   249  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   250  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   251  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   252      src->B.CLRR = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   253  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   254  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   255  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   256  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   257  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   258      src->U = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   259  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   260  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   261  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   262  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   263  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   264      src->B.SRE = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   265  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   266  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   267  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   268  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   269  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   270      src->B.SRE = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   271  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   272  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   273  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   274  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   275  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   276      src->B.SRPN = priority;
	ld.bu	d1,[a15]
.L255:
	extr.u	d15,d15,#0,#8
.L256:
	insert	d15,d1,d15,#0,#8
	st.b	[a15],d15
.L257:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   277      src->B.TOS  = typOfService;
	ld.bu	d15,[a15]1
.L258:
	insert	d15,d15,d0,#3,#2
	st.b	[a15]1,d15
.L158:
	ld.bu	d15,[a15]3
.L259:
	or	d15,#2
	st.b	[a15]3,d15
.L149:
	ld.bu	d15,[a15]1
.L260:
	or	d15,#4
	st.b	[a15]1,d15
.L16:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   174  tsr.B.DCH = 1;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   175          }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   176  
	ret
.L127:
	
__IfxDma_Dma_initChannel_function_end:
	.size	IfxDma_Dma_initChannel,__IfxDma_Dma_initChannel_function_end-IfxDma_Dma_initChannel
.L65:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_initChannelConfig',code,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_initChannelConfig'
	.align	2
	
	.global	IfxDma_Dma_initChannelConfig

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   177          dma->TSR[channel->channelId].U = tsr.U;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   178      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   179  
; Function IfxDma_Dma_initChannelConfig
.L30:
IfxDma_Dma_initChannelConfig:	.type	func
	sub.a	a10,#56
.L197:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   180      if (config->channelInterruptPriority > 0)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   181      {
	movh.a	a15,#@his(.1.ini)
	lea	a15,[a15]@los(.1.ini)
	lea	a15,[a15]0
.L265:
	lea	a2,[a10]0
	mov.a	a6,#6
.L19:
	ld.d	e0,[a15+]8
	st.d	[a2+]8,e0
	loop	a6,.L19
.L266:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   182          volatile Ifx_SRC_SRCR *src = IfxDma_getSrcPointer(channel->dma, channel->channelId);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   183          IfxSrc_init(src, config->channelInterruptTypeOfService, config->channelInterruptPriority);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   184          IfxSrc_enable(src);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   185      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   186  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   187  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   188  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   189  void IfxDma_Dma_initChannelConfig(IfxDma_Dma_ChannelConfig *config, IfxDma_Dma *dma)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   190  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   191      const IfxDma_Dma_ChannelConfig defaultConfig = {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   192          .module                                 = NULL_PTR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   193          .channelId                              = IfxDma_ChannelId_0,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   194          .sourceAddress                          = 0,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   195          .destinationAddress                     = 0,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   196          .shadowAddress                          = 0,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   197          .readDataCrc                            = 0,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   198          .sourceDestinationAddressCrc            = 0,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   199          .transferCount                          = 0,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   200          .blockMode                              = IfxDma_ChannelMove_1,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   201          .requestMode                            = IfxDma_ChannelRequestMode_oneTransferPerRequest,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   202          .operationMode                          = IfxDma_ChannelOperationMode_single,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   203          .moveSize                               = IfxDma_ChannelMoveSize_8bit,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   204          .pattern                                = IfxDma_ChannelPattern_0_disable,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   205          .requestSource                          = IfxDma_ChannelRequestSource_peripheral,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   206          .busPriority                            = IfxDma_ChannelBusPriority_medium,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   207          .hardwareRequestEnabled                 = FALSE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   208          .sourceAddressIncrementStep             = IfxDma_ChannelIncrementStep_1,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   209          .sourceAddressIncrementDirection        = IfxDma_ChannelIncrementDirection_positive,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   210          .sourceAddressCircularRange             = IfxDma_ChannelIncrementCircular_32768,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   211          .destinationAddressIncrementStep        = IfxDma_ChannelIncrementStep_1,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   212          .destinationAddressIncrementDirection   = IfxDma_ChannelIncrementDirection_positive,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   213          .destinationAddressCircularRange        = IfxDma_ChannelIncrementCircular_32768,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   214          .shadowControl                          = IfxDma_ChannelShadow_none,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   215          .sourceCircularBufferEnabled            = FALSE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   216          .destinationCircularBufferEnabled       = FALSE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   217          .timestampEnabled                       = FALSE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   218          .wrapSourceInterruptEnabled             = FALSE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   219          .wrapDestinationInterruptEnabled        = FALSE,
	lea	a15,[a10]0
.L267:
	lea	a2,[a4]0
	mov.a	a6,#6
.L20:
	ld.d	e0,[a15+]8
	st.d	[a2+]8,e0
	loop	a6,.L20
.L268:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   220          .channelInterruptEnabled                = FALSE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   221          .channelInterruptControl                = IfxDma_ChannelInterruptControl_thresholdLimitMatch,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   222          .interruptRaiseThreshold                = 0,
	st.a	[a4],a5
.L269:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   223          .transactionRequestLostInterruptEnabled = FALSE,
	ret
.L166:
	
__IfxDma_Dma_initChannelConfig_function_end:
	.size	IfxDma_Dma_initChannelConfig,__IfxDma_Dma_initChannelConfig_function_end-IfxDma_Dma_initChannelConfig
.L70:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_initLinkedListEntry',code,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_initLinkedListEntry'
	.align	2
	
	.global	IfxDma_Dma_initLinkedListEntry

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   224          .channelInterruptPriority               = 0,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   225          .channelInterruptTypeOfService          = IfxSrc_Tos_cpu0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   226      };
; Function IfxDma_Dma_initLinkedListEntry
.L32:
IfxDma_Dma_initLinkedListEntry:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   227  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   228      /* Default Configuration */
	call	IfxDma_Dma_configureTransactionSet
.L198:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   229      *config = defaultConfig;
	ret
.L172:
	
__IfxDma_Dma_initLinkedListEntry_function_end:
	.size	IfxDma_Dma_initLinkedListEntry,__IfxDma_Dma_initLinkedListEntry_function_end-IfxDma_Dma_initLinkedListEntry
.L75:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_initModule',code,cluster('IfxDma_Dma_initModule')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_initModule'
	.align	2
	
	.global	IfxDma_Dma_initModule

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   230  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   231      /* take over module pointer */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   232      config->module = dma;
; Function IfxDma_Dma_initModule
.L34:
IfxDma_Dma_initModule:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   233  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   234  
	ld.a	a15,[a5]
.L228:
	st.a	[a4],a15
.L229:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   235  
	ret
.L119:
	
__IfxDma_Dma_initModule_function_end:
	.size	IfxDma_Dma_initModule,__IfxDma_Dma_initModule_function_end-IfxDma_Dma_initModule
.L55:
	; End of function
	
	.sdecl	'.text.IfxDma_Dma.IfxDma_Dma_initModuleConfig',code,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.text.IfxDma_Dma.IfxDma_Dma_initModuleConfig'
	.align	2
	
	.global	IfxDma_Dma_initModuleConfig

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   236  void IfxDma_Dma_initLinkedListEntry(void *ptrToAddress, const IfxDma_Dma_ChannelConfig *config)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   237  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   238      IfxDma_Dma_configureTransactionSet((Ifx_DMA_CH *)ptrToAddress, config);
; Function IfxDma_Dma_initModuleConfig
.L36:
IfxDma_Dma_initModuleConfig:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   239  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   240  
	st.a	[a4],a5
.L234:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   241  
	ret
.L123:
	
__IfxDma_Dma_initModuleConfig_function_end:
	.size	IfxDma_Dma_initModuleConfig,__IfxDma_Dma_initModuleConfig_function_end-IfxDma_Dma_initModuleConfig
.L60:
	; End of function
	
	.sdecl	'.rodata.IfxDma_Dma..1.ini',data,rom
	.sect	'.rodata.IfxDma_Dma..1.ini'
	.align	4
.1.ini:	.type	object
	.size	.1.ini,56
	.space	34
	.byte	1
	.space	2
	.byte	1,15
	.space	1
	.byte	1,15
	.space	14
	.calls	'IfxDma_Dma_initChannel','IfxDma_Dma_configureTransactionSet'
	.calls	'IfxDma_Dma_initLinkedListEntry','IfxDma_Dma_configureTransactionSet'
	.calls	'IfxDma_Dma_configureTransactionSet','',0
	.calls	'IfxDma_Dma_createModuleHandle','',0
	.calls	'IfxDma_Dma_deInitChannel','',0
	.calls	'IfxDma_Dma_initChannel','',0
	.calls	'IfxDma_Dma_initChannelConfig','',56
	.calls	'IfxDma_Dma_initLinkedListEntry','',0
	.calls	'IfxDma_Dma_initModule','',0
	.calls	'IfxDma_Dma_initModuleConfig','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L38:
	.word	98549
	.half	3
	.word	.L39
	.byte	4
.L37:
	.byte	1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L40
	.byte	2,1,1,3
	.word	149
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,61,17,1,1,5
	.byte	'fun',0,1,61,43
	.word	152
	.byte	6,0,7
	.byte	'__fract',0,4,128,1,7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,152,2,18
	.word	197
	.byte	1,1,5
	.byte	'a',0,1,152,2,44
	.word	209
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,172,2,17,1,1,6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0
.L173:
	.byte	3
	.word	321
	.byte	8
	.byte	'__ld64',0,3,2,135,1,19
	.word	295
	.byte	1,1,5
	.byte	'addr',0,2,135,1,32
	.word	327
	.byte	6,0,4
	.byte	'__st64',0,3,2,143,1,17,1,1,5
	.byte	'addr',0,2,143,1,30
	.word	327
	.byte	5
	.byte	'value',0,2,143,1,43
	.word	295
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5,7
	.byte	'unsigned char',0,1,8,10
	.byte	'_Ifx_SRC_SRCR_Bits',0,4,45,16,4,11
	.byte	'SRPN',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	436
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	436
	.byte	2,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	436
	.byte	3,0,2,35,1,11
	.byte	'ECC',0,1
	.word	436
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	436
	.byte	2,0,2,35,2,11
	.byte	'SRR',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	436
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	436
	.byte	1,0,2,35,3,0,12,4,70,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	453
	.byte	4,2,35,0,0,14
	.word	743
.L138:
	.byte	3
	.word	782
.L157:
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,3,250,1,17,1,1
.L159:
	.byte	5
	.byte	'src',0,3,250,1,60
	.word	787
.L161:
	.byte	6,0
.L162:
	.byte	4
	.byte	'IfxSrc_enable',0,3,3,140,2,17,1,1
.L163:
	.byte	5
	.byte	'src',0,3,140,2,54
	.word	787
.L165:
	.byte	6,0,15,5,69,9,1,16
	.byte	'IfxSrc_Tos_cpu0',0,0,16
	.byte	'IfxSrc_Tos_cpu1',0,1,16
	.byte	'IfxSrc_Tos_dma',0,3,0,7
	.byte	'unsigned short int',0,2,7
.L147:
	.byte	4
	.byte	'IfxSrc_init',0,3,3,146,2,17,1,1
.L150:
	.byte	5
	.byte	'src',0,3,146,2,52
	.word	787
.L152:
	.byte	5
	.byte	'typOfService',0,3,146,2,68
	.word	872
.L154:
	.byte	5
	.byte	'priority',0,3,146,2,95
	.word	931
.L156:
	.byte	17,6,0,0,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,7,241,8,16,4,11
	.byte	'ENDINIT',0,4
	.word	1030
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	1030
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	1030
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	1030
	.byte	16,0,2,35,0,0,12,7,247,14,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1046
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,7,250,8,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	2,6,2,35,0,11
	.byte	'IR0',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	436
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	16,0,2,35,2,0,12,7,255,14,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1182
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,7,137,9,16,4,11
	.byte	'AE',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	436
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	931
	.byte	16,0,2,35,2,0,12,7,135,15,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1426
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,7,175,15,25,12,13
	.byte	'CON0',0
	.word	1142
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	1386
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1617
	.byte	4,2,35,8,0,14
	.word	1657
	.byte	3
	.word	1720
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,6,181,3,17,1,1,5
	.byte	'watchdog',0,6,181,3,65
	.word	1725
	.byte	5
	.byte	'password',0,6,181,3,82
	.word	931
	.byte	6,0,4
	.byte	'IfxScuWdt_clearSafetyEndinitInline',0,3,6,204,3,17,1,1,5
	.byte	'password',0,6,204,3,59
	.word	931
	.byte	6,0,4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,6,140,4,17,1,1,5
	.byte	'watchdog',0,6,140,4,63
	.word	1725
	.byte	5
	.byte	'password',0,6,140,4,80
	.word	931
	.byte	6,0,4
	.byte	'IfxScuWdt_setSafetyEndinitInline',0,3,6,163,4,17,1,1,5
	.byte	'password',0,6,163,4,57
	.word	931
	.byte	6,0,8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,6,227,3,19
	.word	931
	.byte	1,1,5
	.byte	'watchdog',0,6,227,3,74
	.word	1725
	.byte	6,0,8
	.byte	'IfxScuWdt_getSafetyWatchdogPasswordInline',0,3,6,253,3,19
	.word	931
	.byte	1,1,6,0,15,9,156,1,9,1,16
	.byte	'IfxCpu_ResourceCpu_0',0,0,16
	.byte	'IfxCpu_ResourceCpu_1',0,1,16
	.byte	'IfxCpu_ResourceCpu_none',0,2,0,8
	.byte	'IfxCpu_getCoreIndex',0,3,8,141,6,31
	.word	2135
	.byte	1,1,6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,8,139,5,20
	.word	436
	.byte	1,1,6,0,7
	.byte	'unsigned long int',0,4,7,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,8,161,6,19
	.word	2290
	.byte	1,1,5
	.byte	'address',0,8,161,6,55
	.word	931
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,8,190,6,20
	.word	436
	.byte	1,1,5
	.byte	'address',0,8,190,6,70
	.word	931
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,8,172,8,17,1,1,5
	.byte	'address',0,8,172,8,56
	.word	2290
	.byte	5
	.byte	'count',0,8,172,8,72
	.word	2290
	.byte	17,6,0,0,10
	.byte	'_Ifx_P_OUT_Bits',0,11,143,3,16,4,11
	.byte	'P0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	16,0,2,35,2,0,12,11,181,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2521
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,11,169,2,16,4,11
	.byte	'PS0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	436
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	436
	.byte	1,0,2,35,3,0,12,11,133,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2837
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,11,110,16,4,11
	.byte	'MODREV',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	931
	.byte	16,0,2,35,2,0,12,11,148,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3408
	.byte	4,2,35,0,0,18,4
	.word	436
	.byte	19,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,11,140,1,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	436
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	436
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	436
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	436
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	436
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	436
	.byte	5,0,2,35,3,0,12,11,164,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3536
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,11,166,1,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	436
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	436
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	436
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	436
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	436
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	436
	.byte	5,0,2,35,3,0,12,11,180,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3751
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,11,179,1,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	436
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	436
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	436
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	436
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	436
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	436
	.byte	5,0,2,35,3,0,12,11,188,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3966
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,11,153,1,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	436
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	436
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	436
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	436
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	436
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	436
	.byte	5,0,2,35,3,0,12,11,172,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4183
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,11,118,16,4,11
	.byte	'P0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	16,0,2,35,2,0,12,11,156,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4403
	.byte	4,2,35,0,0,18,24
	.word	436
	.byte	19,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,11,205,3,16,4,11
	.byte	'PD0',0,1
	.word	436
	.byte	3,5,2,35,0,11
	.byte	'PL0',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'PD1',0,1
	.word	436
	.byte	3,1,2,35,0,11
	.byte	'PL1',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'PD2',0,1
	.word	436
	.byte	3,5,2,35,1,11
	.byte	'PL2',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'PD3',0,1
	.word	436
	.byte	3,1,2,35,1,11
	.byte	'PL3',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'PD4',0,1
	.word	436
	.byte	3,5,2,35,2,11
	.byte	'PL4',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'PD5',0,1
	.word	436
	.byte	3,1,2,35,2,11
	.byte	'PL5',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'PD6',0,1
	.word	436
	.byte	3,5,2,35,3,11
	.byte	'PL6',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'PD7',0,1
	.word	436
	.byte	3,1,2,35,3,11
	.byte	'PL7',0,1
	.word	436
	.byte	1,0,2,35,3,0,12,11,205,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4726
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,11,226,3,16,4,11
	.byte	'PD8',0,1
	.word	436
	.byte	3,5,2,35,0,11
	.byte	'PL8',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'PD9',0,1
	.word	436
	.byte	3,1,2,35,0,11
	.byte	'PL9',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'PD10',0,1
	.word	436
	.byte	3,5,2,35,1,11
	.byte	'PL10',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'PD11',0,1
	.word	436
	.byte	3,1,2,35,1,11
	.byte	'PL11',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'PD12',0,1
	.word	436
	.byte	3,5,2,35,2,11
	.byte	'PL12',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'PD13',0,1
	.word	436
	.byte	3,1,2,35,2,11
	.byte	'PL13',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'PD14',0,1
	.word	436
	.byte	3,5,2,35,3,11
	.byte	'PL14',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'PD15',0,1
	.word	436
	.byte	3,1,2,35,3,11
	.byte	'PL15',0,1
	.word	436
	.byte	1,0,2,35,3,0,12,11,213,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5030
	.byte	4,2,35,0,0,18,8
	.word	436
	.byte	19,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,11,88,16,4,11
	.byte	'EN0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	16,0,2,35,2,0,12,11,140,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5355
	.byte	4,2,35,0,0,18,12
	.word	436
	.byte	19,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,11,183,3,16,4,11
	.byte	'PDIS0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	16,0,2,35,2,0,12,11,197,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5695
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,11,165,3,16,4,11
	.byte	'SEL0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	436
	.byte	2,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	413
	.byte	19,1,2,35,0,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,12,11,189,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6061
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,11,206,2,16,4,11
	.byte	'PS0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	413
	.byte	28,0,2,35,0,0,12,11,149,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6347
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,11,227,2,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	413
	.byte	24,0,2,35,0,0,12,11,165,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6494
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,11,238,2,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	413
	.byte	20,0,2,35,0,0,12,11,173,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6663
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,11,216,2,16,4,11
	.byte	'reserved_0',0,2
	.word	931
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	16,0,2,35,2,0,12,11,157,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6835
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,11,232,1,16,4,11
	.byte	'reserved_0',0,2
	.word	931
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	931
	.byte	12,0,2,35,2,0,12,11,229,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7010
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,11,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	413
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	8,0,2,35,3,0,12,11,245,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7184
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,11,136,2,16,4,11
	.byte	'reserved_0',0,4
	.word	413
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	436
	.byte	4,0,2,35,3,0,12,11,253,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7358
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,11,243,1,16,4,11
	.byte	'reserved_0',0,4
	.word	413
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	436
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	436
	.byte	1,0,2,35,3,0,12,11,237,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7534
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,11,249,2,16,4,11
	.byte	'PS0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	16,0,2,35,2,0,12,11,141,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7690
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,11,147,2,16,4,11
	.byte	'reserved_0',0,2
	.word	931
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	436
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	436
	.byte	1,0,2,35,3,0,12,11,221,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8023
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR0_Bits',0,11,192,1,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	413
	.byte	30,0,2,35,0,0,12,11,196,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8371
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR1_Bits',0,11,200,1,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	413
	.byte	30,0,2,35,0,0,10
	.byte	'_Ifx_P_LPCR1_P21_Bits',0,11,208,1,16,4,11
	.byte	'RDIS_CTRL',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'RX_DIS',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	436
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	413
	.byte	24,0,2,35,0,0,12,11,204,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8495
	.byte	4,2,35,0,13
	.byte	'B_P21',0
	.word	8579
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR2_Bits',0,11,218,1,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'LVDSR',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'LVDSRL',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	436
	.byte	2,4,2,35,1,11
	.byte	'TDIS_CTRL',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'TX_DIS',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	16,0,2,35,2,0,12,11,213,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8759
	.byte	4,2,35,0,0,18,76
	.word	436
	.byte	19,75,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,11,82,16,4,11
	.byte	'reserved_0',0,4
	.word	413
	.byte	32,0,2,35,0,0,12,11,132,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9012
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,11,45,16,4,11
	.byte	'EN0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	436
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	436
	.byte	1,0,2,35,3,0,12,11,252,3,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9099
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,11,229,5,25,128,2,13
	.byte	'OUT',0
	.word	2797
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	3368
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	3487
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3527
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	3711
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	3926
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	4143
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	4363
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	3527
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	4677
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4717
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	4990
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	5306
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	5346
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	5646
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	5686
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	6021
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	6307
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	5346
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	6454
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	6623
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	6795
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	6970
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	7144
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	7318
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	7494
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	7650
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	7983
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	8331
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	5346
	.byte	8,3,35,152,1,13
	.byte	'LPCR0',0
	.word	8455
	.byte	4,3,35,160,1,13
	.byte	'LPCR1',0
	.word	8704
	.byte	4,3,35,164,1,13
	.byte	'LPCR2',0
	.word	8963
	.byte	4,3,35,168,1,13
	.byte	'reserved_A4',0
	.word	9003
	.byte	76,3,35,172,1,13
	.byte	'ACCEN1',0
	.word	9059
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	9626
	.byte	4,3,35,252,1,0,14
	.word	9666
	.byte	3
	.word	10269
	.byte	15,10,172,1,9,4,16
	.byte	'IfxPort_State_notChanged',0,0,16
	.byte	'IfxPort_State_high',0,1,16
	.byte	'IfxPort_State_low',0,128,128,4,16
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,10,208,4,17,1,1,5
	.byte	'port',0,10,208,4,44
	.word	10274
	.byte	5
	.byte	'pinIndex',0,10,208,4,56
	.word	436
	.byte	5
	.byte	'action',0,10,208,4,80
	.word	10279
	.byte	6,0,10
	.byte	'_Ifx_DMA_CLC_Bits',0,13,131,4,16,4,11
	.byte	'DISR',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	413
	.byte	28,0,2,35,0,0,12,13,160,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10460
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ID_Bits',0,13,155,4,16,4,11
	.byte	'MODREV',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	931
	.byte	16,0,2,35,2,0,12,13,184,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10617
	.byte	4,2,35,0,0,18,20
	.word	436
	.byte	19,19,0,10
	.byte	'_Ifx_DMA_MEMCON_Bits',0,13,163,4,16,4,11
	.byte	'reserved_0',0,4
	.word	1030
	.byte	2,30,2,35,0,11
	.byte	'INTERR',0,4
	.word	1030
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	1030
	.byte	1,28,2,35,0,11
	.byte	'RMWERR',0,4
	.word	1030
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	1030
	.byte	1,26,2,35,0,11
	.byte	'DATAERR',0,4
	.word	1030
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	1030
	.byte	1,24,2,35,0,11
	.byte	'PMIC',0,4
	.word	1030
	.byte	1,23,2,35,0,11
	.byte	'ERRDIS',0,4
	.word	1030
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	1030
	.byte	22,0,2,35,0,0,12,13,192,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10748
	.byte	4,2,35,0,0,18,28
	.word	436
	.byte	19,27,0,10
	.byte	'_Ifx_DMA_ACCEN00_Bits',0,13,45,16,4,11
	.byte	'EN0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	436
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	436
	.byte	1,0,2,35,3,0,12,13,128,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11025
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ACCEN01_Bits',0,13,82,16,4,11
	.byte	'reserved_0',0,4
	.word	413
	.byte	32,0,2,35,0,0,12,13,136,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11595
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ACCEN10_Bits',0,13,88,16,4,11
	.byte	'EN0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	436
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	436
	.byte	1,0,2,35,3,0,12,13,144,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11685
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ACCEN11_Bits',0,13,125,16,4,11
	.byte	'reserved_0',0,4
	.word	413
	.byte	32,0,2,35,0,0,12,13,152,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12255
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ACCEN20_Bits',0,13,131,1,16,4,11
	.byte	'EN0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	436
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	436
	.byte	1,0,2,35,3,0,12,13,160,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12345
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ACCEN21_Bits',0,13,168,1,16,4,11
	.byte	'reserved_0',0,4
	.word	413
	.byte	32,0,2,35,0,0,12,13,168,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12916
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ACCEN30_Bits',0,13,174,1,16,4,11
	.byte	'EN0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	436
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	436
	.byte	1,0,2,35,3,0,12,13,176,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13007
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ACCEN31_Bits',0,13,211,1,16,4,11
	.byte	'reserved_0',0,4
	.word	413
	.byte	32,0,2,35,0,0,12,13,184,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13578
	.byte	4,2,35,0,0,18,192,1
	.word	436
	.byte	19,191,1,0,10
	.byte	'_Ifx_DMA_BLK_EER_Bits',0,13,233,1,16,4,11
	.byte	'reserved_0',0,2
	.word	931
	.byte	16,0,2,35,0,11
	.byte	'ESER',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'EDER',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	436
	.byte	6,0,2,35,2,11
	.byte	'ERER',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'ELER',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	436
	.byte	5,0,2,35,3,0,12,13,200,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13680
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ERRSR_Bits',0,13,246,1,16,4,11
	.byte	'LEC',0,1
	.word	436
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	931
	.byte	9,0,2,35,0,11
	.byte	'SER',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'DER',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	436
	.byte	2,4,2,35,2,11
	.byte	'SPBER',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'SRIER',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	436
	.byte	2,0,2,35,2,11
	.byte	'RAMER',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'SLLER',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'DLLER',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	436
	.byte	5,0,2,35,3,0,12,13,208,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13904
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_CLRE_Bits',0,13,217,1,16,4,11
	.byte	'reserved_0',0,2
	.word	931
	.byte	16,0,2,35,0,11
	.byte	'CSER',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'CDER',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	436
	.byte	2,4,2,35,2,11
	.byte	'CSPBER',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'CSRIER',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	436
	.byte	2,0,2,35,2,11
	.byte	'CRAMER',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'CSLLER',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'CDLLER',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	436
	.byte	5,0,2,35,3,0,12,13,192,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14196
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_SR_Bits',0,13,161,3,16,4,11
	.byte	'RS',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	436
	.byte	3,4,2,35,0,11
	.byte	'WS',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,2
	.word	931
	.byte	11,0,2,35,0,11
	.byte	'CH',0,1
	.word	436
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	931
	.byte	9,0,2,35,2,0,12,13,216,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14479
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_R0_Bits',0,13,193,2,16,4,11
	.byte	'RD00',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'RD01',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'RD02',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'RD03',0,1
	.word	436
	.byte	8,0,2,35,3,0,12,13,248,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14659
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_R1_Bits',0,13,202,2,16,4,11
	.byte	'RD10',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'RD11',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'RD12',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'RD13',0,1
	.word	436
	.byte	8,0,2,35,3,0,12,13,128,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14794
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_R2_Bits',0,13,211,2,16,4,11
	.byte	'RD20',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'RD21',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'RD22',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'RD23',0,1
	.word	436
	.byte	8,0,2,35,3,0,12,13,136,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14929
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_R3_Bits',0,13,220,2,16,4,11
	.byte	'RD30',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'RD31',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'RD32',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'RD33',0,1
	.word	436
	.byte	8,0,2,35,3,0,12,13,144,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15064
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_R4_Bits',0,13,229,2,16,4,11
	.byte	'RD40',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'RD41',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'RD42',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'RD43',0,1
	.word	436
	.byte	8,0,2,35,3,0,12,13,152,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15199
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_R5_Bits',0,13,238,2,16,4,11
	.byte	'RD50',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'RD51',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'RD52',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'RD53',0,1
	.word	436
	.byte	8,0,2,35,3,0,12,13,160,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15334
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_R6_Bits',0,13,247,2,16,4,11
	.byte	'RD60',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'RD61',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'RD62',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'RD63',0,1
	.word	436
	.byte	8,0,2,35,3,0,12,13,168,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15469
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_R7_Bits',0,13,128,3,16,4,11
	.byte	'RD70',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'RD71',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'RD72',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'RD73',0,1
	.word	436
	.byte	8,0,2,35,3,0,12,13,176,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15604
	.byte	4,2,35,0,0,18,32
	.word	436
	.byte	19,31,0,10
	.byte	'_Ifx_DMA_BLK_ME_RDCRC_Bits',0,13,137,3,16,4,11
	.byte	'RDCRC',0,4
	.word	413
	.byte	32,0,2,35,0,0,12,13,184,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15748
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_SDCRC_Bits',0,13,149,3,16,4,11
	.byte	'SDCRC',0,4
	.word	413
	.byte	32,0,2,35,0,0,12,13,200,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15839
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_SADR_Bits',0,13,143,3,16,4,11
	.byte	'SADR',0,4
	.word	413
	.byte	32,0,2,35,0,0,12,13,192,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15930
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_DADR_Bits',0,13,187,2,16,4,11
	.byte	'DADR',0,4
	.word	413
	.byte	32,0,2,35,0,0,12,13,240,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16019
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_ADICR_Bits',0,13,135,2,16,4,11
	.byte	'SMF',0,1
	.word	436
	.byte	3,5,2,35,0,11
	.byte	'INCS',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'DMF',0,1
	.word	436
	.byte	3,1,2,35,0,11
	.byte	'INCD',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'CBLS',0,1
	.word	436
	.byte	4,4,2,35,1,11
	.byte	'CBLD',0,1
	.word	436
	.byte	4,0,2,35,1,11
	.byte	'SHCT',0,1
	.word	436
	.byte	4,4,2,35,2,11
	.byte	'SCBE',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'DCBE',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'STAMP',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'ETRL',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'WRPSE',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'WRPDE',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'INTCT',0,1
	.word	436
	.byte	2,4,2,35,3,11
	.byte	'IRDV',0,1
	.word	436
	.byte	4,0,2,35,3,0,12,13,216,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16108
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_CHCR_Bits',0,13,155,2,16,4,11
	.byte	'TREL',0,2
	.word	931
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	436
	.byte	2,0,2,35,1,11
	.byte	'BLKM',0,1
	.word	436
	.byte	3,5,2,35,2,11
	.byte	'RROAT',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'CHMODE',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'CHDW',0,1
	.word	436
	.byte	3,0,2,35,2,11
	.byte	'PATSEL',0,1
	.word	436
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'PRSEL',0,1
	.word	436
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'DMAPRIO',0,1
	.word	436
	.byte	2,0,2,35,3,0,12,13,224,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16424
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_SHADR_Bits',0,13,155,3,16,4,11
	.byte	'SHADR',0,4
	.word	413
	.byte	32,0,2,35,0,0,12,13,208,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16703
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_CHSR_Bits',0,13,171,2,16,4,11
	.byte	'TCOUNT',0,2
	.word	931
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'LXO',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'WRPS',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'WRPD',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'ICH',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'IPM',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	436
	.byte	2,2,2,35,2,11
	.byte	'BUFFER',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'FROZEN',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	8,0,2,35,3,0,12,13,232,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16794
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME',0,13,144,8,25,112,13
	.byte	'SR',0
	.word	14619
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	5686
	.byte	12,2,35,4,13
	.byte	'R0',0
	.word	14754
	.byte	4,2,35,16,13
	.byte	'R1',0
	.word	14889
	.byte	4,2,35,20,13
	.byte	'R2',0
	.word	15024
	.byte	4,2,35,24,13
	.byte	'R3',0
	.word	15159
	.byte	4,2,35,28,13
	.byte	'R4',0
	.word	15294
	.byte	4,2,35,32,13
	.byte	'R5',0
	.word	15429
	.byte	4,2,35,36,13
	.byte	'R6',0
	.word	15564
	.byte	4,2,35,40,13
	.byte	'R7',0
	.word	15699
	.byte	4,2,35,44,13
	.byte	'reserved_30',0
	.word	15739
	.byte	32,2,35,48,13
	.byte	'RDCRC',0
	.word	15799
	.byte	4,2,35,80,13
	.byte	'SDCRC',0
	.word	15890
	.byte	4,2,35,84,13
	.byte	'SADR',0
	.word	15979
	.byte	4,2,35,88,13
	.byte	'DADR',0
	.word	16068
	.byte	4,2,35,92,13
	.byte	'ADICR',0
	.word	16384
	.byte	4,2,35,96,13
	.byte	'CHCR',0
	.word	16663
	.byte	4,2,35,100,13
	.byte	'SHADR',0
	.word	16754
	.byte	4,2,35,104,13
	.byte	'CHSR',0
	.word	17027
	.byte	4,2,35,108,0,14
	.word	17067
	.byte	10
	.byte	'_Ifx_DMA_BLK',0,13,178,8,25,128,1,13
	.byte	'EER',0
	.word	13864
	.byte	4,2,35,0,13
	.byte	'ERRSR',0
	.word	14156
	.byte	4,2,35,4,13
	.byte	'CLRE',0
	.word	14439
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3527
	.byte	4,2,35,12,13
	.byte	'ME',0
	.word	17355
	.byte	112,2,35,16,0,14
	.word	17360
	.byte	18,128,31
	.word	436
	.byte	19,255,30,0,14
	.word	17360
	.byte	18,96
	.word	436
	.byte	19,95,0,10
	.byte	'_Ifx_DMA_OTSS_Bits',0,13,185,4,16,4,11
	.byte	'TGS',0,1
	.word	436
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	436
	.byte	3,1,2,35,0,11
	.byte	'BS',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	413
	.byte	24,0,2,35,0,0,12,13,208,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17485
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ERRINTR_Bits',0,13,141,4,16,4,11
	.byte	'SIT',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	413
	.byte	31,0,2,35,0,0,12,13,168,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17624
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_PRR0_Bits',0,13,194,4,16,4,11
	.byte	'PAT00',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'PAT01',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'PAT02',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'PAT03',0,1
	.word	436
	.byte	8,0,2,35,3,0,12,13,216,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17730
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_PRR1_Bits',0,13,203,4,16,4,11
	.byte	'PAT10',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'PAT11',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'PAT12',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'PAT13',0,1
	.word	436
	.byte	8,0,2,35,3,0,12,13,224,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17864
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_TIME_Bits',0,13,226,4,16,4,11
	.byte	'COUNT',0,4
	.word	413
	.byte	32,0,2,35,0,0,12,13,248,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17998
	.byte	4,2,35,0,0,18,236,1
	.word	436
	.byte	19,235,1,0,10
	.byte	'_Ifx_DMA_MODE_Bits',0,13,178,4,16,4,11
	.byte	'MODE',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	413
	.byte	31,0,2,35,0,0,12,13,200,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18092
	.byte	4,2,35,0,0,18,16
	.word	18156
	.byte	19,3,0,18,240,9
	.word	436
	.byte	19,239,9,0,10
	.byte	'_Ifx_DMA_HRR_Bits',0,13,148,4,16,4,11
	.byte	'HRP',0,1
	.word	436
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	413
	.byte	30,0,2,35,0,0,12,13,176,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18216
	.byte	4,2,35,0,0,18,192,1
	.word	18278
	.byte	19,47,0,18,192,2
	.word	436
	.byte	19,191,2,0,10
	.byte	'_Ifx_DMA_SUSENR_Bits',0,13,219,4,16,4,11
	.byte	'SUSEN',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	413
	.byte	31,0,2,35,0,0,12,13,240,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18339
	.byte	4,2,35,0,0,18,192,1
	.word	18406
	.byte	19,47,0,10
	.byte	'_Ifx_DMA_SUSACR_Bits',0,13,212,4,16,4,11
	.byte	'SUSAC',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	413
	.byte	31,0,2,35,0,0,12,13,232,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18456
	.byte	4,2,35,0,0,18,192,1
	.word	18523
	.byte	19,47,0,10
	.byte	'_Ifx_DMA_TSR_Bits',0,13,232,4,16,4,11
	.byte	'RST',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'HTRE',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'TRL',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'CH',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	436
	.byte	4,0,2,35,0,11
	.byte	'HLTREQ',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'HLTACK',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	436
	.byte	6,0,2,35,1,11
	.byte	'ECH',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'DCH',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'CTL',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	436
	.byte	5,0,2,35,2,11
	.byte	'HLTCLR',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	436
	.byte	7,0,2,35,3,0
.L135:
	.byte	12,13,128,8,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18573
	.byte	4,2,35,0,0,18,192,1
	.word	18848
	.byte	19,47,0,10
	.byte	'_Ifx_DMA_CH_RDCRCR_Bits',0,13,235,3,16,4,11
	.byte	'RDCRC',0,4
	.word	413
	.byte	32,0,2,35,0,0,12,13,128,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18898
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_SDCRCR_Bits',0,13,247,3,16,4,11
	.byte	'SDCRC',0,4
	.word	413
	.byte	32,0,2,35,0,0,12,13,144,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18986
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_SADR_Bits',0,13,241,3,16,4,11
	.byte	'SADR',0,4
	.word	413
	.byte	32,0,2,35,0,0,12,13,136,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19074
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_DADR_Bits',0,13,229,3,16,4,11
	.byte	'DADR',0,4
	.word	413
	.byte	32,0,2,35,0,0,12,13,248,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19159
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_ADICR_Bits',0,13,172,3,16,4,11
	.byte	'SMF',0,1
	.word	436
	.byte	3,5,2,35,0,11
	.byte	'INCS',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'DMF',0,1
	.word	436
	.byte	3,1,2,35,0,11
	.byte	'INCD',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'CBLS',0,1
	.word	436
	.byte	4,4,2,35,1,11
	.byte	'CBLD',0,1
	.word	436
	.byte	4,0,2,35,1,11
	.byte	'SHCT',0,1
	.word	436
	.byte	4,4,2,35,2,11
	.byte	'SCBE',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'DCBE',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'STAMP',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'ETRL',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'WRPSE',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'WRPDE',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'INTCT',0,1
	.word	436
	.byte	2,4,2,35,3,11
	.byte	'IRDV',0,1
	.word	436
	.byte	4,0,2,35,3,0
.L184:
	.byte	12,13,224,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19244
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_CHCFGR_Bits',0,13,192,3,16,4,11
	.byte	'TREL',0,2
	.word	931
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	436
	.byte	2,0,2,35,1,11
	.byte	'BLKM',0,1
	.word	436
	.byte	3,5,2,35,2,11
	.byte	'RROAT',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'CHMODE',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'CHDW',0,1
	.word	436
	.byte	3,0,2,35,2,11
	.byte	'PATSEL',0,1
	.word	436
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'PRSEL',0,1
	.word	436
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'DMAPRIO',0,1
	.word	436
	.byte	2,0,2,35,3,0
.L181:
	.byte	12,13,232,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19556
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_SHADR_Bits',0,13,253,3,16,4,11
	.byte	'SHADR',0,4
	.word	413
	.byte	32,0,2,35,0,0,12,13,152,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19833
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_CHCSR_Bits',0,13,208,3,16,4,11
	.byte	'TCOUNT',0,2
	.word	931
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'LXO',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'WRPS',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'WRPD',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'ICH',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'IPM',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	436
	.byte	2,2,2,35,2,11
	.byte	'BUFFER',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'FROZEN',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'SWB',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'CWRP',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'CICH',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'SIT',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	436
	.byte	3,1,2,35,3,11
	.byte	'SCH',0,1
	.word	436
	.byte	1,0,2,35,3,0,12,13,240,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19920
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH',0,13,188,8,25,32,13
	.byte	'RDCRCR',0
	.word	18946
	.byte	4,2,35,0,13
	.byte	'SDCRCR',0
	.word	19034
	.byte	4,2,35,4,13
	.byte	'SADR',0
	.word	19119
	.byte	4,2,35,8,13
	.byte	'DADR',0
	.word	19204
	.byte	4,2,35,12,13
	.byte	'ADICR',0
	.word	19516
	.byte	4,2,35,16,13
	.byte	'CHCFGR',0
	.word	19793
	.byte	4,2,35,20,13
	.byte	'SHADR',0
	.word	19880
	.byte	4,2,35,24,13
	.byte	'CHCSR',0
	.word	20227
	.byte	4,2,35,28,0,18,128,12
	.word	20267
	.byte	19,47,0,14
	.word	20407
	.byte	18,128,52
	.word	436
	.byte	19,255,51,0,10
	.byte	'_Ifx_DMA',0,13,211,8,25,128,128,1,13
	.byte	'CLC',0
	.word	10577
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	3527
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	10699
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	10739
	.byte	20,2,35,12,13
	.byte	'MEMCON',0
	.word	10976
	.byte	4,2,35,32,13
	.byte	'reserved_24',0
	.word	11016
	.byte	28,2,35,36,13
	.byte	'ACCEN00',0
	.word	11555
	.byte	4,2,35,64,13
	.byte	'ACCEN01',0
	.word	11645
	.byte	4,2,35,68,13
	.byte	'ACCEN10',0
	.word	12215
	.byte	4,2,35,72,13
	.byte	'ACCEN11',0
	.word	12305
	.byte	4,2,35,76,13
	.byte	'ACCEN20',0
	.word	12876
	.byte	4,2,35,80,13
	.byte	'ACCEN21',0
	.word	12967
	.byte	4,2,35,84,13
	.byte	'ACCEN30',0
	.word	13538
	.byte	4,2,35,88,13
	.byte	'ACCEN31',0
	.word	13629
	.byte	4,2,35,92,13
	.byte	'reserved_60',0
	.word	13669
	.byte	192,1,2,35,96,13
	.byte	'BLK0',0
	.word	17455
	.byte	128,1,3,35,160,2,13
	.byte	'reserved_1A0',0
	.word	17460
	.byte	128,31,3,35,160,3,13
	.byte	'BLK1',0
	.word	17471
	.byte	128,1,3,35,160,34,13
	.byte	'reserved_11A0',0
	.word	17476
	.byte	96,3,35,160,35,13
	.byte	'OTSS',0
	.word	17584
	.byte	4,3,35,128,36,13
	.byte	'ERRINTR',0
	.word	17690
	.byte	4,3,35,132,36,13
	.byte	'PRR0',0
	.word	17824
	.byte	4,3,35,136,36,13
	.byte	'PRR1',0
	.word	17958
	.byte	4,3,35,140,36,13
	.byte	'TIME',0
	.word	18041
	.byte	4,3,35,144,36,13
	.byte	'reserved_1214',0
	.word	18081
	.byte	236,1,3,35,148,36,13
	.byte	'MODE',0
	.word	18196
	.byte	16,3,35,128,38,13
	.byte	'reserved_1310',0
	.word	18205
	.byte	240,9,3,35,144,38,13
	.byte	'HRR',0
	.word	18318
	.byte	192,1,3,35,128,48,13
	.byte	'reserved_18C0',0
	.word	18328
	.byte	192,2,3,35,192,49,13
	.byte	'SUSENR',0
	.word	18446
	.byte	192,1,3,35,128,52,13
	.byte	'reserved_1AC0',0
	.word	18328
	.byte	192,2,3,35,192,53,13
	.byte	'SUSACR',0
	.word	18563
	.byte	192,1,3,35,128,56,13
	.byte	'reserved_1CC0',0
	.word	18328
	.byte	192,2,3,35,192,57,13
	.byte	'TSR',0
	.word	18888
	.byte	192,1,3,35,128,60,13
	.byte	'reserved_1EC0',0
	.word	18328
	.byte	192,2,3,35,192,61,13
	.byte	'CH',0
	.word	20417
	.byte	128,12,3,35,128,64,13
	.byte	'reserved_2600',0
	.word	20422
	.byte	128,52,3,35,128,76,0,14
	.word	20433
.L84:
	.byte	3
	.word	21139
.L88:
	.byte	15,14,105,9,1,16
	.byte	'IfxDma_ChannelId_none',0,127,16
	.byte	'IfxDma_ChannelId_0',0,0,16
	.byte	'IfxDma_ChannelId_1',0,1,16
	.byte	'IfxDma_ChannelId_2',0,2,16
	.byte	'IfxDma_ChannelId_3',0,3,16
	.byte	'IfxDma_ChannelId_4',0,4,16
	.byte	'IfxDma_ChannelId_5',0,5,16
	.byte	'IfxDma_ChannelId_6',0,6,16
	.byte	'IfxDma_ChannelId_7',0,7,16
	.byte	'IfxDma_ChannelId_8',0,8,16
	.byte	'IfxDma_ChannelId_9',0,9,16
	.byte	'IfxDma_ChannelId_10',0,10,16
	.byte	'IfxDma_ChannelId_11',0,11,16
	.byte	'IfxDma_ChannelId_12',0,12,16
	.byte	'IfxDma_ChannelId_13',0,13,16
	.byte	'IfxDma_ChannelId_14',0,14,16
	.byte	'IfxDma_ChannelId_15',0,15,16
	.byte	'IfxDma_ChannelId_16',0,16,16
	.byte	'IfxDma_ChannelId_17',0,17,16
	.byte	'IfxDma_ChannelId_18',0,18,16
	.byte	'IfxDma_ChannelId_19',0,19,16
	.byte	'IfxDma_ChannelId_20',0,20,16
	.byte	'IfxDma_ChannelId_21',0,21,16
	.byte	'IfxDma_ChannelId_22',0,22,16
	.byte	'IfxDma_ChannelId_23',0,23,16
	.byte	'IfxDma_ChannelId_24',0,24,16
	.byte	'IfxDma_ChannelId_25',0,25,16
	.byte	'IfxDma_ChannelId_26',0,26,16
	.byte	'IfxDma_ChannelId_27',0,27,16
	.byte	'IfxDma_ChannelId_28',0,28,16
	.byte	'IfxDma_ChannelId_29',0,29,16
	.byte	'IfxDma_ChannelId_30',0,30,16
	.byte	'IfxDma_ChannelId_31',0,31,16
	.byte	'IfxDma_ChannelId_32',0,32,16
	.byte	'IfxDma_ChannelId_33',0,33,16
	.byte	'IfxDma_ChannelId_34',0,34,16
	.byte	'IfxDma_ChannelId_35',0,35,16
	.byte	'IfxDma_ChannelId_36',0,36,16
	.byte	'IfxDma_ChannelId_37',0,37,16
	.byte	'IfxDma_ChannelId_38',0,38,16
	.byte	'IfxDma_ChannelId_39',0,39,16
	.byte	'IfxDma_ChannelId_40',0,40,16
	.byte	'IfxDma_ChannelId_41',0,41,16
	.byte	'IfxDma_ChannelId_42',0,42,16
	.byte	'IfxDma_ChannelId_43',0,43,16
	.byte	'IfxDma_ChannelId_44',0,44,16
	.byte	'IfxDma_ChannelId_45',0,45,16
	.byte	'IfxDma_ChannelId_46',0,46,16
	.byte	'IfxDma_ChannelId_47',0,47,0
.L112:
	.byte	8
	.byte	'IfxDma_isChannelReset',0,3,12,136,12,20
	.word	436
	.byte	1,1
.L114:
	.byte	5
	.byte	'dma',0,12,136,12,51
	.word	21144
.L116:
	.byte	5
	.byte	'channelId',0,12,136,12,73
	.word	21149
.L118:
	.byte	6,0
.L104:
	.byte	4
	.byte	'IfxDma_resetChannel',0,3,12,160,12,17,1,1
.L107:
	.byte	5
	.byte	'dma',0,12,160,12,46
	.word	21144
.L109:
	.byte	5
	.byte	'channelId',0,12,160,12,68
	.word	21149
.L111:
	.byte	6,0
.L97:
	.byte	4
	.byte	'IfxDma_disableChannelTransaction',0,3,12,144,10,17,1,1
.L99:
	.byte	5
	.byte	'dma',0,12,144,10,59
	.word	21144
.L101:
	.byte	5
	.byte	'channelId',0,12,144,10,81
	.word	21149
.L103:
	.byte	6,0
.L90:
	.byte	8
	.byte	'IfxDma_isChannelTransactionEnabled',0,3,12,142,12,20
	.word	436
	.byte	1,1
.L92:
	.byte	5
	.byte	'dma',0,12,142,12,64
	.word	21144
.L94:
	.byte	5
	.byte	'channelId',0,12,142,12,86
	.word	21149
.L96:
	.byte	6,0,8
	.byte	'IfxDma_isChannelTransactionPending',0,3,12,148,12,20
	.word	436
	.byte	1,1,5
	.byte	'dma',0,12,148,12,64
	.word	21144
	.byte	5
	.byte	'channelId',0,12,148,12,86
	.word	21149
	.byte	6,0,4
	.byte	'IfxDma_startChannelTransaction',0,3,12,147,13,17,1,1,5
	.byte	'dma',0,12,147,13,57
	.word	21144
	.byte	5
	.byte	'channelId',0,12,147,13,79
	.word	21149
	.byte	6,0,4
	.byte	'IfxDma_setChannelDestinationAddress',0,3,12,178,12,17,1,1,5
	.byte	'dma',0,12,178,12,62
	.word	21144
	.byte	5
	.byte	'channelId',0,12,178,12,84
	.word	21149
	.byte	5
	.byte	'address',0,12,178,12,101
	.word	327
	.byte	6,0,20
	.word	321
	.byte	3
	.word	22760
	.byte	4
	.byte	'IfxDma_setChannelSourceAddress',0,3,12,237,12,17,1,1,5
	.byte	'dma',0,12,237,12,57
	.word	21144
	.byte	5
	.byte	'channelId',0,12,237,12,79
	.word	21149
	.byte	5
	.byte	'address',0,12,237,12,102
	.word	22765
	.byte	6,0,4
	.byte	'IfxDma_setChannelTransferCount',0,3,12,132,13,17,1,1,5
	.byte	'dma',0,12,132,13,57
	.word	21144
	.byte	5
	.byte	'channelId',0,12,132,13,79
	.word	21149
	.byte	5
	.byte	'transferCount',0,12,132,13,97
	.word	2290
	.byte	6,0,4
	.byte	'IfxDma_clearChannelInterrupt',0,3,12,241,9,17,1,1,5
	.byte	'dma',0,12,241,9,55
	.word	21144
	.byte	5
	.byte	'channelId',0,12,241,9,77
	.word	21149
	.byte	6,0,8
	.byte	'IfxDma_getAndClearChannelInterrupt',0,3,12,226,10,20
	.word	436
	.byte	1,1,5
	.byte	'dma',0,12,226,10,64
	.word	21144
	.byte	5
	.byte	'channelId',0,12,226,10,86
	.word	21149
	.byte	6,0,8
	.byte	'IfxDma_getChannelInterrupt',0,3,12,170,11,20
	.word	436
	.byte	1,1,5
	.byte	'dma',0,12,170,11,56
	.word	21144
	.byte	5
	.byte	'channelId',0,12,170,11,78
	.word	21149
	.byte	6,0
.L140:
	.byte	8
	.byte	'IfxDma_getSrcPointer',0,3,12,250,11,35
	.word	787
	.byte	1,1
.L142:
	.byte	5
	.byte	'dma',0,12,250,11,65
	.word	21144
.L144:
	.byte	5
	.byte	'channelId',0,12,250,11,87
	.word	21149
.L146:
	.byte	6,0,20
	.word	429
	.byte	21
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,22
	.word	23248
	.byte	0,14
	.word	413
	.byte	3
	.word	413
	.byte	23
	.byte	'__cmpswapw',0
	.word	23290
	.byte	1,1,1,1,24
	.byte	'p',0
	.word	23295
	.byte	24
	.byte	'value',0
	.word	413
	.byte	24
	.byte	'compare',0
	.word	413
	.byte	0,25
	.word	157
	.byte	26
	.word	183
	.byte	6,0,25
	.word	218
	.byte	26
	.word	250
	.byte	6,0,25
	.word	263
	.byte	6,0,25
	.word	332
	.byte	26
	.word	351
	.byte	6,0,25
	.word	367
	.byte	26
	.word	382
	.byte	26
	.word	396
	.byte	6,0,25
	.word	792
	.byte	26
	.word	820
	.byte	6,0,25
	.word	835
	.byte	26
	.word	857
	.byte	6,0,25
	.word	953
	.byte	26
	.word	973
	.byte	26
	.word	986
	.byte	26
	.word	1008
	.byte	17,27
	.word	792
	.byte	26
	.word	820
	.byte	28
	.word	833
	.byte	0,6,0,0,25
	.word	1730
	.byte	26
	.word	1770
	.byte	26
	.word	1788
	.byte	6,0,25
	.word	1808
	.byte	26
	.word	1851
	.byte	6,0,25
	.word	1871
	.byte	26
	.word	1909
	.byte	26
	.word	1927
	.byte	6,0,25
	.word	1947
	.byte	26
	.word	1988
	.byte	6,0,25
	.word	2008
	.byte	26
	.word	2059
	.byte	6,0,25
	.word	2079
	.byte	6,0,25
	.word	2214
	.byte	6,0,25
	.word	2248
	.byte	6,0,25
	.word	2311
	.byte	26
	.word	2352
	.byte	6,0,25
	.word	2371
	.byte	26
	.word	2426
	.byte	6,0,25
	.word	2445
	.byte	26
	.word	2485
	.byte	26
	.word	2502
	.byte	17,6,0,0,25
	.word	10382
	.byte	26
	.word	10410
	.byte	26
	.word	10424
	.byte	26
	.word	10442
	.byte	6,0,25
	.word	22225
	.byte	26
	.word	22259
	.byte	26
	.word	22272
	.byte	6,0,25
	.word	22293
	.byte	26
	.word	22321
	.byte	26
	.word	22334
	.byte	6,0,25
	.word	22355
	.byte	26
	.word	22396
	.byte	26
	.word	22409
	.byte	6,0,25
	.word	22430
	.byte	26
	.word	22477
	.byte	26
	.word	22490
	.byte	6,0,25
	.word	22511
	.byte	26
	.word	22558
	.byte	26
	.word	22571
	.byte	6,0,25
	.word	22592
	.byte	26
	.word	22631
	.byte	26
	.word	22644
	.byte	6,0,25
	.word	22665
	.byte	26
	.word	22709
	.byte	26
	.word	22722
	.byte	26
	.word	22741
	.byte	6,0,25
	.word	22770
	.byte	26
	.word	22809
	.byte	26
	.word	22822
	.byte	26
	.word	22841
	.byte	6,0,25
	.word	22860
	.byte	26
	.word	22899
	.byte	26
	.word	22912
	.byte	26
	.word	22931
	.byte	6,0,25
	.word	22956
	.byte	26
	.word	22993
	.byte	26
	.word	23006
	.byte	6,0,25
	.word	23027
	.byte	26
	.word	23074
	.byte	26
	.word	23087
	.byte	6,0,25
	.word	23108
	.byte	26
	.word	23147
	.byte	26
	.word	23160
	.byte	6,0,25
	.word	23181
	.byte	26
	.word	23214
	.byte	26
	.word	23227
	.byte	6,0,29,15,207,3,9,4,13
	.byte	'dma',0
	.word	21144
	.byte	4,2,35,0,0
.L82:
	.byte	3
	.word	23868
	.byte	29,15,139,4,9,4,13
	.byte	'dma',0
	.word	21144
	.byte	4,2,35,0,0,20
	.word	23893
.L121:
	.byte	3
	.word	23913
.L124:
	.byte	3
	.word	23893
	.byte	14
	.word	20267
.L177:
	.byte	3
	.word	23928
	.byte	29,15,218,3,9,12,13
	.byte	'dma',0
	.word	21144
	.byte	4,2,35,0,13
	.byte	'channelId',0
	.word	21149
	.byte	1,2,35,4,13
	.byte	'channel',0
	.word	23933
	.byte	4,2,35,8,0
.L128:
	.byte	3
	.word	23938
	.byte	15,12,160,1,9,1,16
	.byte	'IfxDma_ChannelMove_1',0,0,16
	.byte	'IfxDma_ChannelMove_2',0,1,16
	.byte	'IfxDma_ChannelMove_4',0,2,16
	.byte	'IfxDma_ChannelMove_8',0,3,16
	.byte	'IfxDma_ChannelMove_16',0,4,16
	.byte	'IfxDma_ChannelMove_3',0,5,16
	.byte	'IfxDma_ChannelMove_5',0,6,16
	.byte	'IfxDma_ChannelMove_9',0,7,0,15,12,221,1,9,1,16
	.byte	'IfxDma_ChannelRequestMode_oneTransferPerRequest',0,0,16
	.byte	'IfxDma_ChannelRequestMode_completeTransactionPerRequest',0,1,0,15,12,188,1,9,1,16
	.byte	'IfxDma_ChannelOperationMode_single',0,0,16
	.byte	'IfxDma_ChannelOperationMode_continuous',0,1,0,15,12,175,1,9,1,16
	.byte	'IfxDma_ChannelMoveSize_8bit',0,0,16
	.byte	'IfxDma_ChannelMoveSize_16bit',0,1,16
	.byte	'IfxDma_ChannelMoveSize_32bit',0,2,16
	.byte	'IfxDma_ChannelMoveSize_64bit',0,3,16
	.byte	'IfxDma_ChannelMoveSize_128bit',0,4,16
	.byte	'IfxDma_ChannelMoveSize_256bit',0,5,0,15,12,197,1,9,1,16
	.byte	'IfxDma_ChannelPattern_0_disable',0,0,16
	.byte	'IfxDma_ChannelPattern_0_mode1',0,1,16
	.byte	'IfxDma_ChannelPattern_0_mode2',0,2,16
	.byte	'IfxDma_ChannelPattern_0_mode3',0,3,16
	.byte	'IfxDma_ChannelPattern_1_disable',0,4,16
	.byte	'IfxDma_ChannelPattern_1_mode1',0,5,16
	.byte	'IfxDma_ChannelPattern_1_mode2',0,6,16
	.byte	'IfxDma_ChannelPattern_1_mode3',0,7,0,15,12,230,1,9,1,16
	.byte	'IfxDma_ChannelRequestSource_peripheral',0,0,16
	.byte	'IfxDma_ChannelRequestSource_daisyChain',0,1,0,15,12,94,9,1,16
	.byte	'IfxDma_ChannelBusPriority_low',0,0,16
	.byte	'IfxDma_ChannelBusPriority_medium',0,1,16
	.byte	'IfxDma_ChannelBusPriority_high',0,2,0,15,12,136,1,9,1,16
	.byte	'IfxDma_ChannelIncrementStep_1',0,0,16
	.byte	'IfxDma_ChannelIncrementStep_2',0,1,16
	.byte	'IfxDma_ChannelIncrementStep_4',0,2,16
	.byte	'IfxDma_ChannelIncrementStep_8',0,3,16
	.byte	'IfxDma_ChannelIncrementStep_16',0,4,16
	.byte	'IfxDma_ChannelIncrementStep_32',0,5,16
	.byte	'IfxDma_ChannelIncrementStep_64',0,6,16
	.byte	'IfxDma_ChannelIncrementStep_128',0,7,0,15,12,127,9,1,16
	.byte	'IfxDma_ChannelIncrementDirection_negative',0,0,16
	.byte	'IfxDma_ChannelIncrementDirection_positive',0,1,0,15,12,104,9,1,16
	.byte	'IfxDma_ChannelIncrementCircular_none',0,0,16
	.byte	'IfxDma_ChannelIncrementCircular_2',0,1,16
	.byte	'IfxDma_ChannelIncrementCircular_4',0,2,16
	.byte	'IfxDma_ChannelIncrementCircular_8',0,3,16
	.byte	'IfxDma_ChannelIncrementCircular_16',0,4,16
	.byte	'IfxDma_ChannelIncrementCircular_32',0,5,16
	.byte	'IfxDma_ChannelIncrementCircular_64',0,6,16
	.byte	'IfxDma_ChannelIncrementCircular_128',0,7,16
	.byte	'IfxDma_ChannelIncrementCircular_256',0,8,16
	.byte	'IfxDma_ChannelIncrementCircular_512',0,9,16
	.byte	'IfxDma_ChannelIncrementCircular_1024',0,10,16
	.byte	'IfxDma_ChannelIncrementCircular_2048',0,11,16
	.byte	'IfxDma_ChannelIncrementCircular_4096',0,12,16
	.byte	'IfxDma_ChannelIncrementCircular_8192',0,13,16
	.byte	'IfxDma_ChannelIncrementCircular_16384',0,14,16
	.byte	'IfxDma_ChannelIncrementCircular_32768',0,15,0,15,12,239,1,9,1,16
	.byte	'IfxDma_ChannelShadow_none',0,0,16
	.byte	'IfxDma_ChannelShadow_src',0,1,16
	.byte	'IfxDma_ChannelShadow_dst',0,2,16
	.byte	'IfxDma_ChannelShadow_srcDirectWrite',0,5,16
	.byte	'IfxDma_ChannelShadow_dstDirectWrite',0,6,16
	.byte	'IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch',0,8,16
	.byte	'IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch',0,9,16
	.byte	'IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch',0,10,16
	.byte	'IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch',0,11,16
	.byte	'IfxDma_ChannelShadow_linkedList',0,12,16
	.byte	'IfxDma_ChannelShadow_accumulatedLinkedList',0,13,16
	.byte	'IfxDma_ChannelShadow_safeLinkedList',0,14,16
	.byte	'IfxDma_ChannelShadow_conditionalLinkedList',0,15,0,15,12,151,1,9,1,16
	.byte	'IfxDma_ChannelInterruptControl_thresholdLimitMatch',0,0,16
	.byte	'IfxDma_ChannelInterruptControl_transferCountDecremented',0,1,0,29,15,227,3,9,56,13
	.byte	'module',0
	.word	23888
	.byte	4,2,35,0,13
	.byte	'channelId',0
	.word	21149
	.byte	1,2,35,4,13
	.byte	'sourceAddress',0
	.word	2290
	.byte	4,2,35,6,13
	.byte	'destinationAddress',0
	.word	2290
	.byte	4,2,35,10,13
	.byte	'shadowAddress',0
	.word	2290
	.byte	4,2,35,14,13
	.byte	'readDataCrc',0
	.word	2290
	.byte	4,2,35,18,13
	.byte	'sourceDestinationAddressCrc',0
	.word	2290
	.byte	4,2,35,22,13
	.byte	'transferCount',0
	.word	931
	.byte	2,2,35,26,13
	.byte	'blockMode',0
	.word	23999
	.byte	1,2,35,28,13
	.byte	'requestMode',0
	.word	24191
	.byte	1,2,35,29,13
	.byte	'operationMode',0
	.word	24306
	.byte	1,2,35,30,13
	.byte	'moveSize',0
	.word	24391
	.byte	1,2,35,31,13
	.byte	'pattern',0
	.word	24585
	.byte	1,2,35,32,13
	.byte	'requestSource',0
	.word	24852
	.byte	1,2,35,33,13
	.byte	'busPriority',0
	.word	24941
	.byte	1,2,35,34,13
	.byte	'hardwareRequestEnabled',0
	.word	436
	.byte	1,2,35,35,13
	.byte	'sourceAddressIncrementStep',0
	.word	25047
	.byte	1,2,35,36,13
	.byte	'sourceAddressIncrementDirection',0
	.word	25315
	.byte	1,2,35,37,13
	.byte	'sourceAddressCircularRange',0
	.word	25409
	.byte	1,2,35,38,13
	.byte	'destinationAddressIncrementStep',0
	.word	25047
	.byte	1,2,35,39,13
	.byte	'destinationAddressIncrementDirection',0
	.word	25315
	.byte	1,2,35,40,13
	.byte	'destinationAddressCircularRange',0
	.word	25409
	.byte	1,2,35,41,13
	.byte	'shadowControl',0
	.word	26023
	.byte	1,2,35,42,13
	.byte	'sourceCircularBufferEnabled',0
	.word	436
	.byte	1,2,35,43,13
	.byte	'destinationCircularBufferEnabled',0
	.word	436
	.byte	1,2,35,44,13
	.byte	'timestampEnabled',0
	.word	436
	.byte	1,2,35,45,13
	.byte	'wrapSourceInterruptEnabled',0
	.word	436
	.byte	1,2,35,46,13
	.byte	'wrapDestinationInterruptEnabled',0
	.word	436
	.byte	1,2,35,47,13
	.byte	'channelInterruptEnabled',0
	.word	436
	.byte	1,2,35,48,13
	.byte	'channelInterruptControl',0
	.word	26576
	.byte	1,2,35,49,13
	.byte	'interruptRaiseThreshold',0
	.word	436
	.byte	1,2,35,50,13
	.byte	'transactionRequestLostInterruptEnabled',0
	.word	436
	.byte	1,2,35,51,13
	.byte	'channelInterruptPriority',0
	.word	931
	.byte	2,2,35,52,13
	.byte	'channelInterruptTypeOfService',0
	.word	872
	.byte	1,2,35,54,0,20
	.word	26694
.L130:
	.byte	3
	.word	27731
.L167:
	.byte	3
	.word	26694
.L170:
	.byte	20
	.word	26694
	.byte	7
	.byte	'short int',0,2,5,30
	.byte	'__wchar_t',0,16,1,1
	.word	27751
	.byte	30
	.byte	'__size_t',0,16,1,1
	.word	413
	.byte	30
	.byte	'__ptrdiff_t',0,16,1,1
	.word	429
	.byte	31,1,3
	.word	27819
	.byte	30
	.byte	'__codeptr',0,16,1,1
	.word	27821
	.byte	30
	.byte	'boolean',0,17,101,29
	.word	436
	.byte	30
	.byte	'uint8',0,17,105,29
	.word	436
	.byte	30
	.byte	'uint16',0,17,109,29
	.word	931
	.byte	30
	.byte	'uint32',0,17,113,29
	.word	2290
	.byte	30
	.byte	'uint64',0,17,118,29
	.word	295
	.byte	30
	.byte	'sint16',0,17,126,29
	.word	27751
	.byte	7
	.byte	'long int',0,4,5,30
	.byte	'sint32',0,17,131,1,29
	.word	27934
	.byte	7
	.byte	'long long int',0,8,5,30
	.byte	'sint64',0,17,138,1,29
	.word	27962
	.byte	30
	.byte	'float32',0,17,167,1,29
	.word	209
	.byte	30
	.byte	'pvoid',0,18,57,28
	.word	327
	.byte	30
	.byte	'Ifx_TickTime',0,18,79,28
	.word	27962
	.byte	30
	.byte	'Ifx_Priority',0,18,103,16
	.word	931
	.byte	15,18,130,1,9,1,16
	.byte	'Ifx_RxSel_a',0,0,16
	.byte	'Ifx_RxSel_b',0,1,16
	.byte	'Ifx_RxSel_c',0,2,16
	.byte	'Ifx_RxSel_d',0,3,16
	.byte	'Ifx_RxSel_e',0,4,16
	.byte	'Ifx_RxSel_f',0,5,16
	.byte	'Ifx_RxSel_g',0,6,16
	.byte	'Ifx_RxSel_h',0,7,0,30
	.byte	'Ifx_RxSel',0,18,140,1,3
	.word	28068
	.byte	30
	.byte	'IfxDma_ChannelId',0,14,156,1,3
	.word	21149
	.byte	30
	.byte	'Ifx_DMA_ACCEN00_Bits',0,13,79,3
	.word	11025
	.byte	30
	.byte	'Ifx_DMA_ACCEN01_Bits',0,13,85,3
	.word	11595
	.byte	30
	.byte	'Ifx_DMA_ACCEN10_Bits',0,13,122,3
	.word	11685
	.byte	30
	.byte	'Ifx_DMA_ACCEN11_Bits',0,13,128,1,3
	.word	12255
	.byte	30
	.byte	'Ifx_DMA_ACCEN20_Bits',0,13,165,1,3
	.word	12345
	.byte	30
	.byte	'Ifx_DMA_ACCEN21_Bits',0,13,171,1,3
	.word	12916
	.byte	30
	.byte	'Ifx_DMA_ACCEN30_Bits',0,13,208,1,3
	.word	13007
	.byte	30
	.byte	'Ifx_DMA_ACCEN31_Bits',0,13,214,1,3
	.word	13578
	.byte	30
	.byte	'Ifx_DMA_BLK_CLRE_Bits',0,13,230,1,3
	.word	14196
	.byte	30
	.byte	'Ifx_DMA_BLK_EER_Bits',0,13,243,1,3
	.word	13680
	.byte	30
	.byte	'Ifx_DMA_BLK_ERRSR_Bits',0,13,132,2,3
	.word	13904
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_ADICR_Bits',0,13,152,2,3
	.word	16108
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_CHCR_Bits',0,13,168,2,3
	.word	16424
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_CHSR_Bits',0,13,184,2,3
	.word	16794
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_DADR_Bits',0,13,190,2,3
	.word	16019
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_R0_Bits',0,13,199,2,3
	.word	14659
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_R1_Bits',0,13,208,2,3
	.word	14794
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_R2_Bits',0,13,217,2,3
	.word	14929
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_R3_Bits',0,13,226,2,3
	.word	15064
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_R4_Bits',0,13,235,2,3
	.word	15199
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_R5_Bits',0,13,244,2,3
	.word	15334
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_R6_Bits',0,13,253,2,3
	.word	15469
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_R7_Bits',0,13,134,3,3
	.word	15604
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_RDCRC_Bits',0,13,140,3,3
	.word	15748
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_SADR_Bits',0,13,146,3,3
	.word	15930
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_SDCRC_Bits',0,13,152,3,3
	.word	15839
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_SHADR_Bits',0,13,158,3,3
	.word	16703
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_SR_Bits',0,13,169,3,3
	.word	14479
	.byte	30
	.byte	'Ifx_DMA_CH_ADICR_Bits',0,13,189,3,3
	.word	19244
	.byte	30
	.byte	'Ifx_DMA_CH_CHCFGR_Bits',0,13,205,3,3
	.word	19556
	.byte	30
	.byte	'Ifx_DMA_CH_CHCSR_Bits',0,13,226,3,3
	.word	19920
	.byte	30
	.byte	'Ifx_DMA_CH_DADR_Bits',0,13,232,3,3
	.word	19159
	.byte	30
	.byte	'Ifx_DMA_CH_RDCRCR_Bits',0,13,238,3,3
	.word	18898
	.byte	30
	.byte	'Ifx_DMA_CH_SADR_Bits',0,13,244,3,3
	.word	19074
	.byte	30
	.byte	'Ifx_DMA_CH_SDCRCR_Bits',0,13,250,3,3
	.word	18986
	.byte	30
	.byte	'Ifx_DMA_CH_SHADR_Bits',0,13,128,4,3
	.word	19833
	.byte	30
	.byte	'Ifx_DMA_CLC_Bits',0,13,138,4,3
	.word	10460
	.byte	30
	.byte	'Ifx_DMA_ERRINTR_Bits',0,13,145,4,3
	.word	17624
	.byte	30
	.byte	'Ifx_DMA_HRR_Bits',0,13,152,4,3
	.word	18216
	.byte	30
	.byte	'Ifx_DMA_ID_Bits',0,13,160,4,3
	.word	10617
	.byte	30
	.byte	'Ifx_DMA_MEMCON_Bits',0,13,175,4,3
	.word	10748
	.byte	30
	.byte	'Ifx_DMA_MODE_Bits',0,13,182,4,3
	.word	18092
	.byte	30
	.byte	'Ifx_DMA_OTSS_Bits',0,13,191,4,3
	.word	17485
	.byte	30
	.byte	'Ifx_DMA_PRR0_Bits',0,13,200,4,3
	.word	17730
	.byte	30
	.byte	'Ifx_DMA_PRR1_Bits',0,13,209,4,3
	.word	17864
	.byte	30
	.byte	'Ifx_DMA_SUSACR_Bits',0,13,216,4,3
	.word	18456
	.byte	30
	.byte	'Ifx_DMA_SUSENR_Bits',0,13,223,4,3
	.word	18339
	.byte	30
	.byte	'Ifx_DMA_TIME_Bits',0,13,229,4,3
	.word	17998
	.byte	30
	.byte	'Ifx_DMA_TSR_Bits',0,13,248,4,3
	.word	18573
	.byte	30
	.byte	'Ifx_DMA_ACCEN00',0,13,133,5,3
	.word	11555
	.byte	30
	.byte	'Ifx_DMA_ACCEN01',0,13,141,5,3
	.word	11645
	.byte	30
	.byte	'Ifx_DMA_ACCEN10',0,13,149,5,3
	.word	12215
	.byte	30
	.byte	'Ifx_DMA_ACCEN11',0,13,157,5,3
	.word	12305
	.byte	30
	.byte	'Ifx_DMA_ACCEN20',0,13,165,5,3
	.word	12876
	.byte	30
	.byte	'Ifx_DMA_ACCEN21',0,13,173,5,3
	.word	12967
	.byte	30
	.byte	'Ifx_DMA_ACCEN30',0,13,181,5,3
	.word	13538
	.byte	30
	.byte	'Ifx_DMA_ACCEN31',0,13,189,5,3
	.word	13629
	.byte	30
	.byte	'Ifx_DMA_BLK_CLRE',0,13,197,5,3
	.word	14439
	.byte	30
	.byte	'Ifx_DMA_BLK_EER',0,13,205,5,3
	.word	13864
	.byte	30
	.byte	'Ifx_DMA_BLK_ERRSR',0,13,213,5,3
	.word	14156
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_ADICR',0,13,221,5,3
	.word	16384
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_CHCR',0,13,229,5,3
	.word	16663
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_CHSR',0,13,237,5,3
	.word	17027
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_DADR',0,13,245,5,3
	.word	16068
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_R0',0,13,253,5,3
	.word	14754
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_R1',0,13,133,6,3
	.word	14889
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_R2',0,13,141,6,3
	.word	15024
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_R3',0,13,149,6,3
	.word	15159
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_R4',0,13,157,6,3
	.word	15294
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_R5',0,13,165,6,3
	.word	15429
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_R6',0,13,173,6,3
	.word	15564
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_R7',0,13,181,6,3
	.word	15699
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_RDCRC',0,13,189,6,3
	.word	15799
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_SADR',0,13,197,6,3
	.word	15979
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_SDCRC',0,13,205,6,3
	.word	15890
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_SHADR',0,13,213,6,3
	.word	16754
	.byte	30
	.byte	'Ifx_DMA_BLK_ME_SR',0,13,221,6,3
	.word	14619
	.byte	30
	.byte	'Ifx_DMA_CH_ADICR',0,13,229,6,3
	.word	19516
	.byte	30
	.byte	'Ifx_DMA_CH_CHCFGR',0,13,237,6,3
	.word	19793
	.byte	30
	.byte	'Ifx_DMA_CH_CHCSR',0,13,245,6,3
	.word	20227
	.byte	30
	.byte	'Ifx_DMA_CH_DADR',0,13,253,6,3
	.word	19204
	.byte	30
	.byte	'Ifx_DMA_CH_RDCRCR',0,13,133,7,3
	.word	18946
	.byte	30
	.byte	'Ifx_DMA_CH_SADR',0,13,141,7,3
	.word	19119
	.byte	30
	.byte	'Ifx_DMA_CH_SDCRCR',0,13,149,7,3
	.word	19034
	.byte	30
	.byte	'Ifx_DMA_CH_SHADR',0,13,157,7,3
	.word	19880
	.byte	30
	.byte	'Ifx_DMA_CLC',0,13,165,7,3
	.word	10577
	.byte	30
	.byte	'Ifx_DMA_ERRINTR',0,13,173,7,3
	.word	17690
	.byte	30
	.byte	'Ifx_DMA_HRR',0,13,181,7,3
	.word	18278
	.byte	30
	.byte	'Ifx_DMA_ID',0,13,189,7,3
	.word	10699
	.byte	30
	.byte	'Ifx_DMA_MEMCON',0,13,197,7,3
	.word	10976
	.byte	30
	.byte	'Ifx_DMA_MODE',0,13,205,7,3
	.word	18156
	.byte	30
	.byte	'Ifx_DMA_OTSS',0,13,213,7,3
	.word	17584
	.byte	30
	.byte	'Ifx_DMA_PRR0',0,13,221,7,3
	.word	17824
	.byte	30
	.byte	'Ifx_DMA_PRR1',0,13,229,7,3
	.word	17958
	.byte	30
	.byte	'Ifx_DMA_SUSACR',0,13,237,7,3
	.word	18523
	.byte	30
	.byte	'Ifx_DMA_SUSENR',0,13,245,7,3
	.word	18406
	.byte	30
	.byte	'Ifx_DMA_TIME',0,13,253,7,3
	.word	18041
	.byte	30
	.byte	'Ifx_DMA_TSR',0,13,133,8,3
	.word	18848
	.byte	14
	.word	17067
	.byte	30
	.byte	'Ifx_DMA_BLK_ME',0,13,165,8,3
	.word	30986
	.byte	14
	.word	17360
	.byte	30
	.byte	'Ifx_DMA_BLK',0,13,185,8,3
	.word	31015
	.byte	14
	.word	20267
	.byte	30
	.byte	'Ifx_DMA_CH',0,13,198,8,3
	.word	31041
	.byte	14
	.word	20433
	.byte	30
	.byte	'Ifx_DMA',0,13,250,8,3
	.word	31066
	.byte	30
	.byte	'IfxSrc_Tos',0,5,74,3
	.word	872
	.byte	30
	.byte	'Ifx_SRC_SRCR_Bits',0,4,62,3
	.word	453
	.byte	30
	.byte	'Ifx_SRC_SRCR',0,4,75,3
	.word	743
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,4,86,25,4,13
	.byte	'SR',0
	.word	743
	.byte	4,2,35,0,0,14
	.word	31154
	.byte	30
	.byte	'Ifx_SRC_AGBT',0,4,89,3
	.word	31186
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,4,92,25,12,13
	.byte	'TX',0
	.word	743
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	743
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	743
	.byte	4,2,35,8,0,14
	.word	31212
	.byte	30
	.byte	'Ifx_SRC_ASCLIN',0,4,97,3
	.word	31271
	.byte	10
	.byte	'_Ifx_SRC_BCUSPB',0,4,100,25,4,13
	.byte	'SBSRC',0
	.word	743
	.byte	4,2,35,0,0,14
	.word	31299
	.byte	30
	.byte	'Ifx_SRC_BCUSPB',0,4,103,3
	.word	31336
	.byte	18,64
	.word	743
	.byte	19,15,0,10
	.byte	'_Ifx_SRC_CAN',0,4,106,25,64,13
	.byte	'INT',0
	.word	31364
	.byte	64,2,35,0,0,14
	.word	31373
	.byte	30
	.byte	'Ifx_SRC_CAN',0,4,109,3
	.word	31405
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,4,112,25,16,13
	.byte	'SR0',0
	.word	743
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	743
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	743
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	743
	.byte	4,2,35,12,0,14
	.word	31430
	.byte	30
	.byte	'Ifx_SRC_CCU6',0,4,118,3
	.word	31502
	.byte	18,8
	.word	743
	.byte	19,1,0,10
	.byte	'_Ifx_SRC_CERBERUS',0,4,121,25,8,13
	.byte	'SR',0
	.word	31528
	.byte	8,2,35,0,0,14
	.word	31537
	.byte	30
	.byte	'Ifx_SRC_CERBERUS',0,4,124,3
	.word	31573
	.byte	10
	.byte	'_Ifx_SRC_CIF',0,4,127,25,16,13
	.byte	'MI',0
	.word	743
	.byte	4,2,35,0,13
	.byte	'MIEP',0
	.word	743
	.byte	4,2,35,4,13
	.byte	'ISP',0
	.word	743
	.byte	4,2,35,8,13
	.byte	'MJPEG',0
	.word	743
	.byte	4,2,35,12,0,14
	.word	31603
	.byte	30
	.byte	'Ifx_SRC_CIF',0,4,133,1,3
	.word	31676
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,4,136,1,25,4,13
	.byte	'SBSRC',0
	.word	743
	.byte	4,2,35,0,0,14
	.word	31702
	.byte	30
	.byte	'Ifx_SRC_CPU',0,4,139,1,3
	.word	31737
	.byte	18,192,1
	.word	743
	.byte	19,47,0,10
	.byte	'_Ifx_SRC_DMA',0,4,142,1,25,208,1,13
	.byte	'ERR',0
	.word	743
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	5686
	.byte	12,2,35,4,13
	.byte	'CH',0
	.word	31763
	.byte	192,1,2,35,16,0,14
	.word	31773
	.byte	30
	.byte	'Ifx_SRC_DMA',0,4,147,1,3
	.word	31840
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,4,150,1,25,8,13
	.byte	'SRM',0
	.word	743
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	743
	.byte	4,2,35,4,0,14
	.word	31866
	.byte	30
	.byte	'Ifx_SRC_DSADC',0,4,154,1,3
	.word	31914
	.byte	10
	.byte	'_Ifx_SRC_EMEM',0,4,157,1,25,4,13
	.byte	'SR',0
	.word	743
	.byte	4,2,35,0,0,14
	.word	31942
	.byte	30
	.byte	'Ifx_SRC_EMEM',0,4,160,1,3
	.word	31975
	.byte	18,40
	.word	436
	.byte	19,39,0,10
	.byte	'_Ifx_SRC_ERAY',0,4,163,1,25,80,13
	.byte	'INT',0
	.word	31528
	.byte	8,2,35,0,13
	.byte	'TINT',0
	.word	31528
	.byte	8,2,35,8,13
	.byte	'NDAT',0
	.word	31528
	.byte	8,2,35,16,13
	.byte	'MBSC',0
	.word	31528
	.byte	8,2,35,24,13
	.byte	'OBUSY',0
	.word	743
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	743
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	32002
	.byte	40,2,35,40,0,14
	.word	32011
	.byte	30
	.byte	'Ifx_SRC_ERAY',0,4,172,1,3
	.word	32138
	.byte	10
	.byte	'_Ifx_SRC_ETH',0,4,175,1,25,4,13
	.byte	'SR',0
	.word	743
	.byte	4,2,35,0,0,14
	.word	32165
	.byte	30
	.byte	'Ifx_SRC_ETH',0,4,178,1,3
	.word	32197
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,4,181,1,25,4,13
	.byte	'SR',0
	.word	743
	.byte	4,2,35,0,0,14
	.word	32223
	.byte	30
	.byte	'Ifx_SRC_FCE',0,4,184,1,3
	.word	32255
	.byte	10
	.byte	'_Ifx_SRC_FFT',0,4,187,1,25,12,13
	.byte	'DONE',0
	.word	743
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	743
	.byte	4,2,35,4,13
	.byte	'RFS',0
	.word	743
	.byte	4,2,35,8,0,14
	.word	32281
	.byte	30
	.byte	'Ifx_SRC_FFT',0,4,192,1,3
	.word	32341
	.byte	18,16
	.word	436
	.byte	19,15,0,10
	.byte	'_Ifx_SRC_GPSR',0,4,195,1,25,32,13
	.byte	'SR0',0
	.word	743
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	743
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	743
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	743
	.byte	4,2,35,12,13
	.byte	'reserved_10',0
	.word	32367
	.byte	16,2,35,16,0,14
	.word	32376
	.byte	30
	.byte	'Ifx_SRC_GPSR',0,4,202,1,3
	.word	32470
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,4,205,1,25,48,13
	.byte	'CIRQ',0
	.word	743
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	743
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	743
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	743
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	743
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	743
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	4717
	.byte	24,2,35,24,0,14
	.word	32497
	.byte	30
	.byte	'Ifx_SRC_GPT12',0,4,214,1,3
	.word	32614
	.byte	18,12
	.word	743
	.byte	19,2,0,18,32
	.word	743
	.byte	19,7,0,18,32
	.word	32651
	.byte	19,0,0,18,88
	.word	436
	.byte	19,87,0,18,108
	.word	743
	.byte	19,26,0,18,96
	.word	32651
	.byte	19,2,0,18,160,3
	.word	436
	.byte	19,159,3,0,18,64
	.word	32651
	.byte	19,1,0,18,192,3
	.word	436
	.byte	19,191,3,0,18,16
	.word	743
	.byte	19,3,0,18,64
	.word	32727
	.byte	19,3,0,18,52
	.word	436
	.byte	19,51,0,10
	.byte	'_Ifx_SRC_GTM',0,4,217,1,25,204,18,13
	.byte	'AEIIRQ',0
	.word	743
	.byte	4,2,35,0,13
	.byte	'ARUIRQ',0
	.word	32642
	.byte	12,2,35,4,13
	.byte	'reserved_10',0
	.word	3527
	.byte	4,2,35,16,13
	.byte	'BRCIRQ',0
	.word	743
	.byte	4,2,35,20,13
	.byte	'CMPIRQ',0
	.word	743
	.byte	4,2,35,24,13
	.byte	'SPEIRQ',0
	.word	31528
	.byte	8,2,35,28,13
	.byte	'reserved_24',0
	.word	5346
	.byte	8,2,35,36,13
	.byte	'PSM',0
	.word	32660
	.byte	32,2,35,44,13
	.byte	'reserved_4C',0
	.word	32669
	.byte	88,2,35,76,13
	.byte	'DPLL',0
	.word	32678
	.byte	108,3,35,164,1,13
	.byte	'reserved_110',0
	.word	17476
	.byte	96,3,35,144,2,13
	.byte	'ERR',0
	.word	743
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	5686
	.byte	12,3,35,244,2,13
	.byte	'TIM',0
	.word	32687
	.byte	96,3,35,128,3,13
	.byte	'reserved_1E0',0
	.word	32696
	.byte	160,3,3,35,224,3,13
	.byte	'MCS',0
	.word	32687
	.byte	96,3,35,128,7,13
	.byte	'reserved_3E0',0
	.word	32696
	.byte	160,3,3,35,224,7,13
	.byte	'TOM',0
	.word	32707
	.byte	64,3,35,128,11,13
	.byte	'reserved_5C0',0
	.word	32716
	.byte	192,3,3,35,192,11,13
	.byte	'ATOM',0
	.word	32736
	.byte	64,3,35,128,15,13
	.byte	'reserved_7C0',0
	.word	18328
	.byte	192,2,3,35,192,15,13
	.byte	'MCSW0',0
	.word	32642
	.byte	12,3,35,128,18,13
	.byte	'reserved_90C',0
	.word	32745
	.byte	52,3,35,140,18,13
	.byte	'MCSW1',0
	.word	32642
	.byte	12,3,35,192,18,0,14
	.word	32754
	.byte	30
	.byte	'Ifx_SRC_GTM',0,4,243,1,3
	.word	33214
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,4,246,1,25,4,13
	.byte	'SR',0
	.word	743
	.byte	4,2,35,0,0,14
	.word	33240
	.byte	30
	.byte	'Ifx_SRC_HSCT',0,4,249,1,3
	.word	33273
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,4,252,1,25,16,13
	.byte	'COK',0
	.word	743
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	743
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	743
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	743
	.byte	4,2,35,12,0,14
	.word	33300
	.byte	30
	.byte	'Ifx_SRC_HSSL',0,4,130,2,3
	.word	33373
	.byte	18,56
	.word	436
	.byte	19,55,0,10
	.byte	'_Ifx_SRC_I2C',0,4,133,2,25,80,13
	.byte	'BREQ',0
	.word	743
	.byte	4,2,35,0,13
	.byte	'LBREQ',0
	.word	743
	.byte	4,2,35,4,13
	.byte	'SREQ',0
	.word	743
	.byte	4,2,35,8,13
	.byte	'LSREQ',0
	.word	743
	.byte	4,2,35,12,13
	.byte	'ERR',0
	.word	743
	.byte	4,2,35,16,13
	.byte	'P',0
	.word	743
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	33400
	.byte	56,2,35,24,0,14
	.word	33409
	.byte	30
	.byte	'Ifx_SRC_I2C',0,4,142,2,3
	.word	33532
	.byte	10
	.byte	'_Ifx_SRC_LMU',0,4,145,2,25,4,13
	.byte	'SR',0
	.word	743
	.byte	4,2,35,0,0,14
	.word	33558
	.byte	30
	.byte	'Ifx_SRC_LMU',0,4,148,2,3
	.word	33590
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,4,151,2,25,20,13
	.byte	'SR0',0
	.word	743
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	743
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	743
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	743
	.byte	4,2,35,12,13
	.byte	'SR4',0
	.word	743
	.byte	4,2,35,16,0,14
	.word	33616
	.byte	30
	.byte	'Ifx_SRC_MSC',0,4,158,2,3
	.word	33701
	.byte	10
	.byte	'_Ifx_SRC_PMU',0,4,161,2,25,4,13
	.byte	'SR',0
	.word	743
	.byte	4,2,35,0,0,14
	.word	33727
	.byte	30
	.byte	'Ifx_SRC_PMU',0,4,164,2,3
	.word	33759
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,4,167,2,25,32,13
	.byte	'SR',0
	.word	32651
	.byte	32,2,35,0,0,14
	.word	33785
	.byte	30
	.byte	'Ifx_SRC_PSI5',0,4,170,2,3
	.word	33818
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,4,173,2,25,32,13
	.byte	'SR',0
	.word	32651
	.byte	32,2,35,0,0,14
	.word	33845
	.byte	30
	.byte	'Ifx_SRC_PSI5S',0,4,176,2,3
	.word	33879
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,4,179,2,25,24,13
	.byte	'TX',0
	.word	743
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	743
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	743
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	743
	.byte	4,2,35,12,13
	.byte	'HC',0
	.word	743
	.byte	4,2,35,16,13
	.byte	'U',0
	.word	743
	.byte	4,2,35,20,0,14
	.word	33907
	.byte	30
	.byte	'Ifx_SRC_QSPI',0,4,187,2,3
	.word	34000
	.byte	10
	.byte	'_Ifx_SRC_SCR',0,4,190,2,25,4,13
	.byte	'SR',0
	.word	743
	.byte	4,2,35,0,0,14
	.word	34027
	.byte	30
	.byte	'Ifx_SRC_SCR',0,4,193,2,3
	.word	34059
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,4,196,2,25,20,13
	.byte	'DTS',0
	.word	743
	.byte	4,2,35,0,13
	.byte	'ERU',0
	.word	32727
	.byte	16,2,35,4,0,14
	.word	34085
	.byte	30
	.byte	'Ifx_SRC_SCU',0,4,200,2,3
	.word	34131
	.byte	18,24
	.word	743
	.byte	19,5,0,10
	.byte	'_Ifx_SRC_SENT',0,4,203,2,25,24,13
	.byte	'SR',0
	.word	34157
	.byte	24,2,35,0,0,14
	.word	34166
	.byte	30
	.byte	'Ifx_SRC_SENT',0,4,206,2,3
	.word	34199
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,4,209,2,25,12,13
	.byte	'SR',0
	.word	32642
	.byte	12,2,35,0,0,14
	.word	34226
	.byte	30
	.byte	'Ifx_SRC_SMU',0,4,212,2,3
	.word	34258
	.byte	10
	.byte	'_Ifx_SRC_STM',0,4,215,2,25,8,13
	.byte	'SR0',0
	.word	743
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	743
	.byte	4,2,35,4,0,14
	.word	34284
	.byte	30
	.byte	'Ifx_SRC_STM',0,4,219,2,3
	.word	34330
	.byte	10
	.byte	'_Ifx_SRC_VADCCG',0,4,222,2,25,16,13
	.byte	'SR0',0
	.word	743
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	743
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	743
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	743
	.byte	4,2,35,12,0,14
	.word	34356
	.byte	30
	.byte	'Ifx_SRC_VADCCG',0,4,228,2,3
	.word	34431
	.byte	10
	.byte	'_Ifx_SRC_VADCG',0,4,231,2,25,16,13
	.byte	'SR0',0
	.word	743
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	743
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	743
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	743
	.byte	4,2,35,12,0,14
	.word	34460
	.byte	30
	.byte	'Ifx_SRC_VADCG',0,4,237,2,3
	.word	34534
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,4,240,2,25,4,13
	.byte	'SRC',0
	.word	743
	.byte	4,2,35,0,0,14
	.word	34562
	.byte	30
	.byte	'Ifx_SRC_XBAR',0,4,243,2,3
	.word	34596
	.byte	18,4
	.word	31154
	.byte	19,0,0,14
	.word	34623
	.byte	10
	.byte	'_Ifx_SRC_GAGBT',0,4,128,3,25,4,13
	.byte	'AGBT',0
	.word	34632
	.byte	4,2,35,0,0,14
	.word	34637
	.byte	30
	.byte	'Ifx_SRC_GAGBT',0,4,131,3,3
	.word	34673
	.byte	18,48
	.word	31212
	.byte	19,3,0,14
	.word	34701
	.byte	10
	.byte	'_Ifx_SRC_GASCLIN',0,4,134,3,25,48,13
	.byte	'ASCLIN',0
	.word	34710
	.byte	48,2,35,0,0,14
	.word	34715
	.byte	30
	.byte	'Ifx_SRC_GASCLIN',0,4,137,3,3
	.word	34755
	.byte	14
	.word	31299
	.byte	10
	.byte	'_Ifx_SRC_GBCU',0,4,140,3,25,4,13
	.byte	'SPB',0
	.word	34785
	.byte	4,2,35,0,0,14
	.word	34790
	.byte	30
	.byte	'Ifx_SRC_GBCU',0,4,143,3,3
	.word	34824
	.byte	18,64
	.word	31373
	.byte	19,0,0,14
	.word	34851
	.byte	10
	.byte	'_Ifx_SRC_GCAN',0,4,146,3,25,64,13
	.byte	'CAN',0
	.word	34860
	.byte	64,2,35,0,0,14
	.word	34865
	.byte	30
	.byte	'Ifx_SRC_GCAN',0,4,149,3,3
	.word	34899
	.byte	18,32
	.word	31430
	.byte	19,1,0,14
	.word	34926
	.byte	10
	.byte	'_Ifx_SRC_GCCU6',0,4,152,3,25,32,13
	.byte	'CCU6',0
	.word	34935
	.byte	32,2,35,0,0,14
	.word	34940
	.byte	30
	.byte	'Ifx_SRC_GCCU6',0,4,155,3,3
	.word	34976
	.byte	14
	.word	31537
	.byte	10
	.byte	'_Ifx_SRC_GCERBERUS',0,4,158,3,25,8,13
	.byte	'CERBERUS',0
	.word	35004
	.byte	8,2,35,0,0,14
	.word	35009
	.byte	30
	.byte	'Ifx_SRC_GCERBERUS',0,4,161,3,3
	.word	35053
	.byte	18,16
	.word	31603
	.byte	19,0,0,14
	.word	35085
	.byte	10
	.byte	'_Ifx_SRC_GCIF',0,4,164,3,25,16,13
	.byte	'CIF',0
	.word	35094
	.byte	16,2,35,0,0,14
	.word	35099
	.byte	30
	.byte	'Ifx_SRC_GCIF',0,4,167,3,3
	.word	35133
	.byte	18,8
	.word	31702
	.byte	19,1,0,14
	.word	35160
	.byte	10
	.byte	'_Ifx_SRC_GCPU',0,4,170,3,25,8,13
	.byte	'CPU',0
	.word	35169
	.byte	8,2,35,0,0,14
	.word	35174
	.byte	30
	.byte	'Ifx_SRC_GCPU',0,4,173,3,3
	.word	35208
	.byte	18,208,1
	.word	31773
	.byte	19,0,0,14
	.word	35235
	.byte	10
	.byte	'_Ifx_SRC_GDMA',0,4,176,3,25,208,1,13
	.byte	'DMA',0
	.word	35245
	.byte	208,1,2,35,0,0,14
	.word	35250
	.byte	30
	.byte	'Ifx_SRC_GDMA',0,4,179,3,3
	.word	35286
	.byte	14
	.word	31866
	.byte	14
	.word	31866
	.byte	14
	.word	31866
	.byte	10
	.byte	'_Ifx_SRC_GDSADC',0,4,182,3,25,32,13
	.byte	'DSADC0',0
	.word	35313
	.byte	8,2,35,0,13
	.byte	'reserved_8',0
	.word	5346
	.byte	8,2,35,8,13
	.byte	'DSADC2',0
	.word	35318
	.byte	8,2,35,16,13
	.byte	'DSADC3',0
	.word	35323
	.byte	8,2,35,24,0,14
	.word	35328
	.byte	30
	.byte	'Ifx_SRC_GDSADC',0,4,188,3,3
	.word	35419
	.byte	18,4
	.word	31942
	.byte	19,0,0,14
	.word	35448
	.byte	10
	.byte	'_Ifx_SRC_GEMEM',0,4,191,3,25,4,13
	.byte	'EMEM',0
	.word	35457
	.byte	4,2,35,0,0,14
	.word	35462
	.byte	30
	.byte	'Ifx_SRC_GEMEM',0,4,194,3,3
	.word	35498
	.byte	18,80
	.word	32011
	.byte	19,0,0,14
	.word	35526
	.byte	10
	.byte	'_Ifx_SRC_GERAY',0,4,197,3,25,80,13
	.byte	'ERAY',0
	.word	35535
	.byte	80,2,35,0,0,14
	.word	35540
	.byte	30
	.byte	'Ifx_SRC_GERAY',0,4,200,3,3
	.word	35576
	.byte	18,4
	.word	32165
	.byte	19,0,0,14
	.word	35604
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,4,203,3,25,4,13
	.byte	'ETH',0
	.word	35613
	.byte	4,2,35,0,0,14
	.word	35618
	.byte	30
	.byte	'Ifx_SRC_GETH',0,4,206,3,3
	.word	35652
	.byte	18,4
	.word	32223
	.byte	19,0,0,14
	.word	35679
	.byte	10
	.byte	'_Ifx_SRC_GFCE',0,4,209,3,25,4,13
	.byte	'FCE',0
	.word	35688
	.byte	4,2,35,0,0,14
	.word	35693
	.byte	30
	.byte	'Ifx_SRC_GFCE',0,4,212,3,3
	.word	35727
	.byte	18,12
	.word	32281
	.byte	19,0,0,14
	.word	35754
	.byte	10
	.byte	'_Ifx_SRC_GFFT',0,4,215,3,25,12,13
	.byte	'FFT',0
	.word	35763
	.byte	12,2,35,0,0,14
	.word	35768
	.byte	30
	.byte	'Ifx_SRC_GFFT',0,4,218,3,3
	.word	35802
	.byte	18,64
	.word	32376
	.byte	19,1,0,14
	.word	35829
	.byte	10
	.byte	'_Ifx_SRC_GGPSR',0,4,221,3,25,64,13
	.byte	'GPSR',0
	.word	35838
	.byte	64,2,35,0,0,14
	.word	35843
	.byte	30
	.byte	'Ifx_SRC_GGPSR',0,4,224,3,3
	.word	35879
	.byte	18,48
	.word	32497
	.byte	19,0,0,14
	.word	35907
	.byte	10
	.byte	'_Ifx_SRC_GGPT12',0,4,227,3,25,48,13
	.byte	'GPT12',0
	.word	35916
	.byte	48,2,35,0,0,14
	.word	35921
	.byte	30
	.byte	'Ifx_SRC_GGPT12',0,4,230,3,3
	.word	35959
	.byte	18,204,18
	.word	32754
	.byte	19,0,0,14
	.word	35988
	.byte	10
	.byte	'_Ifx_SRC_GGTM',0,4,233,3,25,204,18,13
	.byte	'GTM',0
	.word	35998
	.byte	204,18,2,35,0,0,14
	.word	36003
	.byte	30
	.byte	'Ifx_SRC_GGTM',0,4,236,3,3
	.word	36039
	.byte	18,4
	.word	33240
	.byte	19,0,0,14
	.word	36066
	.byte	10
	.byte	'_Ifx_SRC_GHSCT',0,4,239,3,25,4,13
	.byte	'HSCT',0
	.word	36075
	.byte	4,2,35,0,0,14
	.word	36080
	.byte	30
	.byte	'Ifx_SRC_GHSCT',0,4,242,3,3
	.word	36116
	.byte	18,64
	.word	33300
	.byte	19,3,0,14
	.word	36144
	.byte	10
	.byte	'_Ifx_SRC_GHSSL',0,4,245,3,25,68,13
	.byte	'HSSL',0
	.word	36153
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	743
	.byte	4,2,35,64,0,14
	.word	36158
	.byte	30
	.byte	'Ifx_SRC_GHSSL',0,4,249,3,3
	.word	36207
	.byte	18,80
	.word	33409
	.byte	19,0,0,14
	.word	36235
	.byte	10
	.byte	'_Ifx_SRC_GI2C',0,4,252,3,25,80,13
	.byte	'I2C',0
	.word	36244
	.byte	80,2,35,0,0,14
	.word	36249
	.byte	30
	.byte	'Ifx_SRC_GI2C',0,4,255,3,3
	.word	36283
	.byte	18,4
	.word	33558
	.byte	19,0,0,14
	.word	36310
	.byte	10
	.byte	'_Ifx_SRC_GLMU',0,4,130,4,25,4,13
	.byte	'LMU',0
	.word	36319
	.byte	4,2,35,0,0,14
	.word	36324
	.byte	30
	.byte	'Ifx_SRC_GLMU',0,4,133,4,3
	.word	36358
	.byte	18,40
	.word	33616
	.byte	19,1,0,14
	.word	36385
	.byte	10
	.byte	'_Ifx_SRC_GMSC',0,4,136,4,25,40,13
	.byte	'MSC',0
	.word	36394
	.byte	40,2,35,0,0,14
	.word	36399
	.byte	30
	.byte	'Ifx_SRC_GMSC',0,4,139,4,3
	.word	36433
	.byte	18,8
	.word	33727
	.byte	19,1,0,14
	.word	36460
	.byte	10
	.byte	'_Ifx_SRC_GPMU',0,4,142,4,25,8,13
	.byte	'PMU',0
	.word	36469
	.byte	8,2,35,0,0,14
	.word	36474
	.byte	30
	.byte	'Ifx_SRC_GPMU',0,4,145,4,3
	.word	36508
	.byte	18,32
	.word	33785
	.byte	19,0,0,14
	.word	36535
	.byte	10
	.byte	'_Ifx_SRC_GPSI5',0,4,148,4,25,32,13
	.byte	'PSI5',0
	.word	36544
	.byte	32,2,35,0,0,14
	.word	36549
	.byte	30
	.byte	'Ifx_SRC_GPSI5',0,4,151,4,3
	.word	36585
	.byte	18,32
	.word	33845
	.byte	19,0,0,14
	.word	36613
	.byte	10
	.byte	'_Ifx_SRC_GPSI5S',0,4,154,4,25,32,13
	.byte	'PSI5S',0
	.word	36622
	.byte	32,2,35,0,0,14
	.word	36627
	.byte	30
	.byte	'Ifx_SRC_GPSI5S',0,4,157,4,3
	.word	36665
	.byte	18,96
	.word	33907
	.byte	19,3,0,14
	.word	36694
	.byte	10
	.byte	'_Ifx_SRC_GQSPI',0,4,160,4,25,96,13
	.byte	'QSPI',0
	.word	36703
	.byte	96,2,35,0,0,14
	.word	36708
	.byte	30
	.byte	'Ifx_SRC_GQSPI',0,4,163,4,3
	.word	36744
	.byte	18,4
	.word	34027
	.byte	19,0,0,14
	.word	36772
	.byte	10
	.byte	'_Ifx_SRC_GSCR',0,4,166,4,25,4,13
	.byte	'SCR',0
	.word	36781
	.byte	4,2,35,0,0,14
	.word	36786
	.byte	30
	.byte	'Ifx_SRC_GSCR',0,4,169,4,3
	.word	36820
	.byte	14
	.word	34085
	.byte	10
	.byte	'_Ifx_SRC_GSCU',0,4,172,4,25,20,13
	.byte	'SCU',0
	.word	36847
	.byte	20,2,35,0,0,14
	.word	36852
	.byte	30
	.byte	'Ifx_SRC_GSCU',0,4,175,4,3
	.word	36886
	.byte	18,24
	.word	34166
	.byte	19,0,0,14
	.word	36913
	.byte	10
	.byte	'_Ifx_SRC_GSENT',0,4,178,4,25,24,13
	.byte	'SENT',0
	.word	36922
	.byte	24,2,35,0,0,14
	.word	36927
	.byte	30
	.byte	'Ifx_SRC_GSENT',0,4,181,4,3
	.word	36963
	.byte	18,12
	.word	34226
	.byte	19,0,0,14
	.word	36991
	.byte	10
	.byte	'_Ifx_SRC_GSMU',0,4,184,4,25,12,13
	.byte	'SMU',0
	.word	37000
	.byte	12,2,35,0,0,14
	.word	37005
	.byte	30
	.byte	'Ifx_SRC_GSMU',0,4,187,4,3
	.word	37039
	.byte	18,16
	.word	34284
	.byte	19,1,0,14
	.word	37066
	.byte	10
	.byte	'_Ifx_SRC_GSTM',0,4,190,4,25,16,13
	.byte	'STM',0
	.word	37075
	.byte	16,2,35,0,0,14
	.word	37080
	.byte	30
	.byte	'Ifx_SRC_GSTM',0,4,193,4,3
	.word	37114
	.byte	18,64
	.word	34460
	.byte	19,3,0,14
	.word	37141
	.byte	18,224,1
	.word	436
	.byte	19,223,1,0,18,32
	.word	34356
	.byte	19,1,0,14
	.word	37166
	.byte	10
	.byte	'_Ifx_SRC_GVADC',0,4,196,4,25,192,2,13
	.byte	'G',0
	.word	37150
	.byte	64,2,35,0,13
	.byte	'reserved_40',0
	.word	37155
	.byte	224,1,2,35,64,13
	.byte	'CG',0
	.word	37175
	.byte	32,3,35,160,2,0,14
	.word	37180
	.byte	30
	.byte	'Ifx_SRC_GVADC',0,4,201,4,3
	.word	37249
	.byte	14
	.word	34562
	.byte	10
	.byte	'_Ifx_SRC_GXBAR',0,4,204,4,25,4,13
	.byte	'XBAR',0
	.word	37277
	.byte	4,2,35,0,0,14
	.word	37282
	.byte	30
	.byte	'Ifx_SRC_GXBAR',0,4,207,4,3
	.word	37318
	.byte	15,19,240,10,9,1,16
	.byte	'IfxScu_CCUCON0_CLKSEL_fBack',0,0,16
	.byte	'IfxScu_CCUCON0_CLKSEL_fPll',0,1,0,30
	.byte	'IfxScu_CCUCON0_CLKSEL',0,19,244,10,3
	.word	37346
	.byte	15,19,254,10,9,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,16
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,30
	.byte	'IfxScu_WDTCON1_IR',0,19,131,11,3
	.word	37443
	.byte	10
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,7,45,16,4,11
	.byte	'EN0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	436
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_ACCEN0_Bits',0,7,79,3
	.word	37565
	.byte	10
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,7,82,16,4,11
	.byte	'reserved_0',0,4
	.word	413
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_SCU_ACCEN1_Bits',0,7,85,3
	.word	38122
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,7,88,16,4,11
	.byte	'STM0DIS',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	413
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,7,94,3
	.word	38199
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,7,97,16,4,11
	.byte	'BAUD1DIV',0,1
	.word	436
	.byte	4,4,2,35,0,11
	.byte	'BAUD2DIV',0,1
	.word	436
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	436
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	436
	.byte	4,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	436
	.byte	4,4,2,35,2,11
	.byte	'FSI2DIV',0,1
	.word	436
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	436
	.byte	2,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	436
	.byte	2,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	436
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	436
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_CCUCON0_Bits',0,7,111,3
	.word	38335
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,7,114,16,4,11
	.byte	'CANDIV',0,1
	.word	436
	.byte	4,4,2,35,0,11
	.byte	'ERAYDIV',0,1
	.word	436
	.byte	4,0,2,35,0,11
	.byte	'STMDIV',0,1
	.word	436
	.byte	4,4,2,35,1,11
	.byte	'GTMDIV',0,1
	.word	436
	.byte	4,0,2,35,1,11
	.byte	'ETHDIV',0,1
	.word	436
	.byte	4,4,2,35,2,11
	.byte	'ASCLINFDIV',0,1
	.word	436
	.byte	4,0,2,35,2,11
	.byte	'ASCLINSDIV',0,1
	.word	436
	.byte	4,4,2,35,3,11
	.byte	'INSEL',0,1
	.word	436
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_CCUCON1_Bits',0,7,126,3
	.word	38615
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,7,129,1,16,4,11
	.byte	'BBBDIV',0,1
	.word	436
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	413
	.byte	26,2,2,35,0,11
	.byte	'UP',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_CCUCON2_Bits',0,7,135,1,3
	.word	38853
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,7,138,1,16,4,11
	.byte	'PLLDIV',0,1
	.word	436
	.byte	6,2,2,35,0,11
	.byte	'PLLSEL',0,1
	.word	436
	.byte	2,0,2,35,0,11
	.byte	'PLLERAYDIV',0,1
	.word	436
	.byte	6,2,2,35,1,11
	.byte	'PLLERAYSEL',0,1
	.word	436
	.byte	2,0,2,35,1,11
	.byte	'SRIDIV',0,1
	.word	436
	.byte	6,2,2,35,2,11
	.byte	'SRISEL',0,1
	.word	436
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	5,3,2,35,3,11
	.byte	'SLCK',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'UP',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_CCUCON3_Bits',0,7,150,1,3
	.word	38981
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,7,153,1,16,4,11
	.byte	'SPBDIV',0,1
	.word	436
	.byte	6,2,2,35,0,11
	.byte	'SPBSEL',0,1
	.word	436
	.byte	2,0,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	436
	.byte	6,2,2,35,1,11
	.byte	'GTMSEL',0,1
	.word	436
	.byte	2,0,2,35,1,11
	.byte	'STMDIV',0,1
	.word	436
	.byte	6,2,2,35,2,11
	.byte	'STMSEL',0,1
	.word	436
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	5,3,2,35,3,11
	.byte	'SLCK',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'UP',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_CCUCON4_Bits',0,7,165,1,3
	.word	39224
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,7,168,1,16,4,11
	.byte	'MAXDIV',0,1
	.word	436
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	413
	.byte	26,2,2,35,0,11
	.byte	'UP',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_CCUCON5_Bits',0,7,174,1,3
	.word	39459
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,7,177,1,16,4,11
	.byte	'CPU0DIV',0,1
	.word	436
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	413
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON6_Bits',0,7,181,1,3
	.word	39587
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,7,184,1,16,4,11
	.byte	'CPU1DIV',0,1
	.word	436
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	413
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON7_Bits',0,7,188,1,3
	.word	39687
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,7,191,1,16,4,11
	.byte	'CHREV',0,1
	.word	436
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	436
	.byte	2,0,2,35,0,11
	.byte	'CHID',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'EEA',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	436
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	436
	.byte	4,4,2,35,3,11
	.byte	'SP',0,1
	.word	436
	.byte	2,2,2,35,3,11
	.byte	'SEC',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_CHIPID_Bits',0,7,202,1,3
	.word	39787
	.byte	10
	.byte	'_Ifx_SCU_DTSCON_Bits',0,7,205,1,16,4,11
	.byte	'PWD',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'START',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	436
	.byte	2,4,2,35,0,11
	.byte	'CAL',0,4
	.word	413
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	7,1,2,35,3,11
	.byte	'SLCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_DTSCON_Bits',0,7,213,1,3
	.word	39995
	.byte	10
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,7,216,1,16,4,11
	.byte	'LOWER',0,2
	.word	931
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	436
	.byte	5,1,2,35,1,11
	.byte	'LLU',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	931
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	436
	.byte	4,2,2,35,3,11
	.byte	'SLCK',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_DTSLIM_Bits',0,7,225,1,3
	.word	40160
	.byte	10
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,7,228,1,16,4,11
	.byte	'RESULT',0,2
	.word	931
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	436
	.byte	4,2,2,35,1,11
	.byte	'RDY',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'BUSY',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,7,235,1,3
	.word	40343
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,7,238,1,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	436
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	436
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	413
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	436
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	436
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EICR_Bits',0,7,129,2,3
	.word	40497
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,7,132,2,16,4,11
	.byte	'INTF0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	413
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_SCU_EIFR_Bits',0,7,143,2,3
	.word	40861
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,7,146,2,16,4,11
	.byte	'POL',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	931
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	436
	.byte	6,0,2,35,2,11
	.byte	'EMSFM',0,1
	.word	436
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	436
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	436
	.byte	4,0,2,35,3,0,30
	.byte	'Ifx_SCU_EMSR_Bits',0,7,159,2,3
	.word	41072
	.byte	10
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,7,162,2,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	931
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	413
	.byte	23,0,2,35,0,0,30
	.byte	'Ifx_SCU_ESRCFG_Bits',0,7,167,2,3
	.word	41324
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,7,170,2,16,4,11
	.byte	'ARI',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	413
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_SCU_ESROCFG_Bits',0,7,175,2,3
	.word	41442
	.byte	10
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,7,178,2,16,4,11
	.byte	'reserved_0',0,4
	.word	413
	.byte	28,4,2,35,0,11
	.byte	'EVR13OFF',0,1
	.word	436
	.byte	1,3,2,35,3,11
	.byte	'BPEVR13OFF',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVR13CON_Bits',0,7,185,2,3
	.word	41553
	.byte	10
	.byte	'_Ifx_SCU_EVR33CON_Bits',0,7,188,2,16,4,11
	.byte	'reserved_0',0,4
	.word	413
	.byte	28,4,2,35,0,11
	.byte	'EVR33OFF',0,1
	.word	436
	.byte	1,3,2,35,3,11
	.byte	'BPEVR33OFF',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVR33CON_Bits',0,7,195,2,3
	.word	41716
	.byte	10
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,7,198,2,16,4,11
	.byte	'ADC13V',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'ADC33V',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'ADCSWDV',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	7,1,2,35,3,11
	.byte	'VAL',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,7,205,2,3
	.word	41879
	.byte	10
	.byte	'_Ifx_SCU_EVRDVSTAT_Bits',0,7,208,2,16,4,11
	.byte	'DVS13TRIM',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'DVS33TRIM',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	7,1,2,35,3,11
	.byte	'VAL',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRDVSTAT_Bits',0,7,215,2,3
	.word	42037
	.byte	10
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,7,218,2,16,4,11
	.byte	'EVR13OVMOD',0,1
	.word	436
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	436
	.byte	2,4,2,35,0,11
	.byte	'EVR13UVMOD',0,1
	.word	436
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	436
	.byte	2,0,2,35,0,11
	.byte	'EVR33OVMOD',0,1
	.word	436
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	436
	.byte	2,4,2,35,1,11
	.byte	'EVR33UVMOD',0,1
	.word	436
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	436
	.byte	2,0,2,35,1,11
	.byte	'SWDOVMOD',0,1
	.word	436
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	436
	.byte	2,4,2,35,2,11
	.byte	'SWDUVMOD',0,1
	.word	436
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	931
	.byte	10,0,2,35,2,0,30
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,7,232,2,3
	.word	42202
	.byte	10
	.byte	'_Ifx_SCU_EVROSCCTRL_Bits',0,7,235,2,16,4,11
	.byte	'OSCTRIM',0,2
	.word	931
	.byte	10,6,2,35,0,11
	.byte	'OSCPTAT',0,1
	.word	436
	.byte	6,0,2,35,1,11
	.byte	'OSCANASEL',0,1
	.word	436
	.byte	4,4,2,35,2,11
	.byte	'HPBGTRIM',0,2
	.word	931
	.byte	7,5,2,35,2,11
	.byte	'HPBGCLKEN',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'OSC3V3',0,1
	.word	436
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	436
	.byte	2,1,2,35,3,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVROSCCTRL_Bits',0,7,245,2,3
	.word	42531
	.byte	10
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,7,248,2,16,4,11
	.byte	'EVR13OVVAL',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'EVR33OVVAL',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'SWDOVVAL',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVROVMON_Bits',0,7,255,2,3
	.word	42752
	.byte	10
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,7,130,3,16,4,11
	.byte	'RST13TRIM',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	413
	.byte	16,8,2,35,0,11
	.byte	'RST13OFF',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'BPRST13OFF',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'RST33OFF',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'BPRST33OFF',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'RSTSWDOFF',0,1
	.word	436
	.byte	1,3,2,35,3,11
	.byte	'BPRSTSWDOFF',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,7,142,3,3
	.word	42915
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF1_Bits',0,7,145,3,16,4,11
	.byte	'SD5P',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'SD5I',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'SD5D',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF1_Bits',0,7,152,3,3
	.word	43187
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,7,155,3,16,4,11
	.byte	'SD33P',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'SD33I',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'SD33D',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,7,162,3,3
	.word	43340
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF3_Bits',0,7,165,3,16,4,11
	.byte	'CT5REG0',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'CT5REG1',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'CT5REG2',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF3_Bits',0,7,172,3,3
	.word	43496
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF4_Bits',0,7,175,3,16,4,11
	.byte	'CT5REG3',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'CT5REG4',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF4_Bits',0,7,181,3,3
	.word	43658
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF5_Bits',0,7,184,3,16,4,11
	.byte	'CT33REG0',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'CT33REG1',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'CT33REG2',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF5_Bits',0,7,191,3,3
	.word	43801
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF6_Bits',0,7,194,3,16,4,11
	.byte	'CT33REG3',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'CT33REG4',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF6_Bits',0,7,200,3,3
	.word	43966
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,7,203,3,16,4,11
	.byte	'SDFREQSPRD',0,2
	.word	931
	.byte	16,0,2,35,0,11
	.byte	'SDFREQ',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'SDSTEP',0,1
	.word	436
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	436
	.byte	2,2,2,35,3,11
	.byte	'SDSAMPLE',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,7,211,3,3
	.word	44111
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,7,214,3,16,4,11
	.byte	'DRVP',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'SDMINMAXDC',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'DRVN',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'SDLUT',0,1
	.word	436
	.byte	6,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,7,222,3,3
	.word	44292
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,7,225,3,16,4,11
	.byte	'SDPWMPRE',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'SDPID',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'SDVOKLVL',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,7,232,3,3
	.word	44466
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL4_Bits',0,7,235,3,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'SYNCDIV',0,1
	.word	436
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	413
	.byte	20,1,2,35,0,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRSDCTRL4_Bits',0,7,241,3,3
	.word	44626
	.byte	10
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,7,244,3,16,4,11
	.byte	'EVR13',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'OV13',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'EVR33',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'OV33',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'OVSWD',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'UV13',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'UV33',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'UVSWD',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'EXTPASS13',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'EXTPASS33',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'BGPROK',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	413
	.byte	21,0,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,7,130,4,3
	.word	44770
	.byte	10
	.byte	'_Ifx_SCU_EVRTRIM_Bits',0,7,133,4,16,4,11
	.byte	'EVR13TRIM',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'SDVOUTSEL',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRTRIM_Bits',0,7,139,4,3
	.word	45044
	.byte	10
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,7,142,4,16,4,11
	.byte	'EVR13UVVAL',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'EVR33UVVAL',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'SWDUVVAL',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,7,149,4,3
	.word	45183
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,7,152,4,16,4,11
	.byte	'EN0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	436
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	931
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	436
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	436
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	436
	.byte	8,0,2,35,3,0,30
	.byte	'Ifx_SCU_EXTCON_Bits',0,7,163,4,3
	.word	45346
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,7,166,4,16,4,11
	.byte	'STEP',0,2
	.word	931
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	436
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	436
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	931
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	436
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_FDR_Bits',0,7,174,4,3
	.word	45564
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,7,177,4,16,4,11
	.byte	'FS0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	8,0,2,35,3,0,30
	.byte	'Ifx_SCU_FMR_Bits',0,7,197,4,3
	.word	45727
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,7,200,4,16,4,11
	.byte	'MODREV',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	931
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_ID_Bits',0,7,205,4,3
	.word	46063
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,7,208,4,16,4,11
	.byte	'IPEN00',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	436
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	436
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	436
	.byte	2,0,2,35,3,0,30
	.byte	'Ifx_SCU_IGCR_Bits',0,7,232,4,3
	.word	46170
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,7,235,4,16,4,11
	.byte	'P0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	413
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_SCU_IN_Bits',0,7,240,4,3
	.word	46622
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,7,243,4,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	436
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	436
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	436
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_IOCR_Bits',0,7,250,4,3
	.word	46721
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,7,253,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'LBISTREQP',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,2
	.word	931
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,7,131,5,3
	.word	46871
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,7,134,5,16,4,11
	.byte	'SEED',0,4
	.word	413
	.byte	23,9,2,35,0,11
	.byte	'reserved_23',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	436
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	436
	.byte	4,0,2,35,3,0,30
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,7,141,5,3
	.word	47020
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,7,144,5,16,4,11
	.byte	'SIGNATURE',0,4
	.word	413
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	7,1,2,35,3,11
	.byte	'LBISTDONE',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,7,149,5,3
	.word	47181
	.byte	10
	.byte	'_Ifx_SCU_LCLCON_Bits',0,7,152,5,16,4,11
	.byte	'reserved_0',0,2
	.word	931
	.byte	16,0,2,35,0,11
	.byte	'LS',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	931
	.byte	14,1,2,35,2,11
	.byte	'LSEN',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_LCLCON_Bits',0,7,158,5,3
	.word	47311
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,7,161,5,16,4,11
	.byte	'LCLT0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	413
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_SCU_LCLTEST_Bits',0,7,166,5,3
	.word	47443
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,7,169,5,16,4,11
	.byte	'DEPT',0,1
	.word	436
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	931
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_MANID_Bits',0,7,174,5,3
	.word	47558
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,7,177,5,16,4,11
	.byte	'PS0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	931
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	931
	.byte	14,0,2,35,2,0,30
	.byte	'Ifx_SCU_OMR_Bits',0,7,185,5,3
	.word	47669
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,7,188,5,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	436
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	436
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'X1D',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'X1DEN',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	436
	.byte	4,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	436
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	436
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	436
	.byte	4,0,2,35,3,0,30
	.byte	'Ifx_SCU_OSCCON_Bits',0,7,209,5,3
	.word	47827
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,7,212,5,16,4,11
	.byte	'P0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	413
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_SCU_OUT_Bits',0,7,217,5,3
	.word	48239
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,7,220,5,16,4,11
	.byte	'CSEL0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	931
	.byte	13,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	436
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	436
	.byte	6,0,2,35,3,0,30
	.byte	'Ifx_SCU_OVCCON_Bits',0,7,233,5,3
	.word	48340
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,7,236,5,16,4,11
	.byte	'OVEN0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	413
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,7,242,5,3
	.word	48607
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,7,245,5,16,4,11
	.byte	'PDIS0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	413
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_SCU_PDISC_Bits',0,7,250,5,3
	.word	48743
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,7,253,5,16,4,11
	.byte	'PD0',0,1
	.word	436
	.byte	3,5,2,35,0,11
	.byte	'PL0',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'PD1',0,1
	.word	436
	.byte	3,1,2,35,0,11
	.byte	'PL1',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	413
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_SCU_PDR_Bits',0,7,132,6,3
	.word	48854
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,7,135,6,16,4,11
	.byte	'PDR0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	413
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_SCU_PDRR_Bits',0,7,146,6,3
	.word	48987
	.byte	10
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,7,149,6,16,4,11
	.byte	'VCOBYP',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'VCOPWD',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'SETFINDIS',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'CLRFINDIS',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'OSCDISCDIS',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	931
	.byte	2,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	436
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	436
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	436
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	436
	.byte	4,0,2,35,3,0,30
	.byte	'Ifx_SCU_PLLCON0_Bits',0,7,166,6,3
	.word	49190
	.byte	10
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,7,169,6,16,4,11
	.byte	'K2DIV',0,1
	.word	436
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	436
	.byte	7,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'K1DIV',0,1
	.word	436
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	931
	.byte	9,0,2,35,2,0,30
	.byte	'Ifx_SCU_PLLCON1_Bits',0,7,177,6,3
	.word	49546
	.byte	10
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,7,180,6,16,4,11
	.byte	'MODCFG',0,2
	.word	931
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_PLLCON2_Bits',0,7,184,6,3
	.word	49724
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,7,187,6,16,4,11
	.byte	'VCOBYP',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'VCOPWD',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	436
	.byte	2,4,2,35,0,11
	.byte	'SETFINDIS',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'CLRFINDIS',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'OSCDISCDIS',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	931
	.byte	2,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	436
	.byte	5,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	436
	.byte	2,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	436
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	436
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	436
	.byte	4,0,2,35,3,0,30
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,7,204,6,3
	.word	49824
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,7,207,6,16,4,11
	.byte	'K2DIV',0,1
	.word	436
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	436
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	436
	.byte	4,0,2,35,1,11
	.byte	'K1DIV',0,1
	.word	436
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	931
	.byte	9,0,2,35,2,0,30
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,7,215,6,3
	.word	50194
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,7,218,6,16,4,11
	.byte	'VCOBYST',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'VCOLOCK',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'FINDIS',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'K1RDY',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	413
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,7,227,6,3
	.word	50380
	.byte	10
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,7,230,6,16,4,11
	.byte	'VCOBYST',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'VCOLOCK',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'FINDIS',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'K1RDY',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	413
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,7,241,6,3
	.word	50578
	.byte	10
	.byte	'_Ifx_SCU_PMCSR_Bits',0,7,244,6,16,4,11
	.byte	'REQSLP',0,1
	.word	436
	.byte	2,6,2,35,0,11
	.byte	'SMUSLP',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	436
	.byte	5,0,2,35,0,11
	.byte	'PMST',0,1
	.word	436
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	413
	.byte	21,0,2,35,0,0,30
	.byte	'Ifx_SCU_PMCSR_Bits',0,7,251,6,3
	.word	50811
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,7,254,6,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'ESR1WKEN',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'PINAWKEN',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'PINBWKEN',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'ESR0DFEN',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'ESR0EDCON',0,1
	.word	436
	.byte	2,1,2,35,0,11
	.byte	'ESR1DFEN',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'ESR1EDCON',0,1
	.word	436
	.byte	2,6,2,35,1,11
	.byte	'PINADFEN',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'PINAEDCON',0,1
	.word	436
	.byte	2,3,2,35,1,11
	.byte	'PINBDFEN',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'PINBEDCON',0,1
	.word	436
	.byte	2,0,2,35,1,11
	.byte	'SCREN',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'STBYRAMSEL',0,1
	.word	436
	.byte	2,5,2,35,2,11
	.byte	'SCRCLKSEL',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'SCRWKEN',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'TRISTEN',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'TRISTREQ',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'PORSTDF',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'DCDCSYNC',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	436
	.byte	3,3,2,35,3,11
	.byte	'ESR0TRIST',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,7,153,7,3
	.word	50963
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,7,156,7,16,4,11
	.byte	'SCRSTEN',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'SCRSTREQ',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	436
	.byte	6,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	436
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	436
	.byte	3,0,2,35,1,11
	.byte	'SCRCFG',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'CPUSEL',0,1
	.word	436
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	436
	.byte	3,1,2,35,3,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,7,170,7,3
	.word	51530
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR2_Bits',0,7,173,7,16,4,11
	.byte	'SCRINT',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'BUSY',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'SCRECC',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'SCRWDT',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'SCRRST',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	436
	.byte	4,0,2,35,1,11
	.byte	'TCINT',0,1
	.word	436
	.byte	8,0,2,35,2,11
	.byte	'TCINTREQ',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'SMURST',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'RST',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	436
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_PMSWCR2_Bits',0,7,187,7,3
	.word	51824
	.byte	10
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,7,190,7,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	2,6,2,35,0,11
	.byte	'ESR1WKP',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'ESR1OVRUN',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'PINAWKP',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'PINAOVRUN',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'PINBWKP',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'PINBOVRUN',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'PORSTDF',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'HWCFGEVR',0,1
	.word	436
	.byte	3,3,2,35,1,11
	.byte	'STBYRAM',0,1
	.word	436
	.byte	2,1,2,35,1,11
	.byte	'TRIST',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'SCRST',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'SCRWKP',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'SCR',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'SCRWKEN',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'ESR1WKEN',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'PINAWKEN',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'PINBWKEN',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	931
	.byte	4,5,2,35,2,11
	.byte	'ESR0TRIST',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	436
	.byte	4,0,2,35,3,0,30
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,7,214,7,3
	.word	52102
	.byte	10
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,7,217,7,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	2,6,2,35,0,11
	.byte	'ESR1WKPCLR',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'ESR1OVRUNCLR',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'PINAWKPCLR',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'PINAOVRUNCLR',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'PINBWKPCLR',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'PINBOVRUNCLR',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'SCRSTCLR',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'SCRWKPCLR',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	931
	.byte	14,0,2,35,2,0,30
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,7,230,7,3
	.word	52598
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,7,233,7,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	931
	.byte	10,4,2,35,0,11
	.byte	'CSS0',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'CSS1',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'CSS2',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	931
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_RSTCON2_Bits',0,7,243,7,3
	.word	52911
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,7,246,7,16,4,11
	.byte	'ESR0',0,1
	.word	436
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	436
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	436
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	436
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	436
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	436
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	436
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	436
	.byte	2,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_RSTCON_Bits',0,7,129,8,3
	.word	53120
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,7,132,8,16,4,11
	.byte	'ESR0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'PORST',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	436
	.byte	2,1,2,35,2,11
	.byte	'EVR13',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	436
	.byte	2,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	436
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	436
	.byte	3,0,2,35,3,0,30
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,7,155,8,3
	.word	53331
	.byte	10
	.byte	'_Ifx_SCU_SAFECON_Bits',0,7,158,8,16,4,11
	.byte	'HBT',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	413
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_SCU_SAFECON_Bits',0,7,162,8,3
	.word	53763
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,7,165,8,16,4,11
	.byte	'HWCFG',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	436
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	436
	.byte	3,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	436
	.byte	7,0,2,35,3,0,30
	.byte	'Ifx_SCU_STSTAT_Bits',0,7,178,8,3
	.word	53859
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,7,181,8,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	413
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,7,186,8,3
	.word	54119
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,7,189,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	436
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	436
	.byte	3,0,2,35,0,11
	.byte	'DATM',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	413
	.byte	23,0,2,35,0,0,30
	.byte	'Ifx_SCU_SYSCON_Bits',0,7,198,8,3
	.word	54244
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,7,201,8,16,4,11
	.byte	'ESR0T',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	413
	.byte	28,0,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,7,208,8,3
	.word	54441
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,7,211,8,16,4,11
	.byte	'ESR0T',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	413
	.byte	28,0,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,7,218,8,3
	.word	54594
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,7,221,8,16,4,11
	.byte	'ESR0T',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	413
	.byte	28,0,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPSET_Bits',0,7,228,8,3
	.word	54747
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,7,231,8,16,4,11
	.byte	'ESR0T',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	413
	.byte	28,0,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,7,238,8,3
	.word	54900
	.byte	30
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,7,247,8,3
	.word	1046
	.byte	30
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,7,134,9,3
	.word	1182
	.byte	30
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,7,150,9,3
	.word	1426
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,7,153,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	1030
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	1030
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	1030
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	1030
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,7,159,9,3
	.word	55155
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,7,162,9,16,4,11
	.byte	'CLRIRF',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	436
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,7,175,9,3
	.word	55281
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,7,178,9,16,4,11
	.byte	'AE',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	436
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	931
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,7,191,9,3
	.word	55533
	.byte	12,7,199,9,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37565
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_ACCEN0',0,7,204,9,3
	.word	55752
	.byte	12,7,207,9,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38122
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_ACCEN1',0,7,212,9,3
	.word	55816
	.byte	12,7,215,9,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38199
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_ARSTDIS',0,7,220,9,3
	.word	55880
	.byte	12,7,223,9,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38335
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON0',0,7,228,9,3
	.word	55945
	.byte	12,7,231,9,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38615
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON1',0,7,236,9,3
	.word	56010
	.byte	12,7,239,9,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38853
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON2',0,7,244,9,3
	.word	56075
	.byte	12,7,247,9,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38981
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON3',0,7,252,9,3
	.word	56140
	.byte	12,7,255,9,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39224
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON4',0,7,132,10,3
	.word	56205
	.byte	12,7,135,10,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39459
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON5',0,7,140,10,3
	.word	56270
	.byte	12,7,143,10,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39587
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON6',0,7,148,10,3
	.word	56335
	.byte	12,7,151,10,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39687
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON7',0,7,156,10,3
	.word	56400
	.byte	12,7,159,10,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39787
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CHIPID',0,7,164,10,3
	.word	56465
	.byte	12,7,167,10,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39995
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_DTSCON',0,7,172,10,3
	.word	56529
	.byte	12,7,175,10,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40160
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_DTSLIM',0,7,180,10,3
	.word	56593
	.byte	12,7,183,10,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40343
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_DTSSTAT',0,7,188,10,3
	.word	56657
	.byte	12,7,191,10,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40497
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EICR',0,7,196,10,3
	.word	56722
	.byte	12,7,199,10,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40861
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EIFR',0,7,204,10,3
	.word	56784
	.byte	12,7,207,10,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41072
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EMSR',0,7,212,10,3
	.word	56846
	.byte	12,7,215,10,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41324
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_ESRCFG',0,7,220,10,3
	.word	56908
	.byte	12,7,223,10,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41442
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_ESROCFG',0,7,228,10,3
	.word	56972
	.byte	12,7,231,10,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41553
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVR13CON',0,7,236,10,3
	.word	57037
	.byte	12,7,239,10,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41716
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVR33CON',0,7,244,10,3
	.word	57103
	.byte	12,7,247,10,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41879
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRADCSTAT',0,7,252,10,3
	.word	57169
	.byte	12,7,255,10,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42037
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRDVSTAT',0,7,132,11,3
	.word	57237
	.byte	12,7,135,11,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42202
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRMONCTRL',0,7,140,11,3
	.word	57304
	.byte	12,7,143,11,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42531
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVROSCCTRL',0,7,148,11,3
	.word	57372
	.byte	12,7,151,11,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42752
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVROVMON',0,7,156,11,3
	.word	57440
	.byte	12,7,159,11,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42915
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRRSTCON',0,7,164,11,3
	.word	57506
	.byte	12,7,167,11,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43187
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF1',0,7,172,11,3
	.word	57573
	.byte	12,7,175,11,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43340
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,7,180,11,3
	.word	57642
	.byte	12,7,183,11,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43496
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF3',0,7,188,11,3
	.word	57711
	.byte	12,7,191,11,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43658
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF4',0,7,196,11,3
	.word	57780
	.byte	12,7,199,11,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43801
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF5',0,7,204,11,3
	.word	57849
	.byte	12,7,207,11,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43966
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF6',0,7,212,11,3
	.word	57918
	.byte	12,7,215,11,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44111
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSDCTRL1',0,7,220,11,3
	.word	57987
	.byte	12,7,223,11,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44292
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSDCTRL2',0,7,228,11,3
	.word	58055
	.byte	12,7,231,11,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44466
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSDCTRL3',0,7,236,11,3
	.word	58123
	.byte	12,7,239,11,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44626
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSDCTRL4',0,7,244,11,3
	.word	58191
	.byte	12,7,247,11,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44770
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSTAT',0,7,252,11,3
	.word	58259
	.byte	12,7,255,11,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45044
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRTRIM',0,7,132,12,3
	.word	58324
	.byte	12,7,135,12,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45183
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRUVMON',0,7,140,12,3
	.word	58389
	.byte	12,7,143,12,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45346
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EXTCON',0,7,148,12,3
	.word	58455
	.byte	12,7,151,12,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45564
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_FDR',0,7,156,12,3
	.word	58519
	.byte	12,7,159,12,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45727
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_FMR',0,7,164,12,3
	.word	58580
	.byte	12,7,167,12,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46063
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_ID',0,7,172,12,3
	.word	58641
	.byte	12,7,175,12,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46170
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_IGCR',0,7,180,12,3
	.word	58701
	.byte	12,7,183,12,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46622
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_IN',0,7,188,12,3
	.word	58763
	.byte	12,7,191,12,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46721
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_IOCR',0,7,196,12,3
	.word	58823
	.byte	12,7,199,12,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46871
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_LBISTCTRL0',0,7,204,12,3
	.word	58885
	.byte	12,7,207,12,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47020
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_LBISTCTRL1',0,7,212,12,3
	.word	58953
	.byte	12,7,215,12,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47181
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_LBISTCTRL2',0,7,220,12,3
	.word	59021
	.byte	12,7,223,12,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47311
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_LCLCON',0,7,228,12,3
	.word	59089
	.byte	12,7,231,12,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47443
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_LCLTEST',0,7,236,12,3
	.word	59153
	.byte	12,7,239,12,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47558
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_MANID',0,7,244,12,3
	.word	59218
	.byte	12,7,247,12,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47669
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_OMR',0,7,252,12,3
	.word	59281
	.byte	12,7,255,12,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47827
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_OSCCON',0,7,132,13,3
	.word	59342
	.byte	12,7,135,13,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48239
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_OUT',0,7,140,13,3
	.word	59406
	.byte	12,7,143,13,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48340
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_OVCCON',0,7,148,13,3
	.word	59467
	.byte	12,7,151,13,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48607
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_OVCENABLE',0,7,156,13,3
	.word	59531
	.byte	12,7,159,13,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48743
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PDISC',0,7,164,13,3
	.word	59598
	.byte	12,7,167,13,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48854
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PDR',0,7,172,13,3
	.word	59661
	.byte	12,7,175,13,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48987
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PDRR',0,7,180,13,3
	.word	59722
	.byte	12,7,183,13,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49190
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PLLCON0',0,7,188,13,3
	.word	59784
	.byte	12,7,191,13,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49546
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PLLCON1',0,7,196,13,3
	.word	59849
	.byte	12,7,199,13,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49724
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PLLCON2',0,7,204,13,3
	.word	59914
	.byte	12,7,207,13,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49824
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PLLERAYCON0',0,7,212,13,3
	.word	59979
	.byte	12,7,215,13,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50194
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PLLERAYCON1',0,7,220,13,3
	.word	60048
	.byte	12,7,223,13,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50380
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PLLERAYSTAT',0,7,228,13,3
	.word	60117
	.byte	12,7,231,13,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50578
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PLLSTAT',0,7,236,13,3
	.word	60186
	.byte	12,7,239,13,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50811
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMCSR',0,7,244,13,3
	.word	60251
	.byte	12,7,247,13,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50963
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMSWCR0',0,7,252,13,3
	.word	60314
	.byte	12,7,255,13,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51530
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMSWCR1',0,7,132,14,3
	.word	60379
	.byte	12,7,135,14,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51824
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMSWCR2',0,7,140,14,3
	.word	60444
	.byte	12,7,143,14,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52102
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMSWSTAT',0,7,148,14,3
	.word	60509
	.byte	12,7,151,14,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52598
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMSWSTATCLR',0,7,156,14,3
	.word	60575
	.byte	12,7,159,14,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53120
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_RSTCON',0,7,164,14,3
	.word	60644
	.byte	12,7,167,14,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52911
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_RSTCON2',0,7,172,14,3
	.word	60708
	.byte	12,7,175,14,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53331
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_RSTSTAT',0,7,180,14,3
	.word	60773
	.byte	12,7,183,14,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53763
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_SAFECON',0,7,188,14,3
	.word	60838
	.byte	12,7,191,14,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53859
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_STSTAT',0,7,196,14,3
	.word	60903
	.byte	12,7,199,14,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54119
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_SWRSTCON',0,7,204,14,3
	.word	60967
	.byte	12,7,207,14,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54244
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_SYSCON',0,7,212,14,3
	.word	61033
	.byte	12,7,215,14,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54441
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPCLR',0,7,220,14,3
	.word	61097
	.byte	12,7,223,14,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54594
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPDIS',0,7,228,14,3
	.word	61162
	.byte	12,7,231,14,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54747
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPSET',0,7,236,14,3
	.word	61227
	.byte	12,7,239,14,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54900
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPSTAT',0,7,244,14,3
	.word	61292
	.byte	30
	.byte	'Ifx_SCU_WDTCPU_CON0',0,7,252,14,3
	.word	1142
	.byte	30
	.byte	'Ifx_SCU_WDTCPU_CON1',0,7,132,15,3
	.word	1386
	.byte	30
	.byte	'Ifx_SCU_WDTCPU_SR',0,7,140,15,3
	.word	1617
	.byte	12,7,143,15,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55155
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_WDTS_CON0',0,7,148,15,3
	.word	61443
	.byte	12,7,151,15,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55281
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_WDTS_CON1',0,7,156,15,3
	.word	61510
	.byte	12,7,159,15,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55533
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_WDTS_SR',0,7,164,15,3
	.word	61577
	.byte	14
	.word	1657
	.byte	30
	.byte	'Ifx_SCU_WDTCPU',0,7,180,15,3
	.word	61642
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,7,183,15,25,12,13
	.byte	'CON0',0
	.word	61443
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	61510
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	61577
	.byte	4,2,35,8,0,14
	.word	61671
	.byte	30
	.byte	'Ifx_SCU_WDTS',0,7,188,15,3
	.word	61732
	.byte	18,8
	.word	56908
	.byte	19,1,0,18,8
	.word	60251
	.byte	19,1,0,14
	.word	61671
	.byte	18,24
	.word	1657
	.byte	19,1,0,14
	.word	61782
	.byte	18,16
	.word	56722
	.byte	19,3,0,18,16
	.word	58701
	.byte	19,3,0,18,180,3
	.word	436
	.byte	19,179,3,0,10
	.byte	'_Ifx_SCU',0,7,201,15,25,128,8,13
	.byte	'reserved_0',0
	.word	5346
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	58641
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3527
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	59342
	.byte	4,2,35,16,13
	.byte	'PLLSTAT',0
	.word	60186
	.byte	4,2,35,20,13
	.byte	'PLLCON0',0
	.word	59784
	.byte	4,2,35,24,13
	.byte	'PLLCON1',0
	.word	59849
	.byte	4,2,35,28,13
	.byte	'PLLCON2',0
	.word	59914
	.byte	4,2,35,32,13
	.byte	'PLLERAYSTAT',0
	.word	60117
	.byte	4,2,35,36,13
	.byte	'PLLERAYCON0',0
	.word	59979
	.byte	4,2,35,40,13
	.byte	'PLLERAYCON1',0
	.word	60048
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	55945
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	56010
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	58519
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	58455
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	56075
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	56140
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	56205
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	56270
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	60773
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	3527
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	60644
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	55880
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	60967
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	60708
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	3527
	.byte	4,2,35,104,13
	.byte	'EVRRSTCON',0
	.word	57506
	.byte	4,2,35,108,13
	.byte	'ESRCFG',0
	.word	61759
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	56972
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	61033
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	56335
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	56400
	.byte	4,3,35,132,1,13
	.byte	'reserved_88',0
	.word	10739
	.byte	20,3,35,136,1,13
	.byte	'PDR',0
	.word	59661
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	58823
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	59406
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	59281
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	58763
	.byte	4,3,35,172,1,13
	.byte	'EVRSTAT',0
	.word	58259
	.byte	4,3,35,176,1,13
	.byte	'EVRDVSTAT',0
	.word	57237
	.byte	4,3,35,180,1,13
	.byte	'EVR13CON',0
	.word	57037
	.byte	4,3,35,184,1,13
	.byte	'EVR33CON',0
	.word	57103
	.byte	4,3,35,188,1,13
	.byte	'STSTAT',0
	.word	60903
	.byte	4,3,35,192,1,13
	.byte	'reserved_C4',0
	.word	3527
	.byte	4,3,35,196,1,13
	.byte	'PMSWCR0',0
	.word	60314
	.byte	4,3,35,200,1,13
	.byte	'PMSWSTAT',0
	.word	60509
	.byte	4,3,35,204,1,13
	.byte	'PMSWSTATCLR',0
	.word	60575
	.byte	4,3,35,208,1,13
	.byte	'PMCSR',0
	.word	61768
	.byte	8,3,35,212,1,13
	.byte	'reserved_DC',0
	.word	3527
	.byte	4,3,35,220,1,13
	.byte	'DTSSTAT',0
	.word	56657
	.byte	4,3,35,224,1,13
	.byte	'DTSCON',0
	.word	56529
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	60379
	.byte	4,3,35,232,1,13
	.byte	'PMSWCR2',0
	.word	60444
	.byte	4,3,35,236,1,13
	.byte	'WDTS',0
	.word	61777
	.byte	12,3,35,240,1,13
	.byte	'EMSR',0
	.word	56846
	.byte	4,3,35,252,1,13
	.byte	'WDTCPU',0
	.word	61791
	.byte	24,3,35,128,2,13
	.byte	'reserved_118',0
	.word	5686
	.byte	12,3,35,152,2,13
	.byte	'TRAPSTAT',0
	.word	61292
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	61227
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	61097
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS',0
	.word	61162
	.byte	4,3,35,176,2,13
	.byte	'reserved_134',0
	.word	3527
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	59089
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	59153
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	56465
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	59218
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	5346
	.byte	8,3,35,200,2,13
	.byte	'SAFECON',0
	.word	60838
	.byte	4,3,35,208,2,13
	.byte	'reserved_154',0
	.word	32367
	.byte	16,3,35,212,2,13
	.byte	'LBISTCTRL0',0
	.word	58885
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	58953
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	59021
	.byte	4,3,35,236,2,13
	.byte	'reserved_170',0
	.word	11016
	.byte	28,3,35,240,2,13
	.byte	'PDISC',0
	.word	59598
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	5346
	.byte	8,3,35,144,3,13
	.byte	'EVRTRIM',0
	.word	58324
	.byte	4,3,35,152,3,13
	.byte	'EVRADCSTAT',0
	.word	57169
	.byte	4,3,35,156,3,13
	.byte	'EVRUVMON',0
	.word	58389
	.byte	4,3,35,160,3,13
	.byte	'EVROVMON',0
	.word	57440
	.byte	4,3,35,164,3,13
	.byte	'EVRMONCTRL',0
	.word	57304
	.byte	4,3,35,168,3,13
	.byte	'reserved_1AC',0
	.word	3527
	.byte	4,3,35,172,3,13
	.byte	'EVRSDCTRL1',0
	.word	57987
	.byte	4,3,35,176,3,13
	.byte	'EVRSDCTRL2',0
	.word	58055
	.byte	4,3,35,180,3,13
	.byte	'EVRSDCTRL3',0
	.word	58123
	.byte	4,3,35,184,3,13
	.byte	'EVRSDCTRL4',0
	.word	58191
	.byte	4,3,35,188,3,13
	.byte	'EVRSDCOEFF1',0
	.word	57573
	.byte	4,3,35,192,3,13
	.byte	'EVRSDCOEFF2',0
	.word	57642
	.byte	4,3,35,196,3,13
	.byte	'EVRSDCOEFF3',0
	.word	57711
	.byte	4,3,35,200,3,13
	.byte	'EVRSDCOEFF4',0
	.word	57780
	.byte	4,3,35,204,3,13
	.byte	'EVRSDCOEFF5',0
	.word	57849
	.byte	4,3,35,208,3,13
	.byte	'EVRSDCOEFF6',0
	.word	57918
	.byte	4,3,35,212,3,13
	.byte	'EVROSCCTRL',0
	.word	57372
	.byte	4,3,35,216,3,13
	.byte	'reserved_1DC',0
	.word	3527
	.byte	4,3,35,220,3,13
	.byte	'OVCENABLE',0
	.word	59531
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	59467
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	32002
	.byte	40,3,35,232,3,13
	.byte	'EICR',0
	.word	61796
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	56784
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	58580
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	59722
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	61805
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	3527
	.byte	4,3,35,188,4,13
	.byte	'DTSLIM',0
	.word	56593
	.byte	4,3,35,192,4,13
	.byte	'reserved_244',0
	.word	61814
	.byte	180,3,3,35,196,4,13
	.byte	'ACCEN1',0
	.word	55816
	.byte	4,3,35,248,7,13
	.byte	'ACCEN0',0
	.word	55752
	.byte	4,3,35,252,7,0,14
	.word	61825
	.byte	30
	.byte	'Ifx_SCU',0,7,181,16,3
	.word	63815
	.byte	10
	.byte	'_Ifx_CPU_A_Bits',0,20,45,16,4,11
	.byte	'ADDR',0,4
	.word	1030
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_A_Bits',0,20,48,3
	.word	63837
	.byte	10
	.byte	'_Ifx_CPU_BIV_Bits',0,20,51,16,4,11
	.byte	'VSS',0,4
	.word	1030
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	1030
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_CPU_BIV_Bits',0,20,55,3
	.word	63898
	.byte	10
	.byte	'_Ifx_CPU_BTV_Bits',0,20,58,16,4,11
	.byte	'reserved_0',0,4
	.word	1030
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	1030
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_CPU_BTV_Bits',0,20,62,3
	.word	63977
	.byte	10
	.byte	'_Ifx_CPU_CCNT_Bits',0,20,65,16,4,11
	.byte	'CountValue',0,4
	.word	1030
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	1030
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_CCNT_Bits',0,20,69,3
	.word	64063
	.byte	10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,20,72,16,4,11
	.byte	'CM',0,4
	.word	1030
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	1030
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	1030
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	1030
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	1030
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	1030
	.byte	21,0,2,35,0,0,30
	.byte	'Ifx_CPU_CCTRL_Bits',0,20,80,3
	.word	64152
	.byte	10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,20,83,16,4,11
	.byte	'reserved_0',0,4
	.word	1030
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	1030
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	1030
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	1030
	.byte	27,0,2,35,0,0,30
	.byte	'Ifx_CPU_COMPAT_Bits',0,20,89,3
	.word	64298
	.byte	10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,20,92,16,4,11
	.byte	'CORE_ID',0,4
	.word	1030
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	1030
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_CPU_CORE_ID_Bits',0,20,96,3
	.word	64425
	.byte	10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,20,99,16,4,11
	.byte	'reserved_0',0,4
	.word	1030
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	1030
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_CPU_CPR_L_Bits',0,20,103,3
	.word	64523
	.byte	10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,20,106,16,4,11
	.byte	'reserved_0',0,4
	.word	1030
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	1030
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_CPU_CPR_U_Bits',0,20,110,3
	.word	64616
	.byte	10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,20,113,16,4,11
	.byte	'MODREV',0,4
	.word	1030
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	1030
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	1030
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_CPU_ID_Bits',0,20,118,3
	.word	64709
	.byte	10
	.byte	'_Ifx_CPU_CPXE_Bits',0,20,121,16,4,11
	.byte	'XE',0,4
	.word	1030
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	1030
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_CPU_CPXE_Bits',0,20,125,3
	.word	64816
	.byte	10
	.byte	'_Ifx_CPU_CREVT_Bits',0,20,128,1,16,4,11
	.byte	'EVTA',0,4
	.word	1030
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	1030
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	1030
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	1030
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	1030
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	1030
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_CPU_CREVT_Bits',0,20,136,1,3
	.word	64903
	.byte	10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,20,139,1,16,4,11
	.byte	'CID',0,4
	.word	1030
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	1030
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_CPU_CUS_ID_Bits',0,20,143,1,3
	.word	65057
	.byte	10
	.byte	'_Ifx_CPU_D_Bits',0,20,146,1,16,4,11
	.byte	'DATA',0,4
	.word	1030
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_D_Bits',0,20,149,1,3
	.word	65151
	.byte	10
	.byte	'_Ifx_CPU_DATR_Bits',0,20,152,1,16,4,11
	.byte	'reserved_0',0,4
	.word	1030
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	1030
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	1030
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	1030
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	1030
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	1030
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	1030
	.byte	1,17,2,35,0,11
	.byte	'SME',0,4
	.word	1030
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	1030
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_DATR_Bits',0,20,163,1,3
	.word	65214
	.byte	10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,20,166,1,16,4,11
	.byte	'DE',0,4
	.word	1030
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	1030
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	1030
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	1030
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	1030
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	1030
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	1030
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	1030
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	1030
	.byte	19,0,2,35,0,0,30
	.byte	'Ifx_CPU_DBGSR_Bits',0,20,177,1,3
	.word	65432
	.byte	10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,20,180,1,16,4,11
	.byte	'DTA',0,4
	.word	1030
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	1030
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_CPU_DBGTCR_Bits',0,20,184,1,3
	.word	65647
	.byte	10
	.byte	'_Ifx_CPU_DCON0_Bits',0,20,187,1,16,4,11
	.byte	'reserved_0',0,4
	.word	1030
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	1030
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	1030
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_CPU_DCON0_Bits',0,20,192,1,3
	.word	65741
	.byte	10
	.byte	'_Ifx_CPU_DCON2_Bits',0,20,195,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	1030
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	1030
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_DCON2_Bits',0,20,199,1,3
	.word	65857
	.byte	10
	.byte	'_Ifx_CPU_DCX_Bits',0,20,202,1,16,4,11
	.byte	'reserved_0',0,4
	.word	1030
	.byte	6,26,2,35,0,11
	.byte	'DCXValue',0,4
	.word	1030
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_CPU_DCX_Bits',0,20,206,1,3
	.word	65958
	.byte	10
	.byte	'_Ifx_CPU_DEADD_Bits',0,20,209,1,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	1030
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_DEADD_Bits',0,20,212,1,3
	.word	66051
	.byte	10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,20,215,1,16,4,11
	.byte	'TA',0,4
	.word	1030
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_DIEAR_Bits',0,20,218,1,3
	.word	66131
	.byte	10
	.byte	'_Ifx_CPU_DIETR_Bits',0,20,221,1,16,4,11
	.byte	'IED',0,4
	.word	1030
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	1030
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	1030
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	1030
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	1030
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	1030
	.byte	6,21,2,35,0,11
	.byte	'IE_DUAL',0,4
	.word	1030
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	1030
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	1030
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	1030
	.byte	18,0,2,35,0,0,30
	.byte	'Ifx_CPU_DIETR_Bits',0,20,233,1,3
	.word	66200
	.byte	10
	.byte	'_Ifx_CPU_DMS_Bits',0,20,236,1,16,4,11
	.byte	'reserved_0',0,4
	.word	1030
	.byte	1,31,2,35,0,11
	.byte	'DMSValue',0,4
	.word	1030
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_CPU_DMS_Bits',0,20,240,1,3
	.word	66429
	.byte	10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,20,243,1,16,4,11
	.byte	'reserved_0',0,4
	.word	1030
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	1030
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_CPU_DPR_L_Bits',0,20,247,1,3
	.word	66522
	.byte	10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,20,250,1,16,4,11
	.byte	'reserved_0',0,4
	.word	1030
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	1030
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_CPU_DPR_U_Bits',0,20,254,1,3
	.word	66617
	.byte	10
	.byte	'_Ifx_CPU_DPRE_Bits',0,20,129,2,16,4,11
	.byte	'RE',0,4
	.word	1030
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	1030
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_DPRE_Bits',0,20,133,2,3
	.word	66712
	.byte	10
	.byte	'_Ifx_CPU_DPWE_Bits',0,20,136,2,16,4,11
	.byte	'WE',0,4
	.word	1030
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	1030
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_DPWE_Bits',0,20,140,2,3
	.word	66802
	.byte	10
	.byte	'_Ifx_CPU_DSTR_Bits',0,20,143,2,16,4,11
	.byte	'SRE',0,4
	.word	1030
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	1030
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	1030
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	1030
	.byte	3,26,2,35,0,11
	.byte	'CRE',0,4
	.word	1030
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	1030
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	1030
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	1030
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	1030
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	1030
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	1030
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	1030
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	1030
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	1030
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	1030
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	1030
	.byte	7,0,2,35,0,0,30
	.byte	'Ifx_CPU_DSTR_Bits',0,20,161,2,3
	.word	66892
	.byte	10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,20,164,2,16,4,11
	.byte	'EVTA',0,4
	.word	1030
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	1030
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	1030
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	1030
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	1030
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	1030
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_CPU_EXEVT_Bits',0,20,172,2,3
	.word	67216
	.byte	10
	.byte	'_Ifx_CPU_FCX_Bits',0,20,175,2,16,4,11
	.byte	'FCXO',0,4
	.word	1030
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	1030
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	1030
	.byte	12,0,2,35,0,0,30
	.byte	'Ifx_CPU_FCX_Bits',0,20,180,2,3
	.word	67370
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,20,183,2,16,4,11
	.byte	'TST',0,4
	.word	1030
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	1030
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	1030
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	1030
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	1030
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	1030
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	1030
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	1030
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	1030
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	1030
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	1030
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	1030
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	1030
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	1030
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	1030
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	1030
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	1030
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,20,202,2,3
	.word	67476
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,20,205,2,16,4,11
	.byte	'OPC',0,4
	.word	1030
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	1030
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	1030
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	1030
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	1030
	.byte	12,0,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,20,212,2,3
	.word	67825
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,20,215,2,16,4,11
	.byte	'PC',0,4
	.word	1030
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,20,218,2,3
	.word	67985
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,20,221,2,16,4,11
	.byte	'SRC1',0,4
	.word	1030
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,20,224,2,3
	.word	68066
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,20,227,2,16,4,11
	.byte	'SRC2',0,4
	.word	1030
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,20,230,2,3
	.word	68153
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,20,233,2,16,4,11
	.byte	'SRC3',0,4
	.word	1030
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,20,236,2,3
	.word	68240
	.byte	10
	.byte	'_Ifx_CPU_ICNT_Bits',0,20,239,2,16,4,11
	.byte	'CountValue',0,4
	.word	1030
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	1030
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_ICNT_Bits',0,20,243,2,3
	.word	68327
	.byte	10
	.byte	'_Ifx_CPU_ICR_Bits',0,20,246,2,16,4,11
	.byte	'CCPN',0,4
	.word	1030
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	1030
	.byte	5,17,2,35,0,11
	.byte	'IE',0,4
	.word	1030
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	1030
	.byte	10,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	1030
	.byte	6,0,2,35,0,0,30
	.byte	'Ifx_CPU_ICR_Bits',0,20,253,2,3
	.word	68418
	.byte	10
	.byte	'_Ifx_CPU_ISP_Bits',0,20,128,3,16,4,11
	.byte	'ISP',0,4
	.word	1030
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_ISP_Bits',0,20,131,3,3
	.word	68561
	.byte	10
	.byte	'_Ifx_CPU_LCX_Bits',0,20,134,3,16,4,11
	.byte	'LCXO',0,4
	.word	1030
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	1030
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	1030
	.byte	12,0,2,35,0,0,30
	.byte	'Ifx_CPU_LCX_Bits',0,20,139,3,3
	.word	68627
	.byte	10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,20,142,3,16,4,11
	.byte	'CountValue',0,4
	.word	1030
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	1030
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_M1CNT_Bits',0,20,146,3,3
	.word	68733
	.byte	10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,20,149,3,16,4,11
	.byte	'CountValue',0,4
	.word	1030
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	1030
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_M2CNT_Bits',0,20,153,3,3
	.word	68826
	.byte	10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,20,156,3,16,4,11
	.byte	'CountValue',0,4
	.word	1030
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	1030
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_M3CNT_Bits',0,20,160,3,3
	.word	68919
	.byte	10
	.byte	'_Ifx_CPU_PC_Bits',0,20,163,3,16,4,11
	.byte	'reserved_0',0,4
	.word	1030
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	1030
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_CPU_PC_Bits',0,20,167,3,3
	.word	69012
	.byte	10
	.byte	'_Ifx_CPU_PCON0_Bits',0,20,170,3,16,4,11
	.byte	'reserved_0',0,4
	.word	1030
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	1030
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	1030
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_CPU_PCON0_Bits',0,20,175,3,3
	.word	69097
	.byte	10
	.byte	'_Ifx_CPU_PCON1_Bits',0,20,178,3,16,4,11
	.byte	'PCINV',0,4
	.word	1030
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	1030
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	1030
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_CPU_PCON1_Bits',0,20,183,3,3
	.word	69213
	.byte	10
	.byte	'_Ifx_CPU_PCON2_Bits',0,20,186,3,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	1030
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	1030
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_PCON2_Bits',0,20,190,3,3
	.word	69324
	.byte	10
	.byte	'_Ifx_CPU_PCXI_Bits',0,20,193,3,16,4,11
	.byte	'PCXO',0,4
	.word	1030
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	1030
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	1030
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	1030
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	1030
	.byte	10,0,2,35,0,0,30
	.byte	'Ifx_CPU_PCXI_Bits',0,20,200,3,3
	.word	69425
	.byte	10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,20,203,3,16,4,11
	.byte	'TA',0,4
	.word	1030
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_PIEAR_Bits',0,20,206,3,3
	.word	69555
	.byte	10
	.byte	'_Ifx_CPU_PIETR_Bits',0,20,209,3,16,4,11
	.byte	'IED',0,4
	.word	1030
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	1030
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	1030
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	1030
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	1030
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	1030
	.byte	6,21,2,35,0,11
	.byte	'IE_DUAL',0,4
	.word	1030
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	1030
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	1030
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	1030
	.byte	18,0,2,35,0,0,30
	.byte	'Ifx_CPU_PIETR_Bits',0,20,221,3,3
	.word	69624
	.byte	10
	.byte	'_Ifx_CPU_PMA0_Bits',0,20,224,3,16,4,11
	.byte	'reserved_0',0,4
	.word	1030
	.byte	13,19,2,35,0,11
	.byte	'DAC',0,4
	.word	1030
	.byte	3,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	1030
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_PMA0_Bits',0,20,229,3,3
	.word	69853
	.byte	10
	.byte	'_Ifx_CPU_PMA1_Bits',0,20,232,3,16,4,11
	.byte	'reserved_0',0,4
	.word	1030
	.byte	14,18,2,35,0,11
	.byte	'CAC',0,4
	.word	1030
	.byte	2,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	1030
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_PMA1_Bits',0,20,237,3,3
	.word	69966
	.byte	10
	.byte	'_Ifx_CPU_PMA2_Bits',0,20,240,3,16,4,11
	.byte	'PSI',0,4
	.word	1030
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	1030
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_PMA2_Bits',0,20,244,3,3
	.word	70079
	.byte	10
	.byte	'_Ifx_CPU_PSTR_Bits',0,20,247,3,16,4,11
	.byte	'FRE',0,4
	.word	1030
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	1030
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	1030
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	1030
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	1030
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	1030
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	1030
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	1030
	.byte	17,0,2,35,0,0,30
	.byte	'Ifx_CPU_PSTR_Bits',0,20,129,4,3
	.word	70170
	.byte	10
	.byte	'_Ifx_CPU_PSW_Bits',0,20,132,4,16,4,11
	.byte	'CDC',0,4
	.word	1030
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	1030
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	1030
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	1030
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	1030
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	1030
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	1030
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	1030
	.byte	12,5,2,35,0,11
	.byte	'SAV',0,4
	.word	1030
	.byte	1,4,2,35,0,11
	.byte	'AV',0,4
	.word	1030
	.byte	1,3,2,35,0,11
	.byte	'SV',0,4
	.word	1030
	.byte	1,2,2,35,0,11
	.byte	'V',0,4
	.word	1030
	.byte	1,1,2,35,0,11
	.byte	'C',0,4
	.word	1030
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_PSW_Bits',0,20,147,4,3
	.word	70373
	.byte	10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,20,150,4,16,4,11
	.byte	'ADFLIP',0,4
	.word	1030
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	1030
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	1030
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	1030
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_SEGEN_Bits',0,20,156,4,3
	.word	70616
	.byte	10
	.byte	'_Ifx_CPU_SMACON_Bits',0,20,159,4,16,4,11
	.byte	'PC',0,4
	.word	1030
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	1030
	.byte	1,30,2,35,0,11
	.byte	'PT',0,4
	.word	1030
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	1030
	.byte	5,24,2,35,0,11
	.byte	'DC',0,4
	.word	1030
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	1030
	.byte	1,22,2,35,0,11
	.byte	'DT',0,4
	.word	1030
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	1030
	.byte	13,8,2,35,0,11
	.byte	'IODT',0,4
	.word	1030
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	1030
	.byte	7,0,2,35,0,0,30
	.byte	'Ifx_CPU_SMACON_Bits',0,20,171,4,3
	.word	70744
	.byte	10
	.byte	'_Ifx_CPU_SPROT_ACCENA_Bits',0,20,174,4,16,4,11
	.byte	'EN',0,4
	.word	413
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_ACCENA_Bits',0,20,177,4,3
	.word	70985
	.byte	10
	.byte	'_Ifx_CPU_SPROT_ACCENB_Bits',0,20,180,4,16,4,11
	.byte	'reserved_0',0,4
	.word	413
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_ACCENB_Bits',0,20,183,4,3
	.word	71068
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,20,186,4,16,4,11
	.byte	'EN',0,4
	.word	413
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,20,189,4,3
	.word	71159
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,20,192,4,16,4,11
	.byte	'reserved_0',0,4
	.word	413
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,20,195,4,3
	.word	71250
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_LA_Bits',0,20,198,4,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	413
	.byte	27,0,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_RGN_LA_Bits',0,20,202,4,3
	.word	71349
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_UA_Bits',0,20,205,4,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	413
	.byte	27,0,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_RGN_UA_Bits',0,20,209,4,3
	.word	71456
	.byte	10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,20,212,4,16,4,11
	.byte	'EVTA',0,4
	.word	1030
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	1030
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	1030
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	1030
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	1030
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	1030
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_CPU_SWEVT_Bits',0,20,220,4,3
	.word	71563
	.byte	10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,20,223,4,16,4,11
	.byte	'FCDSF',0,4
	.word	1030
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	1030
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	1030
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	1030
	.byte	1,28,2,35,0,11
	.byte	'IT',0,4
	.word	1030
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	1030
	.byte	27,0,2,35,0,0,30
	.byte	'Ifx_CPU_SYSCON_Bits',0,20,231,4,3
	.word	71717
	.byte	10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,20,234,4,16,4,11
	.byte	'ASI',0,4
	.word	1030
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	1030
	.byte	27,0,2,35,0,0,30
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,20,238,4,3
	.word	71878
	.byte	10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,20,241,4,16,4,11
	.byte	'TEXP0',0,4
	.word	1030
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	1030
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	1030
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	1030
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	1030
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	1030
	.byte	15,0,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_CON_Bits',0,20,249,4,3
	.word	71976
	.byte	10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,20,252,4,16,4,11
	.byte	'Timer',0,4
	.word	1030
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,20,255,4,3
	.word	72148
	.byte	10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,20,130,5,16,4,11
	.byte	'ADDR',0,4
	.word	1030
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_TR_ADR_Bits',0,20,133,5,3
	.word	72228
	.byte	10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,20,136,5,16,4,11
	.byte	'EVTA',0,4
	.word	1030
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	1030
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	1030
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	1030
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	1030
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	1030
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	1030
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	1030
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	1030
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	1030
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	1030
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	1030
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	1030
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	1030
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	1030
	.byte	3,0,2,35,0,0,30
	.byte	'Ifx_CPU_TR_EVT_Bits',0,20,153,5,3
	.word	72301
	.byte	10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,20,156,5,16,4,11
	.byte	'T0',0,4
	.word	1030
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	1030
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	1030
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	1030
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	1030
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	1030
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	1030
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	1030
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	1030
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,20,167,5,3
	.word	72619
	.byte	12,20,175,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63837
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_A',0,20,180,5,3
	.word	72814
	.byte	12,20,183,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63898
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_BIV',0,20,188,5,3
	.word	72873
	.byte	12,20,191,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63977
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_BTV',0,20,196,5,3
	.word	72934
	.byte	12,20,199,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64063
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CCNT',0,20,204,5,3
	.word	72995
	.byte	12,20,207,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64152
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CCTRL',0,20,212,5,3
	.word	73057
	.byte	12,20,215,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64298
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_COMPAT',0,20,220,5,3
	.word	73120
	.byte	12,20,223,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64425
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CORE_ID',0,20,228,5,3
	.word	73184
	.byte	12,20,231,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64523
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CPR_L',0,20,236,5,3
	.word	73249
	.byte	12,20,239,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64616
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CPR_U',0,20,244,5,3
	.word	73312
	.byte	12,20,247,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64709
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CPU_ID',0,20,252,5,3
	.word	73375
	.byte	12,20,255,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64816
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CPXE',0,20,132,6,3
	.word	73439
	.byte	12,20,135,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64903
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CREVT',0,20,140,6,3
	.word	73501
	.byte	12,20,143,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65057
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CUS_ID',0,20,148,6,3
	.word	73564
	.byte	12,20,151,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65151
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_D',0,20,156,6,3
	.word	73628
	.byte	12,20,159,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65214
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DATR',0,20,164,6,3
	.word	73687
	.byte	12,20,167,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65432
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DBGSR',0,20,172,6,3
	.word	73749
	.byte	12,20,175,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65647
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DBGTCR',0,20,180,6,3
	.word	73812
	.byte	12,20,183,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65741
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DCON0',0,20,188,6,3
	.word	73876
	.byte	12,20,191,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65857
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DCON2',0,20,196,6,3
	.word	73939
	.byte	12,20,199,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65958
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DCX',0,20,204,6,3
	.word	74002
	.byte	12,20,207,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66051
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DEADD',0,20,212,6,3
	.word	74063
	.byte	12,20,215,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66131
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DIEAR',0,20,220,6,3
	.word	74126
	.byte	12,20,223,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66200
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DIETR',0,20,228,6,3
	.word	74189
	.byte	12,20,231,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66429
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DMS',0,20,236,6,3
	.word	74252
	.byte	12,20,239,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66522
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DPR_L',0,20,244,6,3
	.word	74313
	.byte	12,20,247,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66617
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DPR_U',0,20,252,6,3
	.word	74376
	.byte	12,20,255,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66712
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DPRE',0,20,132,7,3
	.word	74439
	.byte	12,20,135,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66802
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DPWE',0,20,140,7,3
	.word	74501
	.byte	12,20,143,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66892
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DSTR',0,20,148,7,3
	.word	74563
	.byte	12,20,151,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67216
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_EXEVT',0,20,156,7,3
	.word	74625
	.byte	12,20,159,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67370
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FCX',0,20,164,7,3
	.word	74688
	.byte	12,20,167,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67476
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,20,172,7,3
	.word	74749
	.byte	12,20,175,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67825
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,20,180,7,3
	.word	74819
	.byte	12,20,183,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67985
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,20,188,7,3
	.word	74889
	.byte	12,20,191,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68066
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,20,196,7,3
	.word	74958
	.byte	12,20,199,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68153
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,20,204,7,3
	.word	75029
	.byte	12,20,207,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68240
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,20,212,7,3
	.word	75100
	.byte	12,20,215,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68327
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_ICNT',0,20,220,7,3
	.word	75171
	.byte	12,20,223,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68418
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_ICR',0,20,228,7,3
	.word	75233
	.byte	12,20,231,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68561
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_ISP',0,20,236,7,3
	.word	75294
	.byte	12,20,239,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68627
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_LCX',0,20,244,7,3
	.word	75355
	.byte	12,20,247,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68733
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_M1CNT',0,20,252,7,3
	.word	75416
	.byte	12,20,255,7,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68826
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_M2CNT',0,20,132,8,3
	.word	75479
	.byte	12,20,135,8,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68919
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_M3CNT',0,20,140,8,3
	.word	75542
	.byte	12,20,143,8,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69012
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PC',0,20,148,8,3
	.word	75605
	.byte	12,20,151,8,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69097
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PCON0',0,20,156,8,3
	.word	75665
	.byte	12,20,159,8,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69213
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PCON1',0,20,164,8,3
	.word	75728
	.byte	12,20,167,8,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69324
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PCON2',0,20,172,8,3
	.word	75791
	.byte	12,20,175,8,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69425
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PCXI',0,20,180,8,3
	.word	75854
	.byte	12,20,183,8,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69555
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PIEAR',0,20,188,8,3
	.word	75916
	.byte	12,20,191,8,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69624
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PIETR',0,20,196,8,3
	.word	75979
	.byte	12,20,199,8,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69853
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PMA0',0,20,204,8,3
	.word	76042
	.byte	12,20,207,8,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69966
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PMA1',0,20,212,8,3
	.word	76104
	.byte	12,20,215,8,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70079
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PMA2',0,20,220,8,3
	.word	76166
	.byte	12,20,223,8,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70170
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PSTR',0,20,228,8,3
	.word	76228
	.byte	12,20,231,8,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70373
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PSW',0,20,236,8,3
	.word	76290
	.byte	12,20,239,8,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70616
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SEGEN',0,20,244,8,3
	.word	76351
	.byte	12,20,247,8,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70744
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SMACON',0,20,252,8,3
	.word	76414
	.byte	12,20,255,8,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70985
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_ACCENA',0,20,132,9,3
	.word	76478
	.byte	12,20,135,9,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71068
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_ACCENB',0,20,140,9,3
	.word	76548
	.byte	12,20,143,9,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71159
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA',0,20,148,9,3
	.word	76618
	.byte	12,20,151,9,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71250
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB',0,20,156,9,3
	.word	76692
	.byte	12,20,159,9,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71349
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_RGN_LA',0,20,164,9,3
	.word	76766
	.byte	12,20,167,9,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71456
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_RGN_UA',0,20,172,9,3
	.word	76836
	.byte	12,20,175,9,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71563
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SWEVT',0,20,180,9,3
	.word	76906
	.byte	12,20,183,9,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71717
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SYSCON',0,20,188,9,3
	.word	76969
	.byte	12,20,191,9,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71878
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TASK_ASI',0,20,196,9,3
	.word	77033
	.byte	12,20,199,9,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71976
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_CON',0,20,204,9,3
	.word	77099
	.byte	12,20,207,9,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72148
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_TIMER',0,20,212,9,3
	.word	77164
	.byte	12,20,215,9,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72228
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TR_ADR',0,20,220,9,3
	.word	77231
	.byte	12,20,223,9,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72301
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TR_EVT',0,20,228,9,3
	.word	77295
	.byte	12,20,231,9,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72619
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TRIG_ACC',0,20,236,9,3
	.word	77359
	.byte	10
	.byte	'_Ifx_CPU_CPR',0,20,247,9,25,8,13
	.byte	'L',0
	.word	73249
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	73312
	.byte	4,2,35,4,0,14
	.word	77425
	.byte	30
	.byte	'Ifx_CPU_CPR',0,20,251,9,3
	.word	77467
	.byte	10
	.byte	'_Ifx_CPU_DPR',0,20,254,9,25,8,13
	.byte	'L',0
	.word	74313
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	74376
	.byte	4,2,35,4,0,14
	.word	77493
	.byte	30
	.byte	'Ifx_CPU_DPR',0,20,130,10,3
	.word	77535
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN',0,20,133,10,25,16,13
	.byte	'LA',0
	.word	76766
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	76836
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	76618
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	76692
	.byte	4,2,35,12,0,14
	.word	77561
	.byte	30
	.byte	'Ifx_CPU_SPROT_RGN',0,20,139,10,3
	.word	77643
	.byte	18,12
	.word	77164
	.byte	19,2,0,10
	.byte	'_Ifx_CPU_TPS',0,20,142,10,25,16,13
	.byte	'CON',0
	.word	77099
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	77675
	.byte	12,2,35,4,0,14
	.word	77684
	.byte	30
	.byte	'Ifx_CPU_TPS',0,20,146,10,3
	.word	77732
	.byte	10
	.byte	'_Ifx_CPU_TR',0,20,149,10,25,8,13
	.byte	'EVT',0
	.word	77295
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	77231
	.byte	4,2,35,4,0,14
	.word	77758
	.byte	30
	.byte	'Ifx_CPU_TR',0,20,153,10,3
	.word	77803
	.byte	18,176,32
	.word	436
	.byte	19,175,32,0,18,208,223,1
	.word	436
	.byte	19,207,223,1,0,18,248,1
	.word	436
	.byte	19,247,1,0,18,244,29
	.word	436
	.byte	19,243,29,0,18,188,3
	.word	436
	.byte	19,187,3,0,18,232,3
	.word	436
	.byte	19,231,3,0,18,252,23
	.word	436
	.byte	19,251,23,0,18,228,63
	.word	436
	.byte	19,227,63,0,18,128,1
	.word	77493
	.byte	19,15,0,14
	.word	77918
	.byte	18,64
	.word	77425
	.byte	19,7,0,14
	.word	77933
	.byte	18,192,31
	.word	436
	.byte	19,191,31,0,18,16
	.word	73439
	.byte	19,3,0,18,16
	.word	74439
	.byte	19,3,0,18,16
	.word	74501
	.byte	19,3,0,18,208,7
	.word	436
	.byte	19,207,7,0,14
	.word	77684
	.byte	18,240,23
	.word	436
	.byte	19,239,23,0,18,64
	.word	77758
	.byte	19,7,0,14
	.word	78012
	.byte	18,192,23
	.word	436
	.byte	19,191,23,0,18,232,1
	.word	436
	.byte	19,231,1,0,18,180,1
	.word	436
	.byte	19,179,1,0,18,172,1
	.word	436
	.byte	19,171,1,0,18,64
	.word	73628
	.byte	19,15,0,18,64
	.word	436
	.byte	19,63,0,18,64
	.word	72814
	.byte	19,15,0,10
	.byte	'_Ifx_CPU',0,20,166,10,25,128,128,4,13
	.byte	'reserved_0',0
	.word	77828
	.byte	176,32,2,35,0,13
	.byte	'SEGEN',0
	.word	76351
	.byte	4,3,35,176,32,13
	.byte	'reserved_1034',0
	.word	77839
	.byte	208,223,1,3,35,180,32,13
	.byte	'TASK_ASI',0
	.word	77033
	.byte	4,4,35,132,128,2,13
	.byte	'reserved_8008',0
	.word	77852
	.byte	248,1,4,35,136,128,2,13
	.byte	'PMA0',0
	.word	76042
	.byte	4,4,35,128,130,2,13
	.byte	'PMA1',0
	.word	76104
	.byte	4,4,35,132,130,2,13
	.byte	'PMA2',0
	.word	76166
	.byte	4,4,35,136,130,2,13
	.byte	'reserved_810C',0
	.word	77863
	.byte	244,29,4,35,140,130,2,13
	.byte	'DCON2',0
	.word	73939
	.byte	4,4,35,128,160,2,13
	.byte	'reserved_9004',0
	.word	5346
	.byte	8,4,35,132,160,2,13
	.byte	'SMACON',0
	.word	76414
	.byte	4,4,35,140,160,2,13
	.byte	'DSTR',0
	.word	74563
	.byte	4,4,35,144,160,2,13
	.byte	'reserved_9014',0
	.word	3527
	.byte	4,4,35,148,160,2,13
	.byte	'DATR',0
	.word	73687
	.byte	4,4,35,152,160,2,13
	.byte	'DEADD',0
	.word	74063
	.byte	4,4,35,156,160,2,13
	.byte	'DIEAR',0
	.word	74126
	.byte	4,4,35,160,160,2,13
	.byte	'DIETR',0
	.word	74189
	.byte	4,4,35,164,160,2,13
	.byte	'reserved_9028',0
	.word	4717
	.byte	24,4,35,168,160,2,13
	.byte	'DCON0',0
	.word	73876
	.byte	4,4,35,192,160,2,13
	.byte	'reserved_9044',0
	.word	77874
	.byte	188,3,4,35,196,160,2,13
	.byte	'PSTR',0
	.word	76228
	.byte	4,4,35,128,164,2,13
	.byte	'PCON1',0
	.word	75728
	.byte	4,4,35,132,164,2,13
	.byte	'PCON2',0
	.word	75791
	.byte	4,4,35,136,164,2,13
	.byte	'PCON0',0
	.word	75665
	.byte	4,4,35,140,164,2,13
	.byte	'PIEAR',0
	.word	75916
	.byte	4,4,35,144,164,2,13
	.byte	'PIETR',0
	.word	75979
	.byte	4,4,35,148,164,2,13
	.byte	'reserved_9218',0
	.word	77885
	.byte	232,3,4,35,152,164,2,13
	.byte	'COMPAT',0
	.word	73120
	.byte	4,4,35,128,168,2,13
	.byte	'reserved_9404',0
	.word	77896
	.byte	252,23,4,35,132,168,2,13
	.byte	'FPU_TRAP_CON',0
	.word	74749
	.byte	4,4,35,128,192,2,13
	.byte	'FPU_TRAP_PC',0
	.word	74889
	.byte	4,4,35,132,192,2,13
	.byte	'FPU_TRAP_OPC',0
	.word	74819
	.byte	4,4,35,136,192,2,13
	.byte	'reserved_A00C',0
	.word	3527
	.byte	4,4,35,140,192,2,13
	.byte	'FPU_TRAP_SRC1',0
	.word	74958
	.byte	4,4,35,144,192,2,13
	.byte	'FPU_TRAP_SRC2',0
	.word	75029
	.byte	4,4,35,148,192,2,13
	.byte	'FPU_TRAP_SRC3',0
	.word	75100
	.byte	4,4,35,152,192,2,13
	.byte	'reserved_A01C',0
	.word	77907
	.byte	228,63,4,35,156,192,2,13
	.byte	'DPR',0
	.word	77928
	.byte	128,1,4,35,128,128,3,13
	.byte	'reserved_C080',0
	.word	17460
	.byte	128,31,4,35,128,129,3,13
	.byte	'CPR',0
	.word	77942
	.byte	64,4,35,128,160,3,13
	.byte	'reserved_D040',0
	.word	77947
	.byte	192,31,4,35,192,160,3,13
	.byte	'CPXE',0
	.word	77958
	.byte	16,4,35,128,192,3,13
	.byte	'DPRE',0
	.word	77967
	.byte	16,4,35,144,192,3,13
	.byte	'DPWE',0
	.word	77976
	.byte	16,4,35,160,192,3,13
	.byte	'reserved_E030',0
	.word	77985
	.byte	208,7,4,35,176,192,3,13
	.byte	'TPS',0
	.word	77996
	.byte	16,4,35,128,200,3,13
	.byte	'reserved_E410',0
	.word	78001
	.byte	240,23,4,35,144,200,3,13
	.byte	'TR',0
	.word	78021
	.byte	64,4,35,128,224,3,13
	.byte	'reserved_F040',0
	.word	78026
	.byte	192,23,4,35,192,224,3,13
	.byte	'CCTRL',0
	.word	73057
	.byte	4,4,35,128,248,3,13
	.byte	'CCNT',0
	.word	72995
	.byte	4,4,35,132,248,3,13
	.byte	'ICNT',0
	.word	75171
	.byte	4,4,35,136,248,3,13
	.byte	'M1CNT',0
	.word	75416
	.byte	4,4,35,140,248,3,13
	.byte	'M2CNT',0
	.word	75479
	.byte	4,4,35,144,248,3,13
	.byte	'M3CNT',0
	.word	75542
	.byte	4,4,35,148,248,3,13
	.byte	'reserved_FC18',0
	.word	78037
	.byte	232,1,4,35,152,248,3,13
	.byte	'DBGSR',0
	.word	73749
	.byte	4,4,35,128,250,3,13
	.byte	'reserved_FD04',0
	.word	3527
	.byte	4,4,35,132,250,3,13
	.byte	'EXEVT',0
	.word	74625
	.byte	4,4,35,136,250,3,13
	.byte	'CREVT',0
	.word	73501
	.byte	4,4,35,140,250,3,13
	.byte	'SWEVT',0
	.word	76906
	.byte	4,4,35,144,250,3,13
	.byte	'reserved_FD14',0
	.word	11016
	.byte	28,4,35,148,250,3,13
	.byte	'TRIG_ACC',0
	.word	77359
	.byte	4,4,35,176,250,3,13
	.byte	'reserved_FD34',0
	.word	5686
	.byte	12,4,35,180,250,3,13
	.byte	'DMS',0
	.word	74252
	.byte	4,4,35,192,250,3,13
	.byte	'DCX',0
	.word	74002
	.byte	4,4,35,196,250,3,13
	.byte	'DBGTCR',0
	.word	73812
	.byte	4,4,35,200,250,3,13
	.byte	'reserved_FD4C',0
	.word	78048
	.byte	180,1,4,35,204,250,3,13
	.byte	'PCXI',0
	.word	75854
	.byte	4,4,35,128,252,3,13
	.byte	'PSW',0
	.word	76290
	.byte	4,4,35,132,252,3,13
	.byte	'PC',0
	.word	75605
	.byte	4,4,35,136,252,3,13
	.byte	'reserved_FE0C',0
	.word	5346
	.byte	8,4,35,140,252,3,13
	.byte	'SYSCON',0
	.word	76969
	.byte	4,4,35,148,252,3,13
	.byte	'CPU_ID',0
	.word	73375
	.byte	4,4,35,152,252,3,13
	.byte	'CORE_ID',0
	.word	73184
	.byte	4,4,35,156,252,3,13
	.byte	'BIV',0
	.word	72873
	.byte	4,4,35,160,252,3,13
	.byte	'BTV',0
	.word	72934
	.byte	4,4,35,164,252,3,13
	.byte	'ISP',0
	.word	75294
	.byte	4,4,35,168,252,3,13
	.byte	'ICR',0
	.word	75233
	.byte	4,4,35,172,252,3,13
	.byte	'reserved_FE30',0
	.word	5346
	.byte	8,4,35,176,252,3,13
	.byte	'FCX',0
	.word	74688
	.byte	4,4,35,184,252,3,13
	.byte	'LCX',0
	.word	75355
	.byte	4,4,35,188,252,3,13
	.byte	'reserved_FE40',0
	.word	32367
	.byte	16,4,35,192,252,3,13
	.byte	'CUS_ID',0
	.word	73564
	.byte	4,4,35,208,252,3,13
	.byte	'reserved_FE54',0
	.word	78059
	.byte	172,1,4,35,212,252,3,13
	.byte	'D',0
	.word	78070
	.byte	64,4,35,128,254,3,13
	.byte	'reserved_FF40',0
	.word	78079
	.byte	64,4,35,192,254,3,13
	.byte	'A',0
	.word	78088
	.byte	64,4,35,128,255,3,13
	.byte	'reserved_FFC0',0
	.word	78079
	.byte	64,4,35,192,255,3,0,14
	.word	78097
	.byte	30
	.byte	'Ifx_CPU',0,20,130,11,3
	.word	79888
	.byte	15,9,127,9,1,16
	.byte	'IfxCpu_Id_0',0,0,16
	.byte	'IfxCpu_Id_1',0,1,16
	.byte	'IfxCpu_Id_none',0,2,0,30
	.byte	'IfxCpu_Id',0,9,132,1,3
	.word	79910
	.byte	30
	.byte	'IfxCpu_ResourceCpu',0,9,161,1,3
	.word	2135
	.byte	10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,21,45,16,4,11
	.byte	'EN0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	436
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_STM_ACCEN0_Bits',0,21,79,3
	.word	80008
	.byte	10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,21,82,16,4,11
	.byte	'reserved_0',0,4
	.word	413
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_ACCEN1_Bits',0,21,85,3
	.word	80565
	.byte	10
	.byte	'_Ifx_STM_CAP_Bits',0,21,88,16,4,11
	.byte	'STMCAP63_32',0,4
	.word	413
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_CAP_Bits',0,21,91,3
	.word	80642
	.byte	10
	.byte	'_Ifx_STM_CAPSV_Bits',0,21,94,16,4,11
	.byte	'STMCAP63_32',0,4
	.word	413
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_CAPSV_Bits',0,21,97,3
	.word	80714
	.byte	10
	.byte	'_Ifx_STM_CLC_Bits',0,21,100,16,4,11
	.byte	'DISR',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	413
	.byte	28,0,2,35,0,0,30
	.byte	'Ifx_STM_CLC_Bits',0,21,107,3
	.word	80790
	.byte	10
	.byte	'_Ifx_STM_CMCON_Bits',0,21,110,16,4,11
	.byte	'MSIZE0',0,1
	.word	436
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	436
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	436
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	436
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	436
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	436
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	436
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	436
	.byte	3,0,2,35,3,0,30
	.byte	'Ifx_STM_CMCON_Bits',0,21,120,3
	.word	80931
	.byte	10
	.byte	'_Ifx_STM_CMP_Bits',0,21,123,16,4,11
	.byte	'CMPVAL',0,4
	.word	413
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_CMP_Bits',0,21,126,3
	.word	81149
	.byte	10
	.byte	'_Ifx_STM_ICR_Bits',0,21,129,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	413
	.byte	25,0,2,35,0,0,30
	.byte	'Ifx_STM_ICR_Bits',0,21,139,1,3
	.word	81216
	.byte	10
	.byte	'_Ifx_STM_ID_Bits',0,21,142,1,16,4,11
	.byte	'MODREV',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	931
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_STM_ID_Bits',0,21,147,1,3
	.word	81419
	.byte	10
	.byte	'_Ifx_STM_ISCR_Bits',0,21,150,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	413
	.byte	28,0,2,35,0,0,30
	.byte	'Ifx_STM_ISCR_Bits',0,21,157,1,3
	.word	81526
	.byte	10
	.byte	'_Ifx_STM_KRST0_Bits',0,21,160,1,16,4,11
	.byte	'RST',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	413
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_STM_KRST0_Bits',0,21,165,1,3
	.word	81677
	.byte	10
	.byte	'_Ifx_STM_KRST1_Bits',0,21,168,1,16,4,11
	.byte	'RST',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	413
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_STM_KRST1_Bits',0,21,172,1,3
	.word	81788
	.byte	10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,21,175,1,16,4,11
	.byte	'CLR',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	413
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_STM_KRSTCLR_Bits',0,21,179,1,3
	.word	81880
	.byte	10
	.byte	'_Ifx_STM_OCS_Bits',0,21,182,1,16,4,11
	.byte	'reserved_0',0,4
	.word	413
	.byte	24,8,2,35,0,11
	.byte	'SUS',0,1
	.word	436
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	436
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	436
	.byte	2,0,2,35,3,0,30
	.byte	'Ifx_STM_OCS_Bits',0,21,189,1,3
	.word	81976
	.byte	10
	.byte	'_Ifx_STM_TIM0_Bits',0,21,192,1,16,4,11
	.byte	'STM31_0',0,4
	.word	413
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM0_Bits',0,21,195,1,3
	.word	82122
	.byte	10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,21,198,1,16,4,11
	.byte	'STM31_0',0,4
	.word	413
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM0SV_Bits',0,21,201,1,3
	.word	82194
	.byte	10
	.byte	'_Ifx_STM_TIM1_Bits',0,21,204,1,16,4,11
	.byte	'STM35_4',0,4
	.word	413
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM1_Bits',0,21,207,1,3
	.word	82270
	.byte	10
	.byte	'_Ifx_STM_TIM2_Bits',0,21,210,1,16,4,11
	.byte	'STM39_8',0,4
	.word	413
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM2_Bits',0,21,213,1,3
	.word	82342
	.byte	10
	.byte	'_Ifx_STM_TIM3_Bits',0,21,216,1,16,4,11
	.byte	'STM43_12',0,4
	.word	413
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM3_Bits',0,21,219,1,3
	.word	82414
	.byte	10
	.byte	'_Ifx_STM_TIM4_Bits',0,21,222,1,16,4,11
	.byte	'STM47_16',0,4
	.word	413
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM4_Bits',0,21,225,1,3
	.word	82487
	.byte	10
	.byte	'_Ifx_STM_TIM5_Bits',0,21,228,1,16,4,11
	.byte	'STM51_20',0,4
	.word	413
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM5_Bits',0,21,231,1,3
	.word	82560
	.byte	10
	.byte	'_Ifx_STM_TIM6_Bits',0,21,234,1,16,4,11
	.byte	'STM63_32',0,4
	.word	413
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM6_Bits',0,21,237,1,3
	.word	82633
	.byte	12,21,245,1,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80008
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_ACCEN0',0,21,250,1,3
	.word	82706
	.byte	12,21,253,1,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80565
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_ACCEN1',0,21,130,2,3
	.word	82770
	.byte	12,21,133,2,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80642
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_CAP',0,21,138,2,3
	.word	82834
	.byte	12,21,141,2,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80714
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_CAPSV',0,21,146,2,3
	.word	82895
	.byte	12,21,149,2,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80790
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_CLC',0,21,154,2,3
	.word	82958
	.byte	12,21,157,2,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80931
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_CMCON',0,21,162,2,3
	.word	83019
	.byte	12,21,165,2,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81149
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_CMP',0,21,170,2,3
	.word	83082
	.byte	12,21,173,2,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81216
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_ICR',0,21,178,2,3
	.word	83143
	.byte	12,21,181,2,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81419
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_ID',0,21,186,2,3
	.word	83204
	.byte	12,21,189,2,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81526
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_ISCR',0,21,194,2,3
	.word	83264
	.byte	12,21,197,2,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81677
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_KRST0',0,21,202,2,3
	.word	83326
	.byte	12,21,205,2,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81788
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_KRST1',0,21,210,2,3
	.word	83389
	.byte	12,21,213,2,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81880
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_KRSTCLR',0,21,218,2,3
	.word	83452
	.byte	12,21,221,2,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81976
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_OCS',0,21,226,2,3
	.word	83517
	.byte	12,21,229,2,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82122
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM0',0,21,234,2,3
	.word	83578
	.byte	12,21,237,2,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82194
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM0SV',0,21,242,2,3
	.word	83640
	.byte	12,21,245,2,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82270
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM1',0,21,250,2,3
	.word	83704
	.byte	12,21,253,2,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82342
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM2',0,21,130,3,3
	.word	83766
	.byte	12,21,133,3,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82414
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM3',0,21,138,3,3
	.word	83828
	.byte	12,21,141,3,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82487
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM4',0,21,146,3,3
	.word	83890
	.byte	12,21,149,3,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82560
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM5',0,21,154,3,3
	.word	83952
	.byte	12,21,157,3,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82633
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM6',0,21,162,3,3
	.word	84014
	.byte	15,8,144,1,9,1,16
	.byte	'IfxCpu_CounterMode_normal',0,0,16
	.byte	'IfxCpu_CounterMode_task',0,1,0,30
	.byte	'IfxCpu_CounterMode',0,8,148,1,3
	.word	84076
	.byte	29,8,160,1,9,6,13
	.byte	'counter',0
	.word	2290
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	436
	.byte	1,2,35,4,0,30
	.byte	'IfxCpu_Counter',0,8,164,1,3
	.word	84165
	.byte	29,8,172,1,9,32,13
	.byte	'instruction',0
	.word	84165
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	84165
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	84165
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	84165
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	84165
	.byte	6,2,35,24,0,30
	.byte	'IfxCpu_Perf',0,8,179,1,3
	.word	84231
	.byte	10
	.byte	'_Ifx_FLASH_ACCEN0_Bits',0,22,45,16,4,11
	.byte	'EN0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	436
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_ACCEN0_Bits',0,22,79,3
	.word	84349
	.byte	10
	.byte	'_Ifx_FLASH_ACCEN1_Bits',0,22,82,16,4,11
	.byte	'reserved_0',0,4
	.word	413
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_FLASH_ACCEN1_Bits',0,22,85,3
	.word	84910
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_CFG_Bits',0,22,88,16,4,11
	.byte	'SEL',0,1
	.word	436
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	436
	.byte	2,0,2,35,0,11
	.byte	'CLR',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'DIS',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	413
	.byte	22,0,2,35,0,0,30
	.byte	'Ifx_FLASH_CBAB_CFG_Bits',0,22,95,3
	.word	84991
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_STAT_Bits',0,22,98,16,4,11
	.byte	'VLD0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'VLD1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'VLD2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'VLD3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'VLD4',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'VLD5',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'VLD6',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'VLD7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'VLD8',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'VLD9',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	413
	.byte	22,0,2,35,0,0,30
	.byte	'Ifx_FLASH_CBAB_STAT_Bits',0,22,111,3
	.word	85144
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_TOP_Bits',0,22,114,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	413
	.byte	19,8,2,35,0,11
	.byte	'ERR',0,1
	.word	436
	.byte	6,2,2,35,3,11
	.byte	'VLD',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'CLR',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_CBAB_TOP_Bits',0,22,121,3
	.word	85392
	.byte	10
	.byte	'_Ifx_FLASH_COMM0_Bits',0,22,124,16,4,11
	.byte	'STATUS',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	413
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_FLASH_COMM0_Bits',0,22,128,1,3
	.word	85538
	.byte	10
	.byte	'_Ifx_FLASH_COMM1_Bits',0,22,131,1,16,4,11
	.byte	'STATUS',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'DATA',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_FLASH_COMM1_Bits',0,22,136,1,3
	.word	85636
	.byte	10
	.byte	'_Ifx_FLASH_COMM2_Bits',0,22,139,1,16,4,11
	.byte	'STATUS',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'DATA',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_FLASH_COMM2_Bits',0,22,144,1,3
	.word	85752
	.byte	10
	.byte	'_Ifx_FLASH_ECCRD_Bits',0,22,147,1,16,4,11
	.byte	'RCODE',0,4
	.word	413
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	931
	.byte	8,2,2,35,2,11
	.byte	'EDCERRINJ',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'ECCORDIS',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_ECCRD_Bits',0,22,153,1,3
	.word	85868
	.byte	10
	.byte	'_Ifx_FLASH_ECCRP_Bits',0,22,156,1,16,4,11
	.byte	'RCODE',0,4
	.word	413
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	931
	.byte	8,2,2,35,2,11
	.byte	'EDCERRINJ',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'ECCORDIS',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_ECCRP_Bits',0,22,162,1,3
	.word	86008
	.byte	10
	.byte	'_Ifx_FLASH_ECCW_Bits',0,22,165,1,16,4,11
	.byte	'WCODE',0,4
	.word	413
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	931
	.byte	8,2,2,35,2,11
	.byte	'DECENCDIS',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'PECENCDIS',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_ECCW_Bits',0,22,171,1,3
	.word	86148
	.byte	10
	.byte	'_Ifx_FLASH_FCON_Bits',0,22,174,1,16,4,11
	.byte	'WSPFLASH',0,1
	.word	436
	.byte	4,4,2,35,0,11
	.byte	'WSECPF',0,1
	.word	436
	.byte	2,2,2,35,0,11
	.byte	'WSDFLASH',0,2
	.word	931
	.byte	6,4,2,35,0,11
	.byte	'WSECDF',0,1
	.word	436
	.byte	3,1,2,35,1,11
	.byte	'IDLE',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'ESLDIS',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'SLEEP',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'NSAFECC',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'STALL',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'RES21',0,1
	.word	436
	.byte	2,2,2,35,2,11
	.byte	'RES23',0,1
	.word	436
	.byte	2,0,2,35,2,11
	.byte	'VOPERM',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'SQERM',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'PROERM',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	436
	.byte	3,2,2,35,3,11
	.byte	'PR5V',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'EOBM',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_FCON_Bits',0,22,193,1,3
	.word	86287
	.byte	10
	.byte	'_Ifx_FLASH_FPRO_Bits',0,22,196,1,16,4,11
	.byte	'PROINP',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'PRODISP',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'PROIND',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'PRODISD',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'PROINHSMCOTP',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'RES5',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'PROINOTP',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'RES7',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'PROINDBG',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'PRODISDBG',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'PROINHSM',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	436
	.byte	5,0,2,35,1,11
	.byte	'DCFP',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'DDFP',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'DDFPX',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'DDFD',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'ENPE',0,1
	.word	436
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	436
	.byte	8,0,2,35,3,0,30
	.byte	'Ifx_FLASH_FPRO_Bits',0,22,218,1,3
	.word	86649
	.byte	10
	.byte	'_Ifx_FLASH_FSR_Bits',0,22,221,1,16,4,11
	.byte	'FABUSY',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'D0BUSY',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'RES1',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'P0BUSY',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'P1BUSY',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'RES5',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'RES6',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'PROG',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'ERASE',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'PFPAGE',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'DFPAGE',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'OPER',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'SQER',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'PROER',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'PFSBER',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'PFDBER',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'PFMBER',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'RES17',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'DFSBER',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'DFDBER',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'DFTBER',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'DFMBER',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'SRIADDERR',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	931
	.byte	2,7,2,35,2,11
	.byte	'PVER',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'EVER',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'SPND',0,1
	.word	436
	.byte	1,4,2,35,3,11
	.byte	'SLM',0,1
	.word	436
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	436
	.byte	1,2,2,35,3,11
	.byte	'ORIER',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_FSR_Bits',0,22,254,1,3
	.word	87090
	.byte	10
	.byte	'_Ifx_FLASH_ID_Bits',0,22,129,2,16,4,11
	.byte	'MODREV',0,1
	.word	436
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	436
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	931
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_FLASH_ID_Bits',0,22,134,2,3
	.word	87696
	.byte	10
	.byte	'_Ifx_FLASH_MARD_Bits',0,22,137,2,16,4,11
	.byte	'HMARGIN',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'SELD0',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'SPND',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'SPNDERR',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,2
	.word	931
	.byte	10,1,2,35,0,11
	.byte	'TRAPDIS',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_FLASH_MARD_Bits',0,22,147,2,3
	.word	87807
	.byte	10
	.byte	'_Ifx_FLASH_MARP_Bits',0,22,150,2,16,4,11
	.byte	'SELP0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'SELP1',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'RES2',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'RES3',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	931
	.byte	11,1,2,35,0,11
	.byte	'TRAPDIS',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_FLASH_MARP_Bits',0,22,159,2,3
	.word	88021
	.byte	10
	.byte	'_Ifx_FLASH_PROCOND_Bits',0,22,162,2,16,4,11
	.byte	'L',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'NSAFECC',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'RAMIN',0,1
	.word	436
	.byte	2,4,2,35,0,11
	.byte	'RAMINSEL',0,1
	.word	436
	.byte	4,0,2,35,0,11
	.byte	'OSCCFG',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'MODE',0,1
	.word	436
	.byte	2,5,2,35,1,11
	.byte	'APREN',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'CAP0EN',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'CAP1EN',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'CAP2EN',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'CAP3EN',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'ESR0CNT',0,2
	.word	931
	.byte	12,4,2,35,2,11
	.byte	'RES29',0,1
	.word	436
	.byte	2,2,2,35,3,11
	.byte	'RES30',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'RPRO',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_PROCOND_Bits',0,22,179,2,3
	.word	88208
	.byte	10
	.byte	'_Ifx_FLASH_PROCONDBG_Bits',0,22,182,2,16,4,11
	.byte	'OCDSDIS',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'DBGIFLCK',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'EDM',0,1
	.word	436
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	413
	.byte	28,0,2,35,0,0,30
	.byte	'Ifx_FLASH_PROCONDBG_Bits',0,22,188,2,3
	.word	88532
	.byte	10
	.byte	'_Ifx_FLASH_PROCONHSM_Bits',0,22,191,2,16,4,11
	.byte	'HSMDBGDIS',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'DBGIFLCK',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'TSTIFLCK',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'HSMTSTDIS',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'RES15',0,2
	.word	931
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	931
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_FLASH_PROCONHSM_Bits',0,22,199,2,3
	.word	88675
	.byte	10
	.byte	'_Ifx_FLASH_PROCONHSMCOTP_Bits',0,22,202,2,16,4,11
	.byte	'HSMBOOTEN',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'SSWWAIT',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'HSMDX',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'HSM6X',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'HSM16X',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'HSM17X',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'S6ROM',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'HSMENPINS',0,2
	.word	931
	.byte	2,7,2,35,0,11
	.byte	'HSMENRES',0,1
	.word	436
	.byte	2,5,2,35,1,11
	.byte	'DESTDBG',0,1
	.word	436
	.byte	2,3,2,35,1,11
	.byte	'BLKFLAN',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	436
	.byte	2,0,2,35,1,11
	.byte	'S16ROM',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'S17ROM',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	931
	.byte	14,0,2,35,2,0,30
	.byte	'Ifx_FLASH_PROCONHSMCOTP_Bits',0,22,219,2,3
	.word	88864
	.byte	10
	.byte	'_Ifx_FLASH_PROCONOTP_Bits',0,22,222,2,16,4,11
	.byte	'S0ROM',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'S1ROM',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'S2ROM',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'S3ROM',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'S4ROM',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'S5ROM',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'S6ROM',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'S7ROM',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'S8ROM',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'S9ROM',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'S10ROM',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'S11ROM',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'S12ROM',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'S13ROM',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'S14ROM',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'S15ROM',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'S16ROM',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'S17ROM',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'S18ROM',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'S19ROM',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'S20ROM',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'S21ROM',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'S22ROM',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'S23ROM',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'S24ROM',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'S25ROM',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'S26ROM',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	436
	.byte	2,3,2,35,3,11
	.byte	'BML',0,1
	.word	436
	.byte	2,1,2,35,3,11
	.byte	'TP',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_PROCONOTP_Bits',0,22,254,2,3
	.word	89227
	.byte	10
	.byte	'_Ifx_FLASH_PROCONP_Bits',0,22,129,3,16,4,11
	.byte	'S0L',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'S1L',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'S2L',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'S3L',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'S4L',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'S5L',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'S6L',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'S7L',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'S8L',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'S9L',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'S10L',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'S11L',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'S12L',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'S13L',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'S14L',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'S15L',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'S16L',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'S17L',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'S18L',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'S19L',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'S20L',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'S21L',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'S22L',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'S23L',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'S24L',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'S25L',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'S26L',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	436
	.byte	4,1,2,35,3,11
	.byte	'RPRO',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_PROCONP_Bits',0,22,160,3,3
	.word	89822
	.byte	10
	.byte	'_Ifx_FLASH_PROCONWOP_Bits',0,22,163,3,16,4,11
	.byte	'S0WOP',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'S1WOP',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'S2WOP',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'S3WOP',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'S4WOP',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'S5WOP',0,1
	.word	436
	.byte	1,2,2,35,0,11
	.byte	'S6WOP',0,1
	.word	436
	.byte	1,1,2,35,0,11
	.byte	'S7WOP',0,1
	.word	436
	.byte	1,0,2,35,0,11
	.byte	'S8WOP',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'S9WOP',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'S10WOP',0,1
	.word	436
	.byte	1,5,2,35,1,11
	.byte	'S11WOP',0,1
	.word	436
	.byte	1,4,2,35,1,11
	.byte	'S12WOP',0,1
	.word	436
	.byte	1,3,2,35,1,11
	.byte	'S13WOP',0,1
	.word	436
	.byte	1,2,2,35,1,11
	.byte	'S14WOP',0,1
	.word	436
	.byte	1,1,2,35,1,11
	.byte	'S15WOP',0,1
	.word	436
	.byte	1,0,2,35,1,11
	.byte	'S16WOP',0,1
	.word	436
	.byte	1,7,2,35,2,11
	.byte	'S17WOP',0,1
	.word	436
	.byte	1,6,2,35,2,11
	.byte	'S18WOP',0,1
	.word	436
	.byte	1,5,2,35,2,11
	.byte	'S19WOP',0,1
	.word	436
	.byte	1,4,2,35,2,11
	.byte	'S20WOP',0,1
	.word	436
	.byte	1,3,2,35,2,11
	.byte	'S21WOP',0,1
	.word	436
	.byte	1,2,2,35,2,11
	.byte	'S22WOP',0,1
	.word	436
	.byte	1,1,2,35,2,11
	.byte	'S23WOP',0,1
	.word	436
	.byte	1,0,2,35,2,11
	.byte	'S24WOP',0,1
	.word	436
	.byte	1,7,2,35,3,11
	.byte	'S25WOP',0,1
	.word	436
	.byte	1,6,2,35,3,11
	.byte	'S26WOP',0,1
	.word	436
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	436
	.byte	4,1,2,35,3,11
	.byte	'DATM',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_PROCONWOP_Bits',0,22,194,3,3
	.word	90346
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG0_Bits',0,22,197,3,16,4,11
	.byte	'TAG',0,1
	.word	436
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	413
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_FLASH_RDB_CFG0_Bits',0,22,201,3,3
	.word	90928
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG1_Bits',0,22,204,3,16,4,11
	.byte	'TAG',0,1
	.word	436
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	413
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_FLASH_RDB_CFG1_Bits',0,22,208,3,3
	.word	91030
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG2_Bits',0,22,211,3,16,4,11
	.byte	'TAG',0,1
	.word	436
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	413
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_FLASH_RDB_CFG2_Bits',0,22,215,3,3
	.word	91132
	.byte	10
	.byte	'_Ifx_FLASH_RRAD_Bits',0,22,218,3,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	3,5,2,35,0,11
	.byte	'ADD',0,4
	.word	413
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_FLASH_RRAD_Bits',0,22,222,3,3
	.word	91234
	.byte	10
	.byte	'_Ifx_FLASH_RRCT_Bits',0,22,225,3,16,4,11
	.byte	'STRT',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'STP',0,1
	.word	436
	.byte	1,6,2,35,0,11
	.byte	'BUSY',0,1
	.word	436
	.byte	1,5,2,35,0,11
	.byte	'DONE',0,1
	.word	436
	.byte	1,4,2,35,0,11
	.byte	'ERR',0,1
	.word	436
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	436
	.byte	3,0,2,35,0,11
	.byte	'EOBM',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	436
	.byte	7,0,2,35,1,11
	.byte	'CNT',0,2
	.word	931
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_FLASH_RRCT_Bits',0,22,236,3,3
	.word	91328
	.byte	10
	.byte	'_Ifx_FLASH_RRD0_Bits',0,22,239,3,16,4,11
	.byte	'DATA',0,4
	.word	413
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_FLASH_RRD0_Bits',0,22,242,3,3
	.word	91538
	.byte	10
	.byte	'_Ifx_FLASH_RRD1_Bits',0,22,245,3,16,4,11
	.byte	'DATA',0,4
	.word	413
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_FLASH_RRD1_Bits',0,22,248,3,3
	.word	91611
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_CFG_Bits',0,22,251,3,16,4,11
	.byte	'SEL',0,1
	.word	436
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	436
	.byte	2,0,2,35,0,11
	.byte	'CLR',0,1
	.word	436
	.byte	1,7,2,35,1,11
	.byte	'DIS',0,1
	.word	436
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	413
	.byte	22,0,2,35,0,0,30
	.byte	'Ifx_FLASH_UBAB_CFG_Bits',0,22,130,4,3
	.word	91684
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_STAT_Bits',0,22,133,4,16,4,11
	.byte	'VLD0',0,1
	.word	436
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	413
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_FLASH_UBAB_STAT_Bits',0,22,137,4,3
	.word	91839
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_TOP_Bits',0,22,140,4,16,4,11
	.byte	'reserved_0',0,1
	.word	436
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	413
	.byte	19,8,2,35,0,11
	.byte	'ERR',0,1
	.word	436
	.byte	6,2,2,35,3,11
	.byte	'VLD',0,1
	.word	436
	.byte	1,1,2,35,3,11
	.byte	'CLR',0,1
	.word	436
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_UBAB_TOP_Bits',0,22,147,4,3
	.word	91944
	.byte	12,22,155,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84349
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_ACCEN0',0,22,160,4,3
	.word	92092
	.byte	12,22,163,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84910
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_ACCEN1',0,22,168,4,3
	.word	92158
	.byte	12,22,171,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84991
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_CBAB_CFG',0,22,176,4,3
	.word	92224
	.byte	12,22,179,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85144
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_CBAB_STAT',0,22,184,4,3
	.word	92292
	.byte	12,22,187,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85392
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_CBAB_TOP',0,22,192,4,3
	.word	92361
	.byte	12,22,195,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85538
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_COMM0',0,22,200,4,3
	.word	92429
	.byte	12,22,203,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85636
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_COMM1',0,22,208,4,3
	.word	92494
	.byte	12,22,211,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85752
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_COMM2',0,22,216,4,3
	.word	92559
	.byte	12,22,219,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85868
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_ECCRD',0,22,224,4,3
	.word	92624
	.byte	12,22,227,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86008
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_ECCRP',0,22,232,4,3
	.word	92689
	.byte	12,22,235,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86148
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_ECCW',0,22,240,4,3
	.word	92754
	.byte	12,22,243,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86287
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_FCON',0,22,248,4,3
	.word	92818
	.byte	12,22,251,4,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86649
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_FPRO',0,22,128,5,3
	.word	92882
	.byte	12,22,131,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87090
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_FSR',0,22,136,5,3
	.word	92946
	.byte	12,22,139,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87696
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_ID',0,22,144,5,3
	.word	93009
	.byte	12,22,147,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87807
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_MARD',0,22,152,5,3
	.word	93071
	.byte	12,22,155,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88021
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_MARP',0,22,160,5,3
	.word	93135
	.byte	12,22,163,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88208
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_PROCOND',0,22,168,5,3
	.word	93199
	.byte	12,22,171,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88532
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_PROCONDBG',0,22,176,5,3
	.word	93266
	.byte	12,22,179,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88675
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_PROCONHSM',0,22,184,5,3
	.word	93335
	.byte	12,22,187,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88864
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_PROCONHSMCOTP',0,22,192,5,3
	.word	93404
	.byte	12,22,195,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89227
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_PROCONOTP',0,22,200,5,3
	.word	93477
	.byte	12,22,203,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89822
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_PROCONP',0,22,208,5,3
	.word	93546
	.byte	12,22,211,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90346
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_PROCONWOP',0,22,216,5,3
	.word	93613
	.byte	12,22,219,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90928
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_RDB_CFG0',0,22,224,5,3
	.word	93682
	.byte	12,22,227,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91030
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_RDB_CFG1',0,22,232,5,3
	.word	93750
	.byte	12,22,235,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91132
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_RDB_CFG2',0,22,240,5,3
	.word	93818
	.byte	12,22,243,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91234
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_RRAD',0,22,248,5,3
	.word	93886
	.byte	12,22,251,5,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91328
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_RRCT',0,22,128,6,3
	.word	93950
	.byte	12,22,131,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91538
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_RRD0',0,22,136,6,3
	.word	94014
	.byte	12,22,139,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91611
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_RRD1',0,22,144,6,3
	.word	94078
	.byte	12,22,147,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91684
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_UBAB_CFG',0,22,152,6,3
	.word	94142
	.byte	12,22,155,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91839
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_UBAB_STAT',0,22,160,6,3
	.word	94210
	.byte	12,22,163,6,9,4,13
	.byte	'U',0
	.word	413
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91944
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_UBAB_TOP',0,22,168,6,3
	.word	94279
	.byte	10
	.byte	'_Ifx_FLASH_CBAB',0,22,179,6,25,12,13
	.byte	'CFG',0
	.word	92224
	.byte	4,2,35,0,13
	.byte	'STAT',0
	.word	92292
	.byte	4,2,35,4,13
	.byte	'TOP',0
	.word	92361
	.byte	4,2,35,8,0,14
	.word	94347
	.byte	30
	.byte	'Ifx_FLASH_CBAB',0,22,184,6,3
	.word	94410
	.byte	10
	.byte	'_Ifx_FLASH_RDB',0,22,187,6,25,12,13
	.byte	'CFG0',0
	.word	93682
	.byte	4,2,35,0,13
	.byte	'CFG1',0
	.word	93750
	.byte	4,2,35,4,13
	.byte	'CFG2',0
	.word	93818
	.byte	4,2,35,8,0,14
	.word	94439
	.byte	30
	.byte	'Ifx_FLASH_RDB',0,22,192,6,3
	.word	94503
	.byte	10
	.byte	'_Ifx_FLASH_UBAB',0,22,195,6,25,12,13
	.byte	'CFG',0
	.word	94142
	.byte	4,2,35,0,13
	.byte	'STAT',0
	.word	94210
	.byte	4,2,35,4,13
	.byte	'TOP',0
	.word	94279
	.byte	4,2,35,8,0,14
	.word	94531
	.byte	30
	.byte	'Ifx_FLASH_UBAB',0,22,200,6,3
	.word	94594
	.byte	30
	.byte	'Ifx_P_ACCEN0_Bits',0,11,79,3
	.word	9099
	.byte	30
	.byte	'Ifx_P_ACCEN1_Bits',0,11,85,3
	.word	9012
	.byte	30
	.byte	'Ifx_P_ESR_Bits',0,11,107,3
	.word	5355
	.byte	30
	.byte	'Ifx_P_ID_Bits',0,11,115,3
	.word	3408
	.byte	30
	.byte	'Ifx_P_IN_Bits',0,11,137,1,3
	.word	4403
	.byte	30
	.byte	'Ifx_P_IOCR0_Bits',0,11,150,1,3
	.word	3536
	.byte	30
	.byte	'Ifx_P_IOCR12_Bits',0,11,163,1,3
	.word	4183
	.byte	30
	.byte	'Ifx_P_IOCR4_Bits',0,11,176,1,3
	.word	3751
	.byte	30
	.byte	'Ifx_P_IOCR8_Bits',0,11,189,1,3
	.word	3966
	.byte	30
	.byte	'Ifx_P_LPCR0_Bits',0,11,197,1,3
	.word	8371
	.byte	30
	.byte	'Ifx_P_LPCR1_Bits',0,11,205,1,3
	.word	8495
	.byte	30
	.byte	'Ifx_P_LPCR1_P21_Bits',0,11,215,1,3
	.word	8579
	.byte	30
	.byte	'Ifx_P_LPCR2_Bits',0,11,229,1,3
	.word	8759
	.byte	30
	.byte	'Ifx_P_OMCR0_Bits',0,11,240,1,3
	.word	7010
	.byte	30
	.byte	'Ifx_P_OMCR12_Bits',0,11,250,1,3
	.word	7534
	.byte	30
	.byte	'Ifx_P_OMCR4_Bits',0,11,133,2,3
	.word	7184
	.byte	30
	.byte	'Ifx_P_OMCR8_Bits',0,11,144,2,3
	.word	7358
	.byte	30
	.byte	'Ifx_P_OMCR_Bits',0,11,166,2,3
	.word	8023
	.byte	30
	.byte	'Ifx_P_OMR_Bits',0,11,203,2,3
	.word	2837
	.byte	30
	.byte	'Ifx_P_OMSR0_Bits',0,11,213,2,3
	.word	6347
	.byte	30
	.byte	'Ifx_P_OMSR12_Bits',0,11,224,2,3
	.word	6835
	.byte	30
	.byte	'Ifx_P_OMSR4_Bits',0,11,235,2,3
	.word	6494
	.byte	30
	.byte	'Ifx_P_OMSR8_Bits',0,11,246,2,3
	.word	6663
	.byte	30
	.byte	'Ifx_P_OMSR_Bits',0,11,140,3,3
	.word	7690
	.byte	30
	.byte	'Ifx_P_OUT_Bits',0,11,162,3,3
	.word	2521
	.byte	30
	.byte	'Ifx_P_PCSR_Bits',0,11,180,3,3
	.word	6061
	.byte	30
	.byte	'Ifx_P_PDISC_Bits',0,11,202,3,3
	.word	5695
	.byte	30
	.byte	'Ifx_P_PDR0_Bits',0,11,223,3,3
	.word	4726
	.byte	30
	.byte	'Ifx_P_PDR1_Bits',0,11,244,3,3
	.word	5030
	.byte	30
	.byte	'Ifx_P_ACCEN0',0,11,129,4,3
	.word	9626
	.byte	30
	.byte	'Ifx_P_ACCEN1',0,11,137,4,3
	.word	9059
	.byte	30
	.byte	'Ifx_P_ESR',0,11,145,4,3
	.word	5646
	.byte	30
	.byte	'Ifx_P_ID',0,11,153,4,3
	.word	3487
	.byte	30
	.byte	'Ifx_P_IN',0,11,161,4,3
	.word	4677
	.byte	30
	.byte	'Ifx_P_IOCR0',0,11,169,4,3
	.word	3711
	.byte	30
	.byte	'Ifx_P_IOCR12',0,11,177,4,3
	.word	4363
	.byte	30
	.byte	'Ifx_P_IOCR4',0,11,185,4,3
	.word	3926
	.byte	30
	.byte	'Ifx_P_IOCR8',0,11,193,4,3
	.word	4143
	.byte	30
	.byte	'Ifx_P_LPCR0',0,11,201,4,3
	.word	8455
	.byte	30
	.byte	'Ifx_P_LPCR1',0,11,210,4,3
	.word	8704
	.byte	30
	.byte	'Ifx_P_LPCR2',0,11,218,4,3
	.word	8963
	.byte	30
	.byte	'Ifx_P_OMCR',0,11,226,4,3
	.word	8331
	.byte	30
	.byte	'Ifx_P_OMCR0',0,11,234,4,3
	.word	7144
	.byte	30
	.byte	'Ifx_P_OMCR12',0,11,242,4,3
	.word	7650
	.byte	30
	.byte	'Ifx_P_OMCR4',0,11,250,4,3
	.word	7318
	.byte	30
	.byte	'Ifx_P_OMCR8',0,11,130,5,3
	.word	7494
	.byte	30
	.byte	'Ifx_P_OMR',0,11,138,5,3
	.word	3368
	.byte	30
	.byte	'Ifx_P_OMSR',0,11,146,5,3
	.word	7983
	.byte	30
	.byte	'Ifx_P_OMSR0',0,11,154,5,3
	.word	6454
	.byte	30
	.byte	'Ifx_P_OMSR12',0,11,162,5,3
	.word	6970
	.byte	30
	.byte	'Ifx_P_OMSR4',0,11,170,5,3
	.word	6623
	.byte	30
	.byte	'Ifx_P_OMSR8',0,11,178,5,3
	.word	6795
	.byte	30
	.byte	'Ifx_P_OUT',0,11,186,5,3
	.word	2797
	.byte	30
	.byte	'Ifx_P_PCSR',0,11,194,5,3
	.word	6307
	.byte	30
	.byte	'Ifx_P_PDISC',0,11,202,5,3
	.word	6021
	.byte	30
	.byte	'Ifx_P_PDR0',0,11,210,5,3
	.word	4990
	.byte	30
	.byte	'Ifx_P_PDR1',0,11,218,5,3
	.word	5306
	.byte	14
	.word	9666
	.byte	30
	.byte	'Ifx_P',0,11,139,6,3
	.word	95941
	.byte	15,10,83,9,1,16
	.byte	'IfxPort_InputMode_undefined',0,127,16
	.byte	'IfxPort_InputMode_noPullDevice',0,0,16
	.byte	'IfxPort_InputMode_pullDown',0,8,16
	.byte	'IfxPort_InputMode_pullUp',0,16,0,30
	.byte	'IfxPort_InputMode',0,10,89,3
	.word	95961
	.byte	15,10,120,9,1,16
	.byte	'IfxPort_OutputIdx_general',0,128,1,16
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,16
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,16
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,16
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,16
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,16
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,16
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,30
	.byte	'IfxPort_OutputIdx',0,10,130,1,3
	.word	96112
	.byte	15,10,134,1,9,1,16
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,16
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,30
	.byte	'IfxPort_OutputMode',0,10,138,1,3
	.word	96356
	.byte	15,10,144,1,9,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,16
	.byte	'IfxPort_PadDriver_lvdsSpeed1',0,4,16
	.byte	'IfxPort_PadDriver_lvdsSpeed2',0,5,16
	.byte	'IfxPort_PadDriver_lvdsSpeed3',0,6,16
	.byte	'IfxPort_PadDriver_lvdsSpeed4',0,7,16
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,16
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,16
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,16
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,0,30
	.byte	'IfxPort_PadDriver',0,10,158,1,3
	.word	96454
	.byte	30
	.byte	'IfxPort_State',0,10,178,1,3
	.word	10279
	.byte	29,10,190,1,9,8,13
	.byte	'port',0
	.word	10274
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	436
	.byte	1,2,35,4,0,30
	.byte	'IfxPort_Pin',0,10,194,1,3
	.word	96919
	.byte	30
	.byte	'IfxScuCcu_PllStepsFunctionHook',0,23,148,1,16
	.word	152
	.byte	29,23,212,5,9,8,13
	.byte	'value',0
	.word	2290
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	2290
	.byte	4,2,35,4,0,30
	.byte	'IfxScuCcu_CcuconRegConfig',0,23,216,5,3
	.word	97019
	.byte	29,23,221,5,9,8,13
	.byte	'pDivider',0
	.word	436
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	436
	.byte	1,2,35,1,13
	.byte	'k2Initial',0
	.word	436
	.byte	1,2,35,2,13
	.byte	'waitTime',0
	.word	209
	.byte	4,2,35,4,0,30
	.byte	'IfxScuCcu_InitialStepConfig',0,23,227,5,3
	.word	97090
	.byte	29,23,231,5,9,12,13
	.byte	'k2Step',0
	.word	436
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	209
	.byte	4,2,35,2,13
	.byte	'hookFunction',0
	.word	96979
	.byte	4,2,35,8,0,30
	.byte	'IfxScuCcu_PllStepsConfig',0,23,236,5,3
	.word	97207
	.byte	3
	.word	149
	.byte	29,23,244,5,9,48,13
	.byte	'ccucon0',0
	.word	97019
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	97019
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	97019
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	97019
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	97019
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	97019
	.byte	8,2,35,40,0,30
	.byte	'IfxScuCcu_ClockDistributionConfig',0,23,252,5,3
	.word	97309
	.byte	29,23,128,6,9,8,13
	.byte	'value',0
	.word	2290
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	2290
	.byte	4,2,35,4,0,30
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,23,132,6,3
	.word	97461
	.byte	3
	.word	97207
	.byte	29,23,137,6,9,16,13
	.byte	'numOfPllDividerSteps',0
	.word	436
	.byte	1,2,35,0,13
	.byte	'pllDividerStep',0
	.word	97537
	.byte	4,2,35,4,13
	.byte	'pllInitialStep',0
	.word	97090
	.byte	8,2,35,8,0,30
	.byte	'IfxScuCcu_SysPllConfig',0,23,142,6,3
	.word	97542
	.byte	30
	.byte	'IfxDma_ChannelBusPriority',0,12,99,3
	.word	24941
	.byte	30
	.byte	'IfxDma_ChannelIncrementCircular',0,12,122,3
	.word	25409
	.byte	30
	.byte	'IfxDma_ChannelIncrementDirection',0,12,131,1,3
	.word	25315
	.byte	30
	.byte	'IfxDma_ChannelIncrementStep',0,12,146,1,3
	.word	25047
	.byte	30
	.byte	'IfxDma_ChannelInterruptControl',0,12,155,1,3
	.word	26576
	.byte	30
	.byte	'IfxDma_ChannelMove',0,12,170,1,3
	.word	23999
	.byte	30
	.byte	'IfxDma_ChannelMoveSize',0,12,183,1,3
	.word	24391
	.byte	30
	.byte	'IfxDma_ChannelOperationMode',0,12,192,1,3
	.word	24306
	.byte	30
	.byte	'IfxDma_ChannelPattern',0,12,207,1,3
	.word	24585
	.byte	30
	.byte	'IfxDma_ChannelRequestMode',0,12,225,1,3
	.word	24191
	.byte	30
	.byte	'IfxDma_ChannelRequestSource',0,12,234,1,3
	.word	24852
	.byte	30
	.byte	'IfxDma_ChannelShadow',0,12,254,1,3
	.word	26023
	.byte	15,12,128,2,9,1,16
	.byte	'IfxDma_HardwareResourcePartition_0',0,0,16
	.byte	'IfxDma_HardwareResourcePartition_1',0,1,16
	.byte	'IfxDma_HardwareResourcePartition_2',0,2,16
	.byte	'IfxDma_HardwareResourcePartition_3',0,3,0,30
	.byte	'IfxDma_HardwareResourcePartition',0,12,134,2,3
	.word	98082
	.byte	15,12,138,2,9,1,16
	.byte	'IfxDma_MoveEngine_0',0,0,16
	.byte	'IfxDma_MoveEngine_1',0,1,0,30
	.byte	'IfxDma_MoveEngine',0,12,142,2,3
	.word	98279
	.byte	15,12,147,2,9,1,16
	.byte	'IfxDma_SleepMode_enable',0,0,16
	.byte	'IfxDma_SleepMode_disable',0,1,0,30
	.byte	'IfxDma_SleepMode',0,12,151,2,3
	.word	98357
	.byte	30
	.byte	'IfxDma_Dma',0,15,210,3,3
	.word	23868
	.byte	30
	.byte	'IfxDma_Dma_Channel',0,15,223,3,3
	.word	23938
	.byte	30
	.byte	'IfxDma_Dma_ChannelConfig',0,15,135,4,3
	.word	26694
	.byte	30
	.byte	'IfxDma_Dma_Config',0,15,142,4,3
	.word	23893
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L39:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,4,1,58,15,59,15,57,15,11,15,0,0,16,40,0,3,8,28,13,0,0
	.byte	17,11,1,0,0,18,1,1,11,15,73,19,0,0,19,33,0,47,15,0,0,20,38,0,73,19,0,0,21,46,1,3,8,54,15,39,12,63,12,60
	.byte	12,0,0,22,5,0,73,19,0,0,23,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,24,5,0,3,8,73,19,0,0,25,46,1,49
	.byte	19,0,0,26,5,0,49,19,0,0,27,29,1,49,19,0,0,28,11,0,49,19,0,0,29,19,1,58,15,59,15,57,15,11,15,0,0,30,22
	.byte	0,3,8,58,15,59,15,57,15,73,19,0,0,31,21,0,54,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L40:
	.word	.L200-.L199
.L199:
	.half	3
	.word	.L202-.L201
.L201:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std',0
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra\\Sfr\\TC26B\\_Reg',0
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Impl',0
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std',0
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Std',0
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Std',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxSrc.h',0,2,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxSrc_cfg.h',0,4,0,0
	.byte	'IfxScuWdt.h',0,5,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,4,0,0
	.byte	'IfxPort.h',0,6,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxDma.h',0,7,0,0
	.byte	'IfxDma_regdef.h',0,3,0,0
	.byte	'IfxDma_cfg.h',0,4,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.h',0,0,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'IfxScu_cfg.h',0,4,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxFlash_regdef.h',0,3,0,0
	.byte	'IfxScuCcu.h',0,5,0,0,0
.L202:
.L200:
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_info'
.L41:
	.word	252
	.half	3
	.word	.L42
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L44,.L43
	.byte	2
	.word	.L37
	.byte	3
	.byte	'IfxDma_Dma_createModuleHandle',0,1,124,6,1,1,1
	.word	.L24,.L81,.L23
	.byte	4
	.byte	'dmaHandle',0,1,124,48
	.word	.L82,.L83
	.byte	4
	.byte	'dma',0,1,124,68
	.word	.L84,.L85
	.byte	5
	.word	.L24,.L81
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_abbrev'
.L42:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_line'
.L43:
	.word	.L204-.L203
.L203:
	.half	3
	.word	.L206-.L205
.L205:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L206:
	.byte	5,20,7,0,5,2
	.word	.L24
	.byte	3,253,0,1,5,1,9
	.half	.L207-.L24
	.byte	3,1,1,7,9
	.half	.L45-.L207
	.byte	0,1,1
.L204:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_ranges'
.L44:
	.word	-1,.L24,0,.L45-.L24,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_deInitChannel')
	.sect	'.debug_info'
.L46:
	.word	429
	.half	3
	.word	.L47
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L49,.L48
	.byte	2
	.word	.L37
	.byte	3
	.byte	'IfxDma_Dma_deInitChannel',0,1,130,1,6,1,1,1
	.word	.L26,.L86,.L25
	.byte	4
	.byte	'dma',0,1,130,1,43
	.word	.L82,.L87
	.byte	4
	.byte	'channel',0,1,130,1,65
	.word	.L88,.L89
	.byte	5
	.word	.L26,.L86
	.byte	6
	.word	.L90,.L91,.L9
	.byte	7
	.word	.L92,.L93
	.byte	7
	.word	.L94,.L95
	.byte	8
	.word	.L96,.L91,.L9
	.byte	0,6
	.word	.L97,.L98,.L10
	.byte	7
	.word	.L99,.L100
	.byte	7
	.word	.L101,.L102
	.byte	8
	.word	.L103,.L98,.L10
	.byte	0,6
	.word	.L104,.L105,.L106
	.byte	7
	.word	.L107,.L108
	.byte	7
	.word	.L109,.L110
	.byte	8
	.word	.L111,.L105,.L106
	.byte	0,6
	.word	.L112,.L113,.L13
	.byte	7
	.word	.L114,.L115
	.byte	7
	.word	.L116,.L117
	.byte	8
	.word	.L118,.L113,.L13
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_deInitChannel')
	.sect	'.debug_abbrev'
.L47:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_deInitChannel')
	.sect	'.debug_line'
.L48:
	.word	.L209-.L208
.L208:
	.half	3
	.word	.L211-.L210
.L210:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0
	.byte	'IfxDma.h',0,1,0,0,0
.L211:
	.byte	5,47,7,0,5,2
	.word	.L26
	.byte	3,131,1,1,4,2,5,20,9
	.half	.L91-.L26
	.byte	3,140,11,1,5,33,9
	.half	.L212-.L91
	.byte	1,5,39,9
	.half	.L213-.L212
	.byte	1,5,5,9
	.half	.L214-.L213
	.byte	1,4,1,9
	.half	.L9-.L214
	.byte	3,244,116,1,5,45,7,9
	.half	.L215-.L9
	.byte	3,2,1,4,2,5,13,9
	.half	.L98-.L215
	.byte	3,140,9,1,5,26,9
	.half	.L216-.L98
	.byte	1,5,31,9
	.half	.L217-.L216
	.byte	1,4,1,5,28,9
	.half	.L10-.L217
	.byte	3,247,118,1,4,2,5,13,9
	.half	.L105-.L10
	.byte	3,153,11,1,5,26,9
	.half	.L218-.L105
	.byte	1,5,31,9
	.half	.L219-.L218
	.byte	1,4,1,5,55,9
	.half	.L106-.L219
	.byte	3,233,116,1,5,39,9
	.half	.L11-.L106
	.byte	1,4,2,5,20,9
	.half	.L113-.L11
	.byte	3,255,10,1,5,33,9
	.half	.L220-.L113
	.byte	1,5,38,9
	.half	.L221-.L220
	.byte	1,5,5,9
	.half	.L222-.L221
	.byte	1,4,1,5,13,9
	.half	.L13-.L222
	.byte	3,129,117,1,5,1,7,9
	.half	.L223-.L13
	.byte	3,2,1,7,9
	.half	.L50-.L223
	.byte	0,1,1
.L209:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_deInitChannel')
	.sect	'.debug_ranges'
.L49:
	.word	-1,.L26,0,.L50-.L26,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_info'
.L51:
	.word	244
	.half	3
	.word	.L52
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L54,.L53
	.byte	2
	.word	.L37
	.byte	3
	.byte	'IfxDma_Dma_initModule',0,1,232,1,6,1,1,1
	.word	.L34,.L119,.L33
	.byte	4
	.byte	'dma',0,1,232,1,40
	.word	.L82,.L120
	.byte	4
	.byte	'config',0,1,232,1,70
	.word	.L121,.L122
	.byte	5
	.word	.L34,.L119
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_abbrev'
.L52:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_line'
.L53:
	.word	.L225-.L224
.L224:
	.half	3
	.word	.L227-.L226
.L226:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L227:
	.byte	5,22,7,0,5,2
	.word	.L34
	.byte	3,233,1,1,5,14,9
	.half	.L228-.L34
	.byte	1,5,1,9
	.half	.L229-.L228
	.byte	3,1,1,7,9
	.half	.L55-.L229
	.byte	0,1,1
.L225:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_ranges'
.L54:
	.word	-1,.L34,0,.L55-.L34,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_info'
.L56:
	.word	250
	.half	3
	.word	.L57
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L59,.L58
	.byte	2
	.word	.L37
	.byte	3
	.byte	'IfxDma_Dma_initModuleConfig',0,1,238,1,6,1,1,1
	.word	.L36,.L123,.L35
	.byte	4
	.byte	'config',0,1,238,1,53
	.word	.L124,.L125
	.byte	4
	.byte	'dma',0,1,238,1,70
	.word	.L84,.L126
	.byte	5
	.word	.L36,.L123
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_abbrev'
.L57:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_line'
.L58:
	.word	.L231-.L230
.L230:
	.half	3
	.word	.L233-.L232
.L232:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L233:
	.byte	5,17,7,0,5,2
	.word	.L36
	.byte	3,239,1,1,5,1,9
	.half	.L234-.L36
	.byte	3,1,1,7,9
	.half	.L60-.L234
	.byte	0,1,1
.L231:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_ranges'
.L59:
	.word	-1,.L36,0,.L60-.L36,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_info'
.L61:
	.word	493
	.half	3
	.word	.L62
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L64,.L63
	.byte	2
	.word	.L37
	.byte	3
	.byte	'IfxDma_Dma_initChannel',0,1,144,1,6,1,1,1
	.word	.L28,.L127,.L27
	.byte	4
	.byte	'channel',0,1,144,1,49
	.word	.L128,.L129
	.byte	4
	.byte	'config',0,1,144,1,90
	.word	.L130,.L131
	.byte	5
	.word	.L28,.L127
	.byte	6
	.byte	'dma',0,1,146,1,14
	.word	.L84,.L132
	.byte	5
	.word	.L133,.L134
	.byte	6
	.byte	'tsr',0,1,155,1,21
	.word	.L135,.L136
	.byte	0,5
	.word	.L137,.L16
	.byte	6
	.byte	'src',0,1,172,1,32
	.word	.L138,.L139
	.byte	7
	.word	.L140,.L141,.L18
	.byte	8
	.word	.L142,.L143
	.byte	8
	.word	.L144,.L145
	.byte	9
	.word	.L146,.L141,.L18
	.byte	0,7
	.word	.L147,.L148,.L149
	.byte	8
	.word	.L150,.L151
	.byte	8
	.word	.L152,.L153
	.byte	8
	.word	.L154,.L155
	.byte	10
	.word	.L156,.L148,.L149
	.byte	7
	.word	.L157,.L158,.L149
	.byte	8
	.word	.L159,.L160
	.byte	9
	.word	.L161,.L158,.L149
	.byte	0,0,0,7
	.word	.L162,.L149,.L16
	.byte	8
	.word	.L163,.L164
	.byte	9
	.word	.L165,.L149,.L16
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_abbrev'
.L62:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_line'
.L63:
	.word	.L236-.L235
.L235:
	.half	3
	.word	.L238-.L237
.L237:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Std',0
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0
	.byte	'IfxDma.h',0,1,0,0
	.byte	'IfxSrc.h',0,2,0,0,0
.L238:
	.byte	5,6,7,0,5,2
	.word	.L28
	.byte	3,143,1,1,5,26,9
	.half	.L192-.L28
	.byte	3,2,1,5,34,9
	.half	.L239-.L192
	.byte	1,5,24,9
	.half	.L193-.L239
	.byte	3,2,1,5,32,9
	.half	.L240-.L193
	.byte	3,1,1,5,24,9
	.half	.L241-.L240
	.byte	1,5,41,9
	.half	.L242-.L241
	.byte	3,1,1,5,34,9
	.half	.L243-.L242
	.byte	1,5,24,9
	.half	.L244-.L243
	.byte	1,5,47,9
	.half	.L245-.L244
	.byte	3,2,1,5,58,9
	.half	.L189-.L245
	.byte	1,5,15,9
	.half	.L133-.L189
	.byte	3,4,1,5,19,9
	.half	.L194-.L133
	.byte	3,2,1,5,9,9
	.half	.L246-.L194
	.byte	1,5,25,7,9
	.half	.L247-.L246
	.byte	3,2,1,5,23,9
	.half	.L248-.L247
	.byte	1,5,26,9
	.half	.L249-.L248
	.byte	1,5,25,9
	.half	.L14-.L249
	.byte	3,4,1,5,23,9
	.half	.L250-.L14
	.byte	1,5,25,9
	.half	.L15-.L250
	.byte	3,3,1,5,17,9
	.half	.L251-.L15
	.byte	1,5,40,9
	.half	.L252-.L251
	.byte	1,5,15,9
	.half	.L134-.L252
	.byte	3,3,1,5,5,9
	.half	.L253-.L134
	.byte	1,5,66,7,9
	.half	.L137-.L253
	.byte	3,2,1,5,80,9
	.half	.L254-.L137
	.byte	1,4,2,5,5,9
	.half	.L141-.L254
	.byte	3,208,10,1,5,37,7,9
	.half	.L17-.L141
	.byte	3,2,1,5,5,9
	.half	.L196-.L17
	.byte	1,4,1,5,32,9
	.half	.L18-.L196
	.byte	3,175,117,1,5,71,9
	.half	.L195-.L18
	.byte	1,4,3,5,11,9
	.half	.L148-.L195
	.byte	3,231,0,1,5,19,9
	.half	.L255-.L148
	.byte	1,5,17,9
	.half	.L256-.L255
	.byte	1,5,11,9
	.half	.L257-.L256
	.byte	3,1,1,5,17,9
	.half	.L258-.L257
	.byte	1,5,11,9
	.half	.L158-.L258
	.byte	3,103,1,5,17,9
	.half	.L259-.L158
	.byte	1,5,11,9
	.half	.L149-.L259
	.byte	3,18,1,5,16,9
	.half	.L260-.L149
	.byte	1,4,1,5,1,9
	.half	.L16-.L260
	.byte	3,162,127,1,7,9
	.half	.L65-.L16
	.byte	0,1,1
.L236:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_ranges'
.L64:
	.word	-1,.L28,0,.L65-.L28,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_info'
.L66:
	.word	279
	.half	3
	.word	.L67
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L69,.L68
	.byte	2
	.word	.L37
	.byte	3
	.byte	'IfxDma_Dma_initChannelConfig',0,1,179,1,6,1,1,1
	.word	.L30,.L166,.L29
	.byte	4
	.byte	'config',0,1,179,1,61
	.word	.L167,.L168
	.byte	4
	.byte	'dma',0,1,179,1,81
	.word	.L82,.L169
	.byte	5
	.word	.L30,.L166
	.byte	6
	.byte	'defaultConfig',0,1,181,1,36
	.word	.L170,.L171
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_abbrev'
.L67:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_line'
.L68:
	.word	.L262-.L261
.L261:
	.half	3
	.word	.L264-.L263
.L263:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L264:
	.byte	5,6,7,0,5,2
	.word	.L30
	.byte	3,178,1,1,5,52,9
	.half	.L197-.L30
	.byte	3,2,1,5,50,9
	.half	.L265-.L197
	.byte	1,5,15,9
	.half	.L266-.L265
	.byte	3,38,1,5,13,9
	.half	.L267-.L266
	.byte	1,5,20,9
	.half	.L268-.L267
	.byte	3,3,1,5,1,9
	.half	.L269-.L268
	.byte	3,1,1,7,9
	.half	.L70-.L269
	.byte	0,1,1
.L262:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_ranges'
.L69:
	.word	-1,.L30,0,.L70-.L30,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_info'
.L71:
	.word	262
	.half	3
	.word	.L72
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L74,.L73
	.byte	2
	.word	.L37
	.byte	3
	.byte	'IfxDma_Dma_initLinkedListEntry',0,1,226,1,6,1,1,1
	.word	.L32,.L172,.L31
	.byte	4
	.byte	'ptrToAddress',0,1,226,1,43
	.word	.L173,.L174
	.byte	4
	.byte	'config',0,1,226,1,89
	.word	.L130,.L175
	.byte	5
	.word	.L32,.L172
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_abbrev'
.L72:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_line'
.L73:
	.word	.L271-.L270
.L270:
	.half	3
	.word	.L273-.L272
.L272:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L273:
	.byte	5,68,7,0,5,2
	.word	.L32
	.byte	3,227,1,1,5,1,9
	.half	.L198-.L32
	.byte	3,1,1,7,9
	.half	.L75-.L198
	.byte	0,1,1
.L271:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_ranges'
.L74:
	.word	-1,.L32,0,.L75-.L32,0,0
	.sdecl	'.debug_info',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_info'
.L76:
	.word	315
	.half	3
	.word	.L77
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L79,.L78
	.byte	2
	.word	.L37
	.byte	3
	.byte	'IfxDma_Dma_configureTransactionSet',0,1,66,17,1,1
	.word	.L22,.L176,.L21
	.byte	4
	.byte	'channel',0,1,66,64
	.word	.L177,.L178
	.byte	4
	.byte	'config',0,1,66,105
	.word	.L130,.L179
	.byte	5
	.word	.L22,.L176
	.byte	5
	.word	.L22,.L180
	.byte	6
	.byte	'chcfgr',0,1,74,27
	.word	.L181,.L182
	.byte	0,5
	.word	.L180,.L183
	.byte	6
	.byte	'adicr',0,1,88,26
	.word	.L184,.L185
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_abbrev'
.L77:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_line'
.L78:
	.word	.L275-.L274
.L274:
	.half	3
	.word	.L277-.L276
.L276:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma\\IfxDma_Dma.c',0,0,0,0,0
.L277:
	.byte	5,27,7,0,5,2
	.word	.L22
	.byte	3,202,0,1,5,35,9
	.half	.L186-.L22
	.byte	3,1,1,5,27,9
	.half	.L278-.L186
	.byte	1,5,35,9
	.half	.L279-.L278
	.byte	3,1,1,5,27,9
	.half	.L280-.L279
	.byte	1,5,35,9
	.half	.L281-.L280
	.byte	3,1,1,5,27,9
	.half	.L282-.L281
	.byte	1,5,35,9
	.half	.L283-.L282
	.byte	3,1,1,5,27,9
	.half	.L284-.L283
	.byte	1,5,35,9
	.half	.L285-.L284
	.byte	3,1,1,5,27,9
	.half	.L286-.L285
	.byte	1,5,35,9
	.half	.L287-.L286
	.byte	3,1,1,5,27,9
	.half	.L288-.L287
	.byte	1,5,35,9
	.half	.L289-.L288
	.byte	3,1,1,5,27,9
	.half	.L290-.L289
	.byte	1,9
	.half	.L291-.L290
	.byte	3,2,1,5,23,9
	.half	.L180-.L291
	.byte	3,5,1,5,31,9
	.half	.L188-.L180
	.byte	3,1,1,5,23,9
	.half	.L292-.L188
	.byte	1,5,31,9
	.half	.L293-.L292
	.byte	3,1,1,5,23,9
	.half	.L294-.L293
	.byte	1,5,31,9
	.half	.L295-.L294
	.byte	3,1,1,5,23,9
	.half	.L296-.L295
	.byte	1,5,31,9
	.half	.L297-.L296
	.byte	3,1,1,5,23,9
	.half	.L298-.L297
	.byte	1,5,31,9
	.half	.L299-.L298
	.byte	3,1,1,5,23,9
	.half	.L300-.L299
	.byte	1,5,31,9
	.half	.L301-.L300
	.byte	3,1,1,5,23,9
	.half	.L302-.L301
	.byte	1,5,31,9
	.half	.L303-.L302
	.byte	3,1,1,5,23,9
	.half	.L304-.L303
	.byte	1,5,31,9
	.half	.L305-.L304
	.byte	3,1,1,5,23,9
	.half	.L306-.L305
	.byte	1,5,31,9
	.half	.L307-.L306
	.byte	3,1,1,5,23,9
	.half	.L308-.L307
	.byte	1,5,31,9
	.half	.L309-.L308
	.byte	3,1,1,5,23,9
	.half	.L310-.L309
	.byte	1,5,31,9
	.half	.L311-.L310
	.byte	3,1,1,5,23,9
	.half	.L312-.L311
	.byte	1,5,31,9
	.half	.L313-.L312
	.byte	3,1,1,5,23,9
	.half	.L314-.L313
	.byte	1,5,32,9
	.half	.L315-.L314
	.byte	3,1,1,5,26,9
	.half	.L187-.L315
	.byte	1,5,58,7,9
	.half	.L316-.L187
	.byte	1,5,62,9
	.half	.L317-.L316
	.byte	1,5,58,9
	.half	.L2-.L317
	.byte	1,5,76,9
	.half	.L3-.L2
	.byte	1,5,70,9
	.half	.L318-.L3
	.byte	1,5,102,7,9
	.half	.L319-.L318
	.byte	1,5,106,9
	.half	.L320-.L319
	.byte	1,5,102,9
	.half	.L4-.L320
	.byte	1,5,67,9
	.half	.L5-.L4
	.byte	1,5,23,9
	.half	.L321-.L5
	.byte	1,5,31,9
	.half	.L322-.L321
	.byte	3,1,1,5,23,9
	.half	.L323-.L322
	.byte	1,5,31,9
	.half	.L324-.L323
	.byte	3,1,1,5,23,9
	.half	.L325-.L324
	.byte	1,5,26,9
	.half	.L326-.L325
	.byte	3,3,1,5,31,9
	.half	.L183-.L326
	.byte	3,2,1,5,23,9
	.half	.L327-.L183
	.byte	1,5,31,9
	.half	.L328-.L327
	.byte	3,1,1,5,23,9
	.half	.L329-.L328
	.byte	1,5,31,9
	.half	.L330-.L329
	.byte	3,1,1,5,23,9
	.half	.L331-.L330
	.byte	1,5,31,9
	.half	.L332-.L331
	.byte	3,1,1,5,23,9
	.half	.L333-.L332
	.byte	1,5,16,9
	.half	.L334-.L333
	.byte	3,3,1,5,9,9
	.half	.L335-.L334
	.byte	1,5,16,7,9
	.half	.L336-.L335
	.byte	3,1,1,5,32,9
	.half	.L337-.L336
	.byte	1,5,16,7,9
	.half	.L338-.L337
	.byte	3,1,1,5,32,9
	.half	.L339-.L338
	.byte	1,5,34,7,9
	.half	.L340-.L339
	.byte	3,2,1,5,26,9
	.half	.L341-.L340
	.byte	1,5,1,9
	.half	.L6-.L341
	.byte	3,2,1,7,9
	.half	.L80-.L6
	.byte	0,1,1
.L275:
	.sdecl	'.debug_ranges',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_ranges'
.L79:
	.word	-1,.L22,0,.L80-.L22,0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_loc'
.L21:
	.word	-1,.L22,0,.L176-.L22
	.half	2
	.byte	138,0
	.word	0,0
.L185:
	.word	-1,.L22,.L188-.L22,.L176-.L22
	.half	1
	.byte	81
	.word	0,0
.L178:
	.word	-1,.L22,0,.L176-.L22
	.half	1
	.byte	100
	.word	0,0
.L182:
	.word	-1,.L22,.L186-.L22,.L187-.L22
	.half	1
	.byte	95
	.word	0,0
.L179:
	.word	-1,.L22,0,.L176-.L22
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_loc'
.L23:
	.word	-1,.L24,0,.L81-.L24
	.half	2
	.byte	138,0
	.word	0,0
.L85:
	.word	-1,.L24,0,.L81-.L24
	.half	1
	.byte	101
	.word	0,0
.L83:
	.word	-1,.L24,0,.L81-.L24
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_deInitChannel')
	.sect	'.debug_loc'
.L25:
	.word	-1,.L26,0,.L86-.L26
	.half	2
	.byte	138,0
	.word	0,0
.L89:
	.word	-1,.L26,0,.L86-.L26
	.half	1
	.byte	84
	.word	0,0
.L102:
	.word	0,0
.L117:
	.word	0,0
.L95:
	.word	0,0
.L110:
	.word	0,0
.L87:
	.word	-1,.L26,0,.L86-.L26
	.half	1
	.byte	100
	.word	0,0
.L100:
	.word	0,0
.L115:
	.word	0,0
.L93:
	.word	0,0
.L108:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_loc'
.L27:
	.word	-1,.L28,0,.L127-.L28
	.half	2
	.byte	138,0
	.word	0,0
.L129:
	.word	-1,.L28,0,.L189-.L28
	.half	1
	.byte	100
	.word	.L190-.L28,.L191-.L28
	.half	1
	.byte	111
	.word	0,0
.L145:
	.word	0,0
.L131:
	.word	-1,.L28,0,.L133-.L28
	.half	1
	.byte	101
	.word	.L192-.L28,.L127-.L28
	.half	1
	.byte	108
	.word	0,0
.L132:
	.word	-1,.L28,.L193-.L28,.L127-.L28
	.half	1
	.byte	109
	.word	0,0
.L143:
	.word	0,0
.L155:
	.word	0,0
.L139:
	.word	-1,.L28,.L196-.L28,.L16-.L28
	.half	1
	.byte	111
	.word	0,0
.L160:
	.word	0,0
.L164:
	.word	0,0
.L151:
	.word	0,0
.L136:
	.word	-1,.L28,.L194-.L28,.L195-.L28
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L153:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_loc'
.L29:
	.word	-1,.L30,0,.L197-.L30
	.half	2
	.byte	138,0
	.word	.L197-.L30,.L166-.L30
	.half	2
	.byte	138,56
	.word	.L166-.L30,.L166-.L30
	.half	2
	.byte	138,0
	.word	0,0
.L168:
	.word	-1,.L30,0,.L166-.L30
	.half	1
	.byte	100
	.word	0,0
.L171:
	.word	0,0
.L169:
	.word	-1,.L30,0,.L166-.L30
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_loc'
.L31:
	.word	-1,.L32,0,.L172-.L32
	.half	2
	.byte	138,0
	.word	0,0
.L175:
	.word	-1,.L32,0,.L198-.L32
	.half	1
	.byte	101
	.word	0,0
.L174:
	.word	-1,.L32,0,.L198-.L32
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_loc'
.L33:
	.word	-1,.L34,0,.L119-.L34
	.half	2
	.byte	138,0
	.word	0,0
.L122:
	.word	-1,.L34,0,.L119-.L34
	.half	1
	.byte	101
	.word	0,0
.L120:
	.word	-1,.L34,0,.L119-.L34
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_loc'
.L35:
	.word	-1,.L36,0,.L123-.L36
	.half	2
	.byte	138,0
	.word	0,0
.L125:
	.word	-1,.L36,0,.L123-.L36
	.half	1
	.byte	100
	.word	0,0
.L126:
	.word	-1,.L36,0,.L123-.L36
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L342:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_configureTransactionSet')
	.sect	'.debug_frame'
	.word	20
	.word	.L342,.L22,.L176-.L22
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_createModuleHandle')
	.sect	'.debug_frame'
	.word	20
	.word	.L342,.L24,.L81-.L24
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_deInitChannel')
	.sect	'.debug_frame'
	.word	20
	.word	.L342,.L26,.L86-.L26
	.byte	8,19,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_initChannel')
	.sect	'.debug_frame'
	.word	12
	.word	.L342,.L28,.L127-.L28
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_initChannelConfig')
	.sect	'.debug_frame'
	.word	40
	.word	.L342,.L30,.L166-.L30
	.byte	8,19,8,23,4
	.word	(.L197-.L30)/2
	.byte	19,56,22,26,3,19,138,56,4
	.word	(.L166-.L197)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_initLinkedListEntry')
	.sect	'.debug_frame'
	.word	12
	.word	.L342,.L32,.L172-.L32
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_initModule')
	.sect	'.debug_frame'
	.word	20
	.word	.L342,.L34,.L119-.L34
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxDma_Dma_initModuleConfig')
	.sect	'.debug_frame'
	.word	20
	.word	.L342,.L36,.L123-.L36
	.byte	8,18,8,19,8,22,8,23

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Dma\IfxDma_Dma.c	   242  void IfxDma_Dma_initModule(IfxDma_Dma *dma, const IfxDma_Dma_Config *config)
	; Module end
