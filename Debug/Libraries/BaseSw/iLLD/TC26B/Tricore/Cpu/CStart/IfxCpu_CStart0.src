	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 99835728"
	.compiler_invocation	"ctc --dep-file=Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart\\.IfxCpu_CStart0.o.d --fp-model=c,f,l,n,r,S,T,z -D__CPU__=tc26x -D__CPU_TC26X__ --core=tc1.6.x --iso=99 -ID:\\smartcar\\smartcar -ID:\\smartcar\\smartcar\\CODE -ID:\\smartcar\\smartcar\\Libraries -ID:\\smartcar\\smartcar\\Libraries\\BaseSw -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Build -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Impl -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\DataHandling -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\InternalMux -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_PinMap -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Asc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Lin -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Spi -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6 -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Icu -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\PwmBc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\PwmHl -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Timer -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\TPwm -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif\\Cam -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Irq -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Dsadc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Rdc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts\\Dts -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Emem -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Emem\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray\\Eray -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth\\Phy_Pef7071 -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce\\Crc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Flash -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Flash\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12 -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12\\IncrEnc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\Pwm -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\Timer -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tim -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tim\\In -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\Pwm -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\Timer -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Trig -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl\\Hssl -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\I2c -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom\\Driver -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc\\Msc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican\\Can -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Io -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5 -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5\\Psi5 -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s\\Psi5s -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\SpiMaster -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\SpiSlave -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent\\Sent -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Smu -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Smu\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Src -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm\\Timer -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Adc -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra\\Platform -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra\\Platform\\Tricore -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra\\Platform\\Tricore\\Compilers -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra\\Sfr -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra\\Sfr\\TC26B -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra\\Sfr\\TC26B\\_Reg -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Service -ID:\\smartcar\\smartcar\\Libraries\\BaseSw\\Service\\CpuGeneric -ID:\\smartcar\\smartcar\\Libraries\\seekfree_libraries -ID:\\smartcar\\smartcar\\Libraries\\seekfree_libraries\\common -ID:\\smartcar\\smartcar\\Libraries\\seekfree_peripheral -ID:\\smartcar\\smartcar\\USER -g2 --make-target=Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.o -t0 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O0 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.src ..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c"
	.compiler_name		"ctc"
	;source	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c'

	
$TC16X
	

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	     2   * \file IfxCpu_Cstart0.c
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	     3   * \brief This file contains the Core startup sequence for Cpu0.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	     4   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	     5   * \copyright Copyright (c) 2012 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	     6   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	     7   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	     9   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    10   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    12   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    13   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    14   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    15   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    16  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    19  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    20   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    21   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    22   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    23   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    24   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    25   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    26  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    27   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    31   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    32   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    33  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    40   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    41  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    42   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    43   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    44  /*******************************************************************************
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    45  **                      Includes                                              **
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    46  *******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    47  #include "Ifx_Cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    48  #ifndef IFX_CFG_USE_COMPILER_DEFAULT_LINKER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    49  #include "Scu/Std/IfxScuWdt.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    50  #include "Scu/Std/IfxScuCcu.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    51  #include "Cpu/Std/IfxCpu.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    52  #include "Cpu/CStart/IfxCpu_CStart.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    53  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    54  #include "IfxCpu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    55  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    56  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    57  /*                           Macros                                           */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    58  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    59  /** \brief Configuration for CpuX enable.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    60   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    61   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    62  #ifndef IFX_CFG_CPU_CSTART_ENABLE_TRICORE0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    63  #   define IFX_CFG_CPU_CSTART_ENABLE_TRICORE0        (1) /**< Cpu0 enabled by default*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    64  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    65  #ifndef IFX_CFG_CPU_CSTART_ENABLE_TRICORE1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    66  #   define IFX_CFG_CPU_CSTART_ENABLE_TRICORE1        (1) /**< Cpu1 enabled by default*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    67  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    68  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    69  /** \brief Configuration for cache enable.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    70   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    71   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    72  #ifndef IFX_CFG_CPU_CSTART_ENABLE_TRICORE0_PCACHE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    73  #   define IFX_CFG_CPU_CSTART_ENABLE_TRICORE0_PCACHE (1)  /**< Program Cache enabled by default*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    74  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    75  #ifndef IFX_CFG_CPU_CSTART_ENABLE_TRICORE0_DCACHE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    76  #   define IFX_CFG_CPU_CSTART_ENABLE_TRICORE0_DCACHE (1)  /**< Data Cache enabled by default*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    77  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    78  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    79  #ifndef IFXCPU_CSTART_CCU_INIT_HOOK
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    80  #define IFXCPU_CSTART_CCU_INIT_HOOK() (void)IfxScuCcu_init(&IfxScuCcu_defaultClockConfig);   /*The status returned by Ccu init is ignored */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    81  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    82  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    83  /*******************************************************************************
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    84  **                      Imported Function Declarations                        **
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    85  *******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    86  IFXCOMPILER_COMMON_LINKER_SYMBOLS()
		 .extern _SMALL_DATA_, _LITERAL_DATA_, _A8_DATA_, _A9_DATA_

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    87  IFXCOMPILER_CORE_LINKER_SYMBOLS(0)
		 .extern __USTACK0

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    88  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    89  IFX_EXTERN void core0_main(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    90  #if defined(__TASKING__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    91  __asm("\t .extern core0_main");
		 .extern core0_main
	.sdecl	'.text.IfxCpu_CStart0._Core0_start',code,cluster('_Core0_start')
	.sect	'.text.IfxCpu_CStart0._Core0_start'
	.align	2
	
	.global	_Core0_start

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    92  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    93  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    94  /*******************************************************************************
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    95  **                      Private Constant Definitions                          **
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    96  *******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    97  #define IFXCSTART0_PSW_DEFAULT     (0x00000980u)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    98  #define IFXCSTART0_PCX_O_S_DEFAULT (0xfff00000u)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	    99  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   100  /*********************************************************************************
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   101  * _start() - startup code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   102  *********************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   103  #if defined(__HIGHTEC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   104  #pragma GCC optimize ("-O2")
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   105  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   106  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   107  void _Core0_start(void)
; Function _Core0_start
.L36:
_Core0_start:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   108  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   109      uint32 pcxi;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   110      uint16 cpuWdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[0]);
	movh.a	a15,#61443
	lea	a15,[a15]@los(0xf0036100)
.L63:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   456      {}
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   457  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   458  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   459  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   460  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   461  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   463      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   464          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   465          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   466                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   467                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   468                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   469      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   470  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   471      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   472      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   473                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   474                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   475                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   476  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   477      /* read back ENDINIT and wait until it has been cleared */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   479      {}
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   480  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   481  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   482  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   483  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   484  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   485      uint16 password;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   486  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   487      /* Read Password from CON0 register
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   488       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   489       * to toggle them before returning password */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   490      password  = watchdog->CON0.B.PW;
	ld.w	d15,[a15]
	extr.u	d15,d15,#2,#14
.L147:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   491      password ^= 0x003F;
	xor	d8,d15,#63
.L148:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   493      return password;      (inlined)
	j	.L2

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   494  }      (inlined)
.L2:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   111  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   112      IFX_CFG_CPU_CSTART_PRE_C_INIT_HOOK(0);  /*Test Stack, CSA and Cache */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   113  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   114      /* Load user stack pointer */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   115      __setareg(sp, __USTACK(0));
	 movh.a	 sp,#@his(__USTACK0)
 lea	 sp,[sp]@los(__USTACK0)
.L188:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   116      __dsync();
	dsync
.L189:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   117  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   118      /* Set the PSW to its reset value in case of a warm start,clear PSW.IS */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   119      __mtcr(CPU_PSW, IFXCSTART0_PSW_DEFAULT);
	mov	d15,#2432
.L190:
	mtcr	#65028,d15
	isync
.L191:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   120  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   121      /* Set the PCXS and PCXO to its reset value in case of a warm start */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   122      pcxi  = __mfcr(CPU_PCXI);
	mfcr	d15,#65024
.L149:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   123      pcxi &= IFXCSTART0_PCX_O_S_DEFAULT; /*0xfff00000; */
	insert	d15,d15,#0,#0,#20
.L192:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   124      __mtcr(CPU_PCXI, pcxi);
	mtcr	#65024,d15
	isync
.L193:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   125  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   126      /*enable/disable program cache depending on the configuration */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   127      IfxCpu_setProgramCache(IFX_CFG_CPU_CSTART_ENABLE_TRICORE0_PCACHE);
	mov	d1,#1
.L69:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   974      if (enable)      (inlined)
	jeq	d1,#0,.L3
.L75:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    44   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    45   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    46   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    47   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    48   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    49   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    50   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    51   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    52   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    53   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    54   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    55   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    56   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    57   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    58   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    59   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    60   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    61   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    63  #ifndef IFXCPU_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    64  #define IFXCPU_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    65  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    66  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    67  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    68  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    69  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    70  #include "_Impl/IfxCpu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    71  #include "IfxSrc_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    72  #include "IfxScu_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    73  #include "IfxStm_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    74  #include "_Impl/IfxScu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    75  #include "_Utilities/Ifx_Assert.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    76  #include "Scu/Std/IfxScuWdt.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    77  #include "Scu/Std/IfxScuCcu.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    78  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    79  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    80  /*-----------------------------------Macros-----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    81  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    82  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    83  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    84   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    85   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    86   * the CPU number.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    87   * Example usage:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    88   *  \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    89   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    90   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    91   *  \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    92   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    93  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    94  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    95  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    96   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    97   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    98   * the CPU number.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    99   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   100   *   Example usage:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   101   *   \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   102   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   103   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   104   *   \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   105   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   106  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   107  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   108  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   109  /*------------------------------Type Definitions------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   110  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   111  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   112  /** \brief Lock type Spin lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   113   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   114  typedef unsigned int IfxCpu_spinLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   115  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Lock type Mutex lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   117   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   118  typedef unsigned int IfxCpu_mutexLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   119  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   120  /** \brief Event used for synchronisation.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   121   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   122  typedef unsigned int IfxCpu_syncEvent;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   123  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   124  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   125  /*--------------------------------Enumerations--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   127  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   128  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   129   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   130  /** \brief Enumeration for the Cpu mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   131   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   132  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   133  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_halt,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_run,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_idle,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   137      IfxCpu_CoreMode_sleep,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   138      IfxCpu_CoreMode_stby,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   139      IfxCpu_CoreMode_unknown
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   140  } IfxCpu_CoreMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   141  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance conunter modes
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   143   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   144  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   145  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   148  } IfxCpu_CounterMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   149  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   150  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   151  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   152  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   153  /*-----------------------------Data Structures--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   154  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   155  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   156  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   157   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   158  /** \brief counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   159   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   160  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   161  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   162      uint32  counter;        /**< \brief Counter value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   163      boolean overlfow;       /**< \brief sticky overlfow */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_Counter;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   166  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   167  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   168  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   169   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   170  /** \brief Performance counter result
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   171   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   172  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   173  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_Perf;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   181  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   182  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   183  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   184   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   185  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   187  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   188  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief API to get the address for CPU HW module register memory map
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   191   * \param cpu Resource index of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   192   * \return CPU module register address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   193   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   194  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   195  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief API to get core id of the CPU of the caller.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   197   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   198   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   199   * \return Resource index of the CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   200   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   201  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   202  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   203  /** \brief API to get cpu index of the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   204   * Note: This api can be used whereever cpu no/index is needed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   205   * \return Resource index of the CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   206   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   207  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   208  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   209  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   210   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   211   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   212   * shall not be used to initialize the CSA of another CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   213   * \param csaBegin Pointer to start of context save area
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   214   * \param csaEnd Pointer to end of context save area
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   215   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   216   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   217  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   219  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   220   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   221   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   222  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   224  /** \brief Triggers Software Reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   225   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   226   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   227  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   228  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   229  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   230  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   231  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   232  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   233  /** \brief API to get current mode of CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   234   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   235   * \return Current mode of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   236   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   237  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   238  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   239  /** \brief API to get current mode of CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   240   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   241   * \return Resource index of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   242   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   243  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   244  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   245  /** \brief API to set mode of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   246   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   247   * \param mode CPU mode to be set by this API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   248   * \return Success status of the activity (setting the core mode).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   249   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   250   * \retval FALSE: If the activity can't be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   251   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   252  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   253  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   254  /** \brief API to set the program counter for the CPU specified.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   255   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   256   * \param programCounter Program counter value to be set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   257   * \return success status of the activity (setting program counter value).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   258   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   259   * \retval FALSE: If the activity can't be performed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   260   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   261  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   262  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   263  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   264   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   265   * \param programCounter Program counter value to start the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   266   * \return success status of the activity (setting program counter value).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   268   * \retval FALSE: If the activity can't be performed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   269   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   270  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   271  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   272  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   273  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   274  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   275   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   277  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   278  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   279  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   280  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   281  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   282   * This API provides the status of CPU where this API is called
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   283   * \return Status of global interrupt enable bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   284   * \retval TRUE: Global interrupts enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   285   * \retval FALSE: Global interrupts disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   286   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   287  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   288  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   289  /** \brief API to disable global interrupt and return the previous status.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   290   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   291   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   292   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   293   * \return Previous status of global interrupt enable bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   294   * \retval TRUE: Previously, global interrupts enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   295   * \retval FALSE: Previously, global interrupts disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   296   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   297  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   298  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   299  /** \brief API to enable global interrupt.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   300   * This API simply enables the global interrupt.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   301   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   302   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   303  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   304  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   305  /** \brief Disable the Global Interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   306   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   311   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   312   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   313   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   314   * \param enabled Previous status of the global interrupt enable bit
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   315   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   329   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   330   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   331   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   332   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   333   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   334   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   335  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   336  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   337  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   338   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   339   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   340   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   341   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to invalidate the program cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   352   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   353   * \return Status TRUE/FALSE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enable Command to enable or bypass the data cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   362   * TRUE: Enable the data cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   363   * FALSE: Bypass the data cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   364   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   369   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   371   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   372   * \param enable Command to enable or bypass the program cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   373   * TRUE: Enable the program cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   374   * FALSE: Bypass the program cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   375   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   376   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   377  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   378  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   379  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   380  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   381  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   382   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   384  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   385  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   386  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   387  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   388  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   389   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   390   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   391   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   392   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   393   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   394  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   395  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   396  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   397   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   398   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   399   * It cannot be used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   400   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   401   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   402   * reading the counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   403   * \return Status of sticky overflow bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   404   * \retval TRUE: Sticky overflow bit is set.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   405   * \retval FALSE: Sticky overflow bit is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   406   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   408  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   410   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   413   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   414   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   415  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   416  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   417  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   418   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   419   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   420   * It cannot be used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   421   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   422   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   423   * reading the counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   424   * \return Status of sticky overflow bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   425   * \retval TRUE: Sticky overflow bit is set.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   426   * \retval FALSE: Sticky overflow bit is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   427   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   428  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   429  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   430  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   431   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   432   * \return counter value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   433   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   434  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   435  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   436  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   437   * This is generic function to get sticky overflow bit of any performance counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   438   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief Reset and start instruction, clock and multi counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   445   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   446   * \param mode Counter mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   448   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   450  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   452   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   455   * \param enable enable Command to enable or disable the performance counter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   456   * TRUE: Enable the performance counter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   457   * FALSE: Disable the performance counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   458   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   459   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   460  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   461  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   462  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   463  /** \brief Stop instruction and clock counters, return their values
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   464   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   465   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   466   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   467   * \return Performance counter result
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   468   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   470  #endif
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   471  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   472  /** \brief API to update clock counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   473   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   474   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   475   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   476   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   477   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   478   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   479  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   480  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   481  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   482   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   483   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   484   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   485   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   486   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief API to update performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   491   * This is generic function to update any of the performance counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   492   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   493   * \param count Count
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   498  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   499  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   500  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   501   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   502  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   503  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   504  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   505  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   506  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   507  /** \brief API to acquire the mutex (binary semaphore).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   508   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   509   * This API can be used to acquire/get the mutex.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   510   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   511   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   512   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   513   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   514   *    IfxCpu_mutexLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   515   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   516   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   517   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   518   *      IfxCpu_releaseMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   519   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   520   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   521   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   522   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   523  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   524  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   525  /** \brief API to unlock the mutex .
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   526   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   527   * This API can be used to unlock the previously acquired mutex
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   528   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   529   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   530   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   531   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   532   *    IfxCpu_mutexLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   533   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   534   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   535   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   536   *      IfxCpu_releaseMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   537   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   538   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   539   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   540   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   541  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   542  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   543  /** \brief API to unlock the resource .
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   544   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   545   * This API can be used to unlock the previously acquired lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   546   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   547   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   548   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   549  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   550  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   551  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   552   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   553   * This API can be used to spin lock for the lock for the given timeout period.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   554   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   555   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   556   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   557   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   558   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   559   *    IfxCpu_spinLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   560   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   561   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   562   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   563   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   564   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   565   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   566   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   567   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   568  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   569  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   570  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   572  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   573   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   574  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   575  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   577  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   578  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   579  /** \brief API to get random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   580   * \param seed Pointer to seed value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   581   * \return random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   582   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   583  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   584  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   585  /** \brief API to get random value with in the range
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   586   * \param seed Pointer to seed value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   587   * \param min minimum range value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   588   * \param max maximum range value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   589   * \return random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   590   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   591  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   592  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   593  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   594   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   595   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   596   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   597   * CORE_ID register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   598   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   600   * e.g:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   601   * 1. Check for synchronisation between core 0 and core 5
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   602   * # define 0x41U
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   603   * 2. Check for synchronisation between core 0 to core 5
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   604   * # define 0x5FU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   605   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   606   * Note:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   607   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   608   * Core 0: 0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   609   * Core 1: 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   610   * Core 2: 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   611   * Core 3: 3
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   612   * Core 4: 4
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   613   * Core 5: 6
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   614   * \param event Synchronous Event
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   615   * \param timeoutMilliSec timeout in millisec
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   616   * \return Error condition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   617   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   618   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   619   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   620   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   621   * // Global variable. preferably located in  shared memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   622   * IfxCpu_syncEvent event;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   623   * boolean errorVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   624   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   625   * // Below code should be repeated in Each core
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   626   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   627   * // Upon reaching Synchonisation point
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   628   * IfxCpu_emitEvent(&event);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   629   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   630   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   631   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   632   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   633   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   634  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   635  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   636  /** \brief This function sets a bit corresponding to the core in the event.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   637   * \param event Synchronous Event
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   638   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   639   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   640   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   641   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   642   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   643  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   644  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   645  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   646  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   647  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   648  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   649  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   650  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   651  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   652  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   653      Ifx_CPU_ICR reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   654      reg.U = __mfcr(CPU_ICR);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   655      return reg.B.IE != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   656  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   657  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   658  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   659  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   660  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   661      boolean enabled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   662      enabled = IfxCpu_areInterruptsEnabled();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   663      __disable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   664      __nop();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   665      return enabled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   666  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   667  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   668  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   670  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   671      __enable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   672  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   673  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   674  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   675  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   676  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   677      uint32 cpu_pmaVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   678      uint16 checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   679      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   680      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   681  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   682      /*resolve the restrictions*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   683      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   684      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   685  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   686      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   687      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   688          segmentNumberMask |= checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   689      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   690  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   691      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   692  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   693      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   694  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   695      /*The CPU_PMA registers are ENDINIT protected*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   696      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   697      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   698      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   699      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   700      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   701      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   702      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   703  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   704  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   705  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   707  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   708      uint32 cpu_pmaVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   709      uint16 checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   710      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   711      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   712  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   713      /*resolve the restrictions*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   714      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   715      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   716  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   717      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   718      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   719          segmentNumberMask |= checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   720      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   721  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   722      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   723  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   724      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   725  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   726      /*The CPU_PMA registers are ENDINIT protected*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   727      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   728      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   729      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   730      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   731      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   732      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   733      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   734  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   735  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   736  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   737  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   738  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   739      __disable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   740      __nop();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   741  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   742  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   743  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   744  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   745  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   746      Ifx_CPU *module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   747  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   748      if (cpu < IfxCpu_ResourceCpu_none)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   749      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   750          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   751      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   752      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   753      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   754          module = NULL_PTR;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   755      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   756  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   757      return module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   758  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   759  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   760  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   761  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   762  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   763      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   764  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   765  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   766  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   767  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   768  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   769      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   770  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   771  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   772  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   773  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   774  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   775      Ifx_CPU_CORE_ID reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   776      reg.U = __mfcr(CPU_CORE_ID);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   778  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   780  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   781  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   782  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   783      Ifx_CPU_CORE_ID reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   784      reg.U = __mfcr(CPU_CORE_ID);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   785      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   786  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   787  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   789  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   790  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   791      return IfxCpu_getPerformanceCounter(CPU_ICNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   792  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   793  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   794  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   795  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   796  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   797      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_ICNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   798  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   800  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   801  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   802  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   803      Ifx_CPU_CCNT ccnt;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   804  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   805      if (address == CPU_CCNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   806      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   807          ccnt.U = __mfcr(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   808      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   809      else if (address == CPU_ICNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   810      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   811          ccnt.U = __mfcr(CPU_ICNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   812      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   813      else if (address == CPU_M1CNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   814      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   815          ccnt.U = __mfcr(CPU_M1CNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   816      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   817      else if (address == CPU_M2CNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   818      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   819          ccnt.U = __mfcr(CPU_M2CNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   820      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   821      else if (address == CPU_M3CNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   822      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   823          ccnt.U = __mfcr(CPU_M3CNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   824      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   825  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   826      return ccnt.B.CountValue;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   827  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   828  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   830  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   831  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   832      Ifx_CPU_CCNT ccnt;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   833  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   834      if (address == CPU_CCNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   835      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   836          ccnt.U = __mfcr(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   837      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   838      else if (address == CPU_ICNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   839      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   840          ccnt.U = __mfcr(CPU_ICNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   841      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   842      else if (address == CPU_M1CNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   844          ccnt.U = __mfcr(CPU_M1CNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   846      else if (address == CPU_M2CNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   848          ccnt.U = __mfcr(CPU_M2CNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   850      else if (address == CPU_M3CNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   851      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   852          ccnt.U = __mfcr(CPU_M3CNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   853      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   855      return ccnt.B.SOvf;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   856  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   857  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   858  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   859  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   860  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   861      uint32  k;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   862      uint32  nxt_cxi_val = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   863      uint32 *prvCsa      = 0U;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   864      uint32 *nxtCsa      = csaBegin;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   865      uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   867      for (k = 0; k < numOfCsa; k++)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   868      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   869          nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28)) >> 12 | ((uint32)nxtCsa & (0XFFFFU << 6)) >> 6;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   870  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   871          if (k == 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   872          {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   873              __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   874          }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   875          else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   876          {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   877              *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   878          }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   879  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   880          if (k == (numOfCsa - 3U))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   881          {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   882              __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   883          }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   884  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   885          prvCsa  = (uint32 *)nxtCsa;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   886          nxtCsa += 16;           /* next CSA */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   887      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   888  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   889      *prvCsa = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   890  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   891  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   892  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   893  IFX_INLINE void IfxCpu_invalidateProgramCache(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   894  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   895      uint16 cpuWdtPassword = IfxScuWdt_getCpuWatchdogPassword();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   896      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   897          IfxScuWdt_clearCpuEndinit(cpuWdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   898          Ifx_CPU_PCON1 pcon1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   899          pcon1.U       = __mfcr(CPU_PCON1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   900          pcon1.B.PCINV = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   901          __mtcr(CPU_PCON1, pcon1.U);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   902          IfxScuWdt_setCpuEndinit(cpuWdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   903      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   904  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   905  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   906  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   907  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   908  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   909      uint8 segment = (uint32)address >> 24;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   910      return ((segment == IFXCPU_CACHABLE_FLASH_SEGMENT) || (segment == IFXCPU_CACHABLE_LMU_SEGMENT)) ? TRUE : FALSE;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   911  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   912  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   913  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   914  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   915  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   916      Ifx_CPU_CCTRL cctrl;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   917      cctrl.U    = __mfcr(CPU_CCTRL);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   918      /*Disable the counters */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   919      cctrl.B.CE = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   920      __mtcr(CPU_CCTRL, cctrl.U);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   921  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   922      /* reset the counters */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   923      __mtcr(CPU_CCNT, 0);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   924      __mtcr(CPU_ICNT, 0);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   925      __mtcr(CPU_M1CNT, 0);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   926      __mtcr(CPU_M2CNT, 0);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   927      __mtcr(CPU_M3CNT, 0);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   928  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   929      /*Enable the counters, set the counter mode */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   930      cctrl.B.CE = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   931      cctrl.B.CM = mode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   932      __mtcr(CPU_CCTRL, cctrl.U);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   933  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   934  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   935  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   936  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   937  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   938      if (enabled != FALSE)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   939      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   940          __enable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   941      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   942  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   943  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   944  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   945  IFX_INLINE void IfxCpu_setDataCache(boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   946  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   947      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   948      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   949      /*PCACHE enable steps */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   950      {                           /* Step 1: Set PCBYP to 0 if cache is enabled */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   951          IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   952          Ifx_CPU_DCON0 dcon0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   953          dcon0.U       = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   954          dcon0.B.DCBYP = enable ? 0 : 1; /*depending on the enable bypas bit is reset/set */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   955          __mtcr(CPU_DCON0, dcon0.U);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   956          IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   957      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   958      /* Step 2: Call Isync */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   959      __isync();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   960  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   961  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   962  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   963  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   964  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   965      Ifx_CPU_CCTRL cctrl;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   966      cctrl.U    = __mfcr(CPU_CCTRL);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   967      cctrl.B.CE = enable;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   968      __mtcr(CPU_CCTRL, cctrl.U);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   969  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   970  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   971  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   972  IFX_INLINE void IfxCpu_setProgramCache(boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   973  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   974      if (enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   975      {                           /* Step 3: Initiate invalidation of current cache contents if any */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   976          Ifx_CPU_PCON1 pcon1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   977          pcon1.U       = 0;
	mov	d15,#0
.L150:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   978          pcon1.B.PCINV = 1;
	or	d15,#1
.L194:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   979          __mtcr(CPU_PCON1, pcon1.U);
	mtcr	#37380,d15
	isync

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   974      if (enable)      (inlined)
.L3:
	mfcr	d15,#65052
.L151:
	and	d2,d15,#7
.L195:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   785      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;      (inlined)
	j	.L4

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   786  }      (inlined)
.L4:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   980      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   981  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   982      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   983      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
	mul	d0,d2,#12
	mov.a	a15,d0
	movh.a	a3,#61443
	add.a	a3,a15
	lea	a15,[a3]24832
.L85:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   456      {}
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   457  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   458  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   459  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   460  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   461  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   463      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   464          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   465          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   466                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   467                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   468                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   469      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   470  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   471      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   472      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   473                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   474                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   475                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   476  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   477      /* read back ENDINIT and wait until it has been cleared */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   479      {}
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   480  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   481  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   482  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   483  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   484  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   485      uint16 password;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   486  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   487      /* Read Password from CON0 register
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   488       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   489       * to toggle them before returning password */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   490      password  = watchdog->CON0.B.PW;
	ld.w	d0,[a15]
	extr.u	d0,d0,#2,#14
.L153:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   491      password ^= 0x003F;
	xor	d3,d0,#63
.L154:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   493      return password;      (inlined)
	j	.L5

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   494  }      (inlined)
.L5:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   984      /*PCACHE enable steps */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   985      {                           /* Step 1: Set PCBYP to 0 if cache is enabled */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   986          IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
	mul	d0,d2,#12
	mov.a	a15,d0
	movh.a	a3,#61443
	add.a	a3,a15
	lea	a15,[a3]24832
.L88:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
	ld.w	d15,[a15]
.L152:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L6
.L196:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d15,d3,#2
	or	d15,#1
.L197:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L198:
	sha	d0,d0,#16
.L199:
	or	d0,d15
.L200:
	st.w	[a15],d0

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)      (inlined)
.L6:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d15,d3,#2
	or	d15,#2
.L201:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L202:
	sha	d0,d0,#16
.L203:
	or	d15,d0
.L204:
	st.w	[a15],d15
.L205:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
	j	.L7
.L8:
.L7:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
	ld.w	d15,[a15]
	and	d15,#1
.L206:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
	jeq	d15,#1,.L8
.L89:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   987          Ifx_CPU_PCON0 pcon0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   988          pcon0.U       = 0;
	mov	d15,#0
.L156:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   989          pcon0.B.PCBYP = enable ? 0 : 1; /*depending on the enable bypass bit is reset/set */      (inlined)
	jeq	d1,#0,.L9
.L207:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   989          pcon0.B.PCBYP = enable ? 0 : 1; /*depending on the enable bypass bit is reset/set */
	mov	d0,#0
.L208:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   989          pcon0.B.PCBYP = enable ? 0 : 1; /*depending on the enable bypass bit is reset/set */      (inlined)
	j	.L10
.L9:
	mov	d0,#1

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   989          pcon0.B.PCBYP = enable ? 0 : 1; /*depending on the enable bypass bit is reset/set */      (inlined)
.L10:
	insert	d15,d15,d0,#1,#1
.L209:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   990          __mtcr(CPU_PCON0, pcon0.U);
	mtcr	#37388,d15
	isync
.L210:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   991          IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
	mul	d15,d2,#12
.L157:
	mov.a	a15,d15
	movh.a	a3,#61443
	add.a	a3,a15
	lea	a15,[a3]24832
.L100:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   456      {}
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   457  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   458  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   459  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   460  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   461  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   463      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   464          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   465          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   466                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   467                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   468                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   469      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   470  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   471      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   472      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   473                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   474                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   475                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   476  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   477      /* read back ENDINIT and wait until it has been cleared */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   479      {}
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   480  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   481  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   482  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   483  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   484  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   485      uint16 password;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   486  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   487      /* Read Password from CON0 register
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   488       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   489       * to toggle them before returning password */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   490      password  = watchdog->CON0.B.PW;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   491      password ^= 0x003F;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   492  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   493      return password;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   494  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   495  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   496  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   497  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   498  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   499      return (boolean)watchdog->CON0.B.ENDINIT;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   500  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   501  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   502  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   503  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   504  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   505      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   506  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   507  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   508  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   509  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   510  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   511      uint16        password;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   512      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   513  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   514      /* Read Password from Safety WDT CON0 register
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   515       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   516       * to toggle them before returning password */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   517      password  = watchdog->CON0.B.PW;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   518      password ^= 0x003F;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   519  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   520      return password;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   521  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   522  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   523  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   524  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   525  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   526      if (watchdog->CON0.B.LCK)
	ld.w	d15,[a15]
.L211:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   526      if (watchdog->CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L11
.L212:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   527      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   528          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   529          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   530                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   531                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d15,d3,#2
	or	d15,#1
.L213:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   532                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L214:
	sha	d0,d0,#16
.L215:
	or	d15,d0
.L216:
	st.w	[a15],d15

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   526      if (watchdog->CON0.B.LCK)      (inlined)
.L11:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   533      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   534  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   535      /* Set ENDINT and set LCK bit in Config_0 register */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   536      watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   537                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   538                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d3,#2
.L155:
	or	d15,d3,#3
.L217:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   539                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L218:
	sha	d0,d0,#16
.L219:
	or	d15,d0
.L220:
	st.w	[a15],d15
.L221:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   542      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
	j	.L12
.L13:
.L12:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   540  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   541      /* read back ENDINIT and wait until it has been set */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   542      while (watchdog->CON0.B.ENDINIT == 0)
	ld.w	d15,[a15]
.L222:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   542      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
	jz.t	d15:0,.L13
.L96:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   992      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   993      /* Step 2: Call Isync */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   994      __isync();
	isync
.L70:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   128  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   129      /*enable/disable data cache depending on the configuration */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   130      IfxCpu_setDataCache(IFX_CFG_CPU_CSTART_ENABLE_TRICORE0_DCACHE);
	mov	d1,#1
.L107:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    44   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    45   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    46   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    47   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    48   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    49   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    50   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    51   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    52   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    53   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    54   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    55   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    56   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    57   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    58   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    59   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    60   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    61   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    63  #ifndef IFXCPU_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    64  #define IFXCPU_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    65  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    66  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    67  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    68  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    69  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    70  #include "_Impl/IfxCpu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    71  #include "IfxSrc_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    72  #include "IfxScu_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    73  #include "IfxStm_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    74  #include "_Impl/IfxScu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    75  #include "_Utilities/Ifx_Assert.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    76  #include "Scu/Std/IfxScuWdt.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    77  #include "Scu/Std/IfxScuCcu.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    78  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    79  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    80  /*-----------------------------------Macros-----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    81  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    82  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    83  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    84   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    85   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    86   * the CPU number.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    87   * Example usage:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    88   *  \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    89   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    90   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    91   *  \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    92   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    93  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    94  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    95  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    96   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    97   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    98   * the CPU number.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    99   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   100   *   Example usage:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   101   *   \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   102   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   103   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   104   *   \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   105   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   106  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   107  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   108  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   109  /*------------------------------Type Definitions------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   110  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   111  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   112  /** \brief Lock type Spin lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   113   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   114  typedef unsigned int IfxCpu_spinLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   115  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Lock type Mutex lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   117   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   118  typedef unsigned int IfxCpu_mutexLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   119  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   120  /** \brief Event used for synchronisation.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   121   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   122  typedef unsigned int IfxCpu_syncEvent;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   123  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   124  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   125  /*--------------------------------Enumerations--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   127  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   128  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   129   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   130  /** \brief Enumeration for the Cpu mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   131   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   132  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   133  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_halt,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_run,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_idle,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   137      IfxCpu_CoreMode_sleep,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   138      IfxCpu_CoreMode_stby,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   139      IfxCpu_CoreMode_unknown
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   140  } IfxCpu_CoreMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   141  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance conunter modes
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   143   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   144  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   145  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   148  } IfxCpu_CounterMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   149  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   150  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   151  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   152  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   153  /*-----------------------------Data Structures--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   154  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   155  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   156  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   157   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   158  /** \brief counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   159   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   160  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   161  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   162      uint32  counter;        /**< \brief Counter value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   163      boolean overlfow;       /**< \brief sticky overlfow */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_Counter;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   166  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   167  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   168  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   169   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   170  /** \brief Performance counter result
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   171   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   172  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   173  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_Perf;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   181  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   182  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   183  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   184   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   185  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   187  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   188  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief API to get the address for CPU HW module register memory map
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   191   * \param cpu Resource index of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   192   * \return CPU module register address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   193   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   194  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   195  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief API to get core id of the CPU of the caller.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   197   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   198   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   199   * \return Resource index of the CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   200   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   201  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   202  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   203  /** \brief API to get cpu index of the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   204   * Note: This api can be used whereever cpu no/index is needed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   205   * \return Resource index of the CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   206   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   207  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   208  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   209  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   210   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   211   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   212   * shall not be used to initialize the CSA of another CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   213   * \param csaBegin Pointer to start of context save area
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   214   * \param csaEnd Pointer to end of context save area
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   215   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   216   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   217  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   219  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   220   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   221   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   222  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   224  /** \brief Triggers Software Reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   225   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   226   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   227  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   228  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   229  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   230  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   231  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   232  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   233  /** \brief API to get current mode of CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   234   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   235   * \return Current mode of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   236   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   237  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   238  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   239  /** \brief API to get current mode of CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   240   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   241   * \return Resource index of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   242   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   243  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   244  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   245  /** \brief API to set mode of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   246   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   247   * \param mode CPU mode to be set by this API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   248   * \return Success status of the activity (setting the core mode).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   249   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   250   * \retval FALSE: If the activity can't be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   251   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   252  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   253  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   254  /** \brief API to set the program counter for the CPU specified.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   255   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   256   * \param programCounter Program counter value to be set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   257   * \return success status of the activity (setting program counter value).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   258   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   259   * \retval FALSE: If the activity can't be performed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   260   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   261  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   262  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   263  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   264   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   265   * \param programCounter Program counter value to start the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   266   * \return success status of the activity (setting program counter value).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   268   * \retval FALSE: If the activity can't be performed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   269   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   270  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   271  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   272  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   273  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   274  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   275   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   277  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   278  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   279  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   280  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   281  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   282   * This API provides the status of CPU where this API is called
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   283   * \return Status of global interrupt enable bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   284   * \retval TRUE: Global interrupts enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   285   * \retval FALSE: Global interrupts disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   286   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   287  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   288  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   289  /** \brief API to disable global interrupt and return the previous status.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   290   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   291   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   292   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   293   * \return Previous status of global interrupt enable bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   294   * \retval TRUE: Previously, global interrupts enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   295   * \retval FALSE: Previously, global interrupts disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   296   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   297  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   298  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   299  /** \brief API to enable global interrupt.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   300   * This API simply enables the global interrupt.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   301   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   302   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   303  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   304  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   305  /** \brief Disable the Global Interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   306   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   311   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   312   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   313   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   314   * \param enabled Previous status of the global interrupt enable bit
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   315   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   329   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   330   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   331   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   332   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   333   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   334   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   335  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   336  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   337  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   338   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   339   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   340   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   341   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to invalidate the program cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   352   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   353   * \return Status TRUE/FALSE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enable Command to enable or bypass the data cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   362   * TRUE: Enable the data cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   363   * FALSE: Bypass the data cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   364   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   369   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   371   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   372   * \param enable Command to enable or bypass the program cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   373   * TRUE: Enable the program cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   374   * FALSE: Bypass the program cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   375   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   376   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   377  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   378  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   379  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   380  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   381  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   382   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   384  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   385  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   386  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   387  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   388  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   389   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   390   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   391   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   392   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   393   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   394  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   395  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   396  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   397   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   398   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   399   * It cannot be used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   400   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   401   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   402   * reading the counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   403   * \return Status of sticky overflow bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   404   * \retval TRUE: Sticky overflow bit is set.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   405   * \retval FALSE: Sticky overflow bit is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   406   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   408  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   410   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   413   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   414   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   415  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   416  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   417  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   418   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   419   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   420   * It cannot be used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   421   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   422   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   423   * reading the counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   424   * \return Status of sticky overflow bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   425   * \retval TRUE: Sticky overflow bit is set.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   426   * \retval FALSE: Sticky overflow bit is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   427   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   428  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   429  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   430  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   431   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   432   * \return counter value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   433   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   434  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   435  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   436  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   437   * This is generic function to get sticky overflow bit of any performance counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   438   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief Reset and start instruction, clock and multi counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   445   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   446   * \param mode Counter mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   448   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   450  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   452   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   455   * \param enable enable Command to enable or disable the performance counter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   456   * TRUE: Enable the performance counter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   457   * FALSE: Disable the performance counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   458   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   459   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   460  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   461  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   462  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   463  /** \brief Stop instruction and clock counters, return their values
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   464   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   465   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   466   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   467   * \return Performance counter result
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   468   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   470  #endif
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   471  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   472  /** \brief API to update clock counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   473   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   474   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   475   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   476   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   477   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   478   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   479  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   480  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   481  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   482   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   483   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   484   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   485   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   486   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief API to update performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   491   * This is generic function to update any of the performance counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   492   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   493   * \param count Count
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   498  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   499  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   500  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   501   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   502  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   503  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   504  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   505  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   506  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   507  /** \brief API to acquire the mutex (binary semaphore).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   508   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   509   * This API can be used to acquire/get the mutex.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   510   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   511   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   512   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   513   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   514   *    IfxCpu_mutexLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   515   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   516   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   517   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   518   *      IfxCpu_releaseMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   519   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   520   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   521   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   522   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   523  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   524  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   525  /** \brief API to unlock the mutex .
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   526   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   527   * This API can be used to unlock the previously acquired mutex
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   528   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   529   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   530   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   531   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   532   *    IfxCpu_mutexLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   533   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   534   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   535   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   536   *      IfxCpu_releaseMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   537   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   538   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   539   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   540   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   541  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   542  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   543  /** \brief API to unlock the resource .
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   544   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   545   * This API can be used to unlock the previously acquired lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   546   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   547   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   548   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   549  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   550  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   551  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   552   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   553   * This API can be used to spin lock for the lock for the given timeout period.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   554   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   555   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   556   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   557   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   558   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   559   *    IfxCpu_spinLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   560   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   561   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   562   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   563   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   564   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   565   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   566   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   567   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   568  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   569  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   570  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   572  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   573   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   574  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   575  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   577  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   578  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   579  /** \brief API to get random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   580   * \param seed Pointer to seed value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   581   * \return random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   582   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   583  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   584  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   585  /** \brief API to get random value with in the range
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   586   * \param seed Pointer to seed value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   587   * \param min minimum range value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   588   * \param max maximum range value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   589   * \return random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   590   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   591  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   592  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   593  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   594   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   595   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   596   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   597   * CORE_ID register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   598   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   600   * e.g:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   601   * 1. Check for synchronisation between core 0 and core 5
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   602   * # define 0x41U
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   603   * 2. Check for synchronisation between core 0 to core 5
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   604   * # define 0x5FU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   605   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   606   * Note:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   607   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   608   * Core 0: 0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   609   * Core 1: 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   610   * Core 2: 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   611   * Core 3: 3
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   612   * Core 4: 4
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   613   * Core 5: 6
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   614   * \param event Synchronous Event
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   615   * \param timeoutMilliSec timeout in millisec
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   616   * \return Error condition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   617   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   618   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   619   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   620   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   621   * // Global variable. preferably located in  shared memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   622   * IfxCpu_syncEvent event;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   623   * boolean errorVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   624   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   625   * // Below code should be repeated in Each core
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   626   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   627   * // Upon reaching Synchonisation point
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   628   * IfxCpu_emitEvent(&event);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   629   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   630   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   631   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   632   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   633   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   634  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   635  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   636  /** \brief This function sets a bit corresponding to the core in the event.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   637   * \param event Synchronous Event
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   638   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   639   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   640   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   641   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   642   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   643  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   644  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   645  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   646  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   647  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   648  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   649  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   650  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   651  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   652  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   653      Ifx_CPU_ICR reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   654      reg.U = __mfcr(CPU_ICR);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   655      return reg.B.IE != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   656  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   657  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   658  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   659  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   660  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   661      boolean enabled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   662      enabled = IfxCpu_areInterruptsEnabled();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   663      __disable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   664      __nop();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   665      return enabled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   666  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   667  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   668  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   670  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   671      __enable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   672  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   673  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   674  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   675  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   676  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   677      uint32 cpu_pmaVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   678      uint16 checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   679      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   680      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   681  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   682      /*resolve the restrictions*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   683      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   684      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   685  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   686      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   687      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   688          segmentNumberMask |= checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   689      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   690  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   691      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   692  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   693      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   694  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   695      /*The CPU_PMA registers are ENDINIT protected*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   696      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   697      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   698      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   699      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   700      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   701      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   702      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   703  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   704  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   705  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   707  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   708      uint32 cpu_pmaVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   709      uint16 checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   710      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   711      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   712  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   713      /*resolve the restrictions*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   714      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   715      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   716  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   717      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   718      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   719          segmentNumberMask |= checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   720      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   721  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   722      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   723  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   724      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   725  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   726      /*The CPU_PMA registers are ENDINIT protected*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   727      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   728      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   729      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   730      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   731      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   732      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   733      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   734  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   735  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   736  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   737  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   738  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   739      __disable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   740      __nop();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   741  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   742  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   743  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   744  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   745  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   746      Ifx_CPU *module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   747  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   748      if (cpu < IfxCpu_ResourceCpu_none)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   749      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   750          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   751      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   752      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   753      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   754          module = NULL_PTR;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   755      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   756  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   757      return module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   758  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   759  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   760  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   761  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   762  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   763      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   764  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   765  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   766  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   767  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   768  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   769      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   770  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   771  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   772  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   773  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   774  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   775      Ifx_CPU_CORE_ID reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   776      reg.U = __mfcr(CPU_CORE_ID);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   778  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   780  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   781  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   782  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   783      Ifx_CPU_CORE_ID reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   784      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L158:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   785      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
	and	d2,d15,#7
.L223:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   785      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;      (inlined)
	j	.L14

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   786  }      (inlined)
.L14:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   786  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   787  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   789  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   790  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   791      return IfxCpu_getPerformanceCounter(CPU_ICNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   792  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   793  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   794  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   795  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   796  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   797      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_ICNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   798  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   800  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   801  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   802  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   803      Ifx_CPU_CCNT ccnt;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   804  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   805      if (address == CPU_CCNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   806      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   807          ccnt.U = __mfcr(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   808      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   809      else if (address == CPU_ICNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   810      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   811          ccnt.U = __mfcr(CPU_ICNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   812      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   813      else if (address == CPU_M1CNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   814      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   815          ccnt.U = __mfcr(CPU_M1CNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   816      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   817      else if (address == CPU_M2CNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   818      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   819          ccnt.U = __mfcr(CPU_M2CNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   820      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   821      else if (address == CPU_M3CNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   822      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   823          ccnt.U = __mfcr(CPU_M3CNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   824      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   825  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   826      return ccnt.B.CountValue;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   827  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   828  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   830  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   831  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   832      Ifx_CPU_CCNT ccnt;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   833  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   834      if (address == CPU_CCNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   835      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   836          ccnt.U = __mfcr(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   837      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   838      else if (address == CPU_ICNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   839      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   840          ccnt.U = __mfcr(CPU_ICNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   841      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   842      else if (address == CPU_M1CNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   844          ccnt.U = __mfcr(CPU_M1CNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   846      else if (address == CPU_M2CNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   848          ccnt.U = __mfcr(CPU_M2CNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   850      else if (address == CPU_M3CNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   851      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   852          ccnt.U = __mfcr(CPU_M3CNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   853      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   855      return ccnt.B.SOvf;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   856  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   857  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   858  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   859  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   860  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   861      uint32  k;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   862      uint32  nxt_cxi_val = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   863      uint32 *prvCsa      = 0U;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   864      uint32 *nxtCsa      = csaBegin;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   865      uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   867      for (k = 0; k < numOfCsa; k++)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   868      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   869          nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28)) >> 12 | ((uint32)nxtCsa & (0XFFFFU << 6)) >> 6;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   870  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   871          if (k == 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   872          {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   873              __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   874          }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   875          else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   876          {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   877              *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   878          }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   879  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   880          if (k == (numOfCsa - 3U))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   881          {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   882              __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   883          }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   884  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   885          prvCsa  = (uint32 *)nxtCsa;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   886          nxtCsa += 16;           /* next CSA */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   887      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   888  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   889      *prvCsa = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   890  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   891  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   892  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   893  IFX_INLINE void IfxCpu_invalidateProgramCache(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   894  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   895      uint16 cpuWdtPassword = IfxScuWdt_getCpuWatchdogPassword();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   896      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   897          IfxScuWdt_clearCpuEndinit(cpuWdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   898          Ifx_CPU_PCON1 pcon1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   899          pcon1.U       = __mfcr(CPU_PCON1);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   900          pcon1.B.PCINV = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   901          __mtcr(CPU_PCON1, pcon1.U);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   902          IfxScuWdt_setCpuEndinit(cpuWdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   903      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   904  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   905  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   906  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   907  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   908  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   909      uint8 segment = (uint32)address >> 24;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   910      return ((segment == IFXCPU_CACHABLE_FLASH_SEGMENT) || (segment == IFXCPU_CACHABLE_LMU_SEGMENT)) ? TRUE : FALSE;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   911  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   912  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   913  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   914  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   915  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   916      Ifx_CPU_CCTRL cctrl;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   917      cctrl.U    = __mfcr(CPU_CCTRL);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   918      /*Disable the counters */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   919      cctrl.B.CE = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   920      __mtcr(CPU_CCTRL, cctrl.U);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   921  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   922      /* reset the counters */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   923      __mtcr(CPU_CCNT, 0);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   924      __mtcr(CPU_ICNT, 0);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   925      __mtcr(CPU_M1CNT, 0);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   926      __mtcr(CPU_M2CNT, 0);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   927      __mtcr(CPU_M3CNT, 0);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   928  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   929      /*Enable the counters, set the counter mode */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   930      cctrl.B.CE = 1;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   931      cctrl.B.CM = mode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   932      __mtcr(CPU_CCTRL, cctrl.U);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   933  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   934  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   935  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   936  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   937  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   938      if (enabled != FALSE)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   939      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   940          __enable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   941      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   942  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   943  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   944  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   945  IFX_INLINE void IfxCpu_setDataCache(boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   946  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   947      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   948      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
	mul	d0,d2,#12
	mov.a	a15,d0
	movh.a	a3,#61443
	add.a	a3,a15
	lea	a15,[a3]24832
.L115:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   456      {}
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   457  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   458  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   459  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   460  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   461  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   463      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   464          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   465          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   466                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   467                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   468                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   469      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   470  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   471      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   472      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   473                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   474                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   475                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   476  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   477      /* read back ENDINIT and wait until it has been cleared */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   479      {}
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   480  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   481  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   482  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   483  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   484  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   485      uint16 password;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   486  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   487      /* Read Password from CON0 register
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   488       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   489       * to toggle them before returning password */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   490      password  = watchdog->CON0.B.PW;
	ld.w	d0,[a15]
	extr.u	d0,d0,#2,#14
.L160:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   491      password ^= 0x003F;
	xor	d3,d0,#63
.L161:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   493      return password;      (inlined)
	j	.L15

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   494  }      (inlined)
.L15:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   949      /*PCACHE enable steps */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   950      {                           /* Step 1: Set PCBYP to 0 if cache is enabled */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   951          IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
	mul	d0,d2,#12
	mov.a	a15,d0
	movh.a	a3,#61443
	add.a	a3,a15
	lea	a15,[a3]24832
.L117:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
	ld.w	d15,[a15]
.L159:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L16
.L224:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d15,d3,#2
	or	d15,#1
.L225:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L226:
	sha	d0,d0,#16
.L227:
	or	d0,d15
.L228:
	st.w	[a15],d0

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)      (inlined)
.L16:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d15,d3,#2
	or	d15,#2
.L229:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L230:
	sha	d0,d0,#16
.L231:
	or	d15,d0
.L232:
	st.w	[a15],d15
.L233:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
	j	.L17
.L18:
.L17:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
	ld.w	d15,[a15]
	and	d15,#1
.L234:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
	jeq	d15,#1,.L18
.L118:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   952          Ifx_CPU_DCON0 dcon0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   953          dcon0.U       = 0;
	mov	d15,#0
.L163:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   954          dcon0.B.DCBYP = enable ? 0 : 1; /*depending on the enable bypas bit is reset/set */      (inlined)
	jeq	d1,#0,.L19
.L235:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   954          dcon0.B.DCBYP = enable ? 0 : 1; /*depending on the enable bypas bit is reset/set */
	mov	d0,#0
.L236:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   954          dcon0.B.DCBYP = enable ? 0 : 1; /*depending on the enable bypas bit is reset/set */      (inlined)
	j	.L20
.L19:
	mov	d0,#1

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   954          dcon0.B.DCBYP = enable ? 0 : 1; /*depending on the enable bypas bit is reset/set */      (inlined)
.L20:
	insert	d15,d15,d0,#1,#1
.L237:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   955          __mtcr(CPU_DCON0, dcon0.U);
	mtcr	#36928,d15
	isync
.L238:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   956          IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
	mul	d15,d2,#12
.L164:
	mov.a	a15,d15
	movh.a	a3,#61443
	add.a	a3,a15
	lea	a15,[a3]24832
.L123:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   456      {}
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   457  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   458  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   459  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   460  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   461  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   463      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   464          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   465          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   466                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   467                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   468                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   469      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   470  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   471      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   472      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   473                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   474                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   475                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   476  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   477      /* read back ENDINIT and wait until it has been cleared */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   479      {}
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   480  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   481  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   482  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   483  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   484  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   485      uint16 password;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   486  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   487      /* Read Password from CON0 register
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   488       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   489       * to toggle them before returning password */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   490      password  = watchdog->CON0.B.PW;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   491      password ^= 0x003F;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   492  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   493      return password;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   494  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   495  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   496  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   497  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   498  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   499      return (boolean)watchdog->CON0.B.ENDINIT;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   500  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   501  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   502  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   503  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   504  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   505      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   506  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   507  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   508  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   509  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   510  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   511      uint16        password;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   512      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   513  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   514      /* Read Password from Safety WDT CON0 register
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   515       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   516       * to toggle them before returning password */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   517      password  = watchdog->CON0.B.PW;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   518      password ^= 0x003F;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   519  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   520      return password;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   521  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   522  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   523  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   524  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   525  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   526      if (watchdog->CON0.B.LCK)
	ld.w	d15,[a15]
.L239:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   526      if (watchdog->CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L21
.L240:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   527      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   528          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   529          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   530                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   531                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d15,d3,#2
	or	d15,#1
.L241:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   532                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L242:
	sha	d0,d0,#16
.L243:
	or	d15,d0
.L244:
	st.w	[a15],d15

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   526      if (watchdog->CON0.B.LCK)      (inlined)
.L21:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   533      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   534  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   535      /* Set ENDINT and set LCK bit in Config_0 register */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   536      watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   537                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   538                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d3,#2
.L162:
	or	d15,d3,#3
.L245:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   539                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L246:
	sha	d0,d0,#16
.L247:
	or	d15,d0
.L248:
	st.w	[a15],d15
.L249:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   542      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
	j	.L22
.L23:
.L22:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   540  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   541      /* read back ENDINIT and wait until it has been set */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   542      while (watchdog->CON0.B.ENDINIT == 0)
	ld.w	d15,[a15]
.L250:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   542      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
	jz.t	d15:0,.L23
.L120:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   957      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   958      /* Step 2: Call Isync */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   959      __isync();
	isync
.L108:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   131  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   132      /* Clear the ENDINIT bit in the WDT_CON0 register, inline funtion */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   133      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[0], cpuWdtPassword);
	movh.a	a15,#61443
	lea	a15,[a15]@los(0xf0036100)
.L124:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
	ld.w	d15,[a15]
.L251:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L24
.L252:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d15,d8,#2
	or	d15,#1
.L253:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L254:
	sha	d0,d0,#16
.L255:
	or	d15,d0
.L256:
	st.w	[a15],d15

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)      (inlined)
.L24:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d15,d8,#2
	or	d15,#2
.L257:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L258:
	sha	d0,d0,#16
.L259:
	or	d15,d0
.L260:
	st.w	[a15],d15
.L261:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
	j	.L25
.L26:
.L25:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
	ld.w	d15,[a15]
	and	d15,#1
.L262:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)      (inlined)
	jeq	d15,#1,.L26
.L125:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   134  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   135      /* Load Base Address of Trap Vector Table. */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   136      __mtcr(CPU_BTV, (uint32)__TRAPTAB(0));
	movh.a	a15,#@his(__TRAPTAB_CPU0)
	lea	a15,[a15]@los(__TRAPTAB_CPU0)
	mov.d	d15,a15
.L263:
	mtcr	#65060,d15
	isync
.L264:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   137  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   138      /* Load Base Address of Interrupt Vector Table. we will do this later in the program */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   139      __mtcr(CPU_BIV, (uint32)__INTTAB(0));
	movh.a	a15,#@his(__INTTAB_CPU0)
	lea	a15,[a15]@los(__INTTAB_CPU0)
	mov.d	d15,a15
.L265:
	mtcr	#65056,d15
	isync
.L266:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   140  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   141      /* Load interupt stack pointer. */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   142      __mtcr(CPU_ISP, (uint32)__ISTACK(0));
	movh.a	a15,#@his(__ISTACK0)
	lea	a15,[a15]@los(__ISTACK0)
	mov.d	d15,a15
.L267:
	mtcr	#65064,d15
	isync
.L268:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   143  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   144      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[0], cpuWdtPassword);
	movh.a	a15,#61443
	lea	a15,[a15]@los(0xf0036100)
.L126:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   456      {}
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   457  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   458  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   459  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   460  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   461  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   463      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   464          /* see Table 1 (Password Access Bit Pattern Requirements) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   465          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   466                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   467                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   468                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   469      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   470  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   471      /* Clear ENDINT and set LCK bit in Config_0 register */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   472      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   473                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   474                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   475                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   476  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   477      /* read back ENDINIT and wait until it has been cleared */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   479      {}
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   480  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   481  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   482  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   483  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   484  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   485      uint16 password;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   486  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   487      /* Read Password from CON0 register
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   488       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   489       * to toggle them before returning password */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   490      password  = watchdog->CON0.B.PW;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   491      password ^= 0x003F;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   492  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   493      return password;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   494  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   495  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   496  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   497  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   498  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   499      return (boolean)watchdog->CON0.B.ENDINIT;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   500  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   501  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   502  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   503  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   504  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   505      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   506  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   507  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   508  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   509  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   510  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   511      uint16        password;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   512      Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   513  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   514      /* Read Password from Safety WDT CON0 register
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   515       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   516       * to toggle them before returning password */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   517      password  = watchdog->CON0.B.PW;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   518      password ^= 0x003F;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   519  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   520      return password;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   521  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   522  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   523  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   524  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   525  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   526      if (watchdog->CON0.B.LCK)
	ld.w	d15,[a15]
.L269:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   526      if (watchdog->CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L27
.L270:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   527      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   528          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   529          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   530                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   531                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d15,d8,#2
	or	d15,#1
.L271:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   532                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L272:
	sha	d0,d0,#16
.L273:
	or	d15,d0
.L274:
	st.w	[a15],d15

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   526      if (watchdog->CON0.B.LCK)      (inlined)
.L27:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   533      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   534  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   535      /* Set ENDINT and set LCK bit in Config_0 register */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   536      watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   537                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   538                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sha	d15,d8,#2
	or	d15,#3
.L275:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   539                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a15]
	extr.u	d0,d0,#16,#16
.L276:
	sha	d0,d0,#16
.L277:
	or	d15,d0
.L278:
	st.w	[a15],d15
.L279:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   542      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
	j	.L28
.L29:
.L28:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   540  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   541      /* read back ENDINIT and wait until it has been set */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   542      while (watchdog->CON0.B.ENDINIT == 0)
	ld.w	d15,[a15]
.L280:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   542      while (watchdog->CON0.B.ENDINIT == 0)      (inlined)
	jz.t	d15:0,.L29
.L127:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   145  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   146      /* initialize SDA base pointers */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   147      __setareg(a0, __SDATA1(0));
	 movh.a	 a0,#@his(_SMALL_DATA_)
 lea	 a0,[a0]@los(_SMALL_DATA_)
.L281:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   148      __setareg(a1, __SDATA2(0));
	 movh.a	 a1,#@his(_LITERAL_DATA_)
 lea	 a1,[a1]@los(_LITERAL_DATA_)
.L282:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   149  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   150      /* These to be un commented if A8 and A9 are required to be initialized */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   151      __setareg(a8, __SDATA3(0));
	 movh.a	 a8,#@his(_A8_DATA_)
 lea	 a8,[a8]@los(_A8_DATA_)
.L283:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   152      __setareg(a9, __SDATA4(0));
	 movh.a	 a9,#@his(_A9_DATA_)
 lea	 a9,[a9]@los(_A9_DATA_)
.L284:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   153      /* Setup the context save area linked list. */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   154  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   155      IfxCpu_initCSA((uint32 *)__CSA(0), (uint32 *)__CSA_END(0));     /*Initialize the context save area for CPU0 */
	movh.a	a15,#@his(__CSA0)
.L165:
	lea	a15,[a15]@los(__CSA0)
.L285:
	movh.a	a2,#@his(__CSA0_END)
	lea	a2,[a2]@los(__CSA0_END)
.L129:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_11_0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    12   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    16   * terms of use are agreed, use of this file is subject to following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    17  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    18  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    20  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    22   * organization obtaining a copy of the software and accompanying 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    26   * Software is furnished to do so, all subject to the following:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    27  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    28   * The copyright notices in the Software and this entire statement, including
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    32   * solely in the form of machine-executable object code generated by a source
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    33   * language processor.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    34  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    41   * DEALINGS IN THE SOFTWARE.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    42  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    43   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    44   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    45   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    46   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    47   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    48   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    49   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    50   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    51   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    52   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    53   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    54   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    55   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    56   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    57   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    58   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    59   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    60   * \ingroup IfxLld_Cpu_Std
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    61   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    63  #ifndef IFXCPU_H
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    64  #define IFXCPU_H 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    65  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    66  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    67  /*----------------------------------Includes----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    68  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    69  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    70  #include "_Impl/IfxCpu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    71  #include "IfxSrc_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    72  #include "IfxScu_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    73  #include "IfxStm_reg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    74  #include "_Impl/IfxScu_cfg.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    75  #include "_Utilities/Ifx_Assert.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    76  #include "Scu/Std/IfxScuWdt.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    77  #include "Scu/Std/IfxScuCcu.h"
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    78  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    79  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    80  /*-----------------------------------Macros-----------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    81  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    82  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    83  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    84   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    85   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    86   * the CPU number.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    87   * Example usage:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    88   *  \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    89   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    90   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    91   *  \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    92   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    93  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    94  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    95  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    96   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    97   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    98   * the CPU number.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    99   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   100   *   Example usage:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   101   *   \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   102   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   103   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   104   *   \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   105   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   106  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   107  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   108  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   109  /*------------------------------Type Definitions------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   110  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   111  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   112  /** \brief Lock type Spin lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   113   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   114  typedef unsigned int IfxCpu_spinLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   115  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Lock type Mutex lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   117   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   118  typedef unsigned int IfxCpu_mutexLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   119  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   120  /** \brief Event used for synchronisation.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   121   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   122  typedef unsigned int IfxCpu_syncEvent;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   123  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   124  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   125  /*--------------------------------Enumerations--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   127  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   128  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   129   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   130  /** \brief Enumeration for the Cpu mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   131   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   132  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   133  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_halt,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_run,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_idle,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   137      IfxCpu_CoreMode_sleep,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   138      IfxCpu_CoreMode_stby,
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   139      IfxCpu_CoreMode_unknown
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   140  } IfxCpu_CoreMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   141  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance conunter modes
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   143   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   144  typedef enum
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   145  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   148  } IfxCpu_CounterMode;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   149  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   150  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   151  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   152  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   153  /*-----------------------------Data Structures--------------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   154  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   155  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   156  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   157   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   158  /** \brief counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   159   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   160  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   161  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   162      uint32  counter;        /**< \brief Counter value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   163      boolean overlfow;       /**< \brief sticky overlfow */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_Counter;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   166  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   167  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   168  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   169   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   170  /** \brief Performance counter result
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   171   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   172  typedef struct
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   173  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_Perf;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   181  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   182  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   183  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   184   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   185  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   187  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   188  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief API to get the address for CPU HW module register memory map
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   191   * \param cpu Resource index of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   192   * \return CPU module register address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   193   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   194  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   195  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief API to get core id of the CPU of the caller.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   197   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   198   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   199   * \return Resource index of the CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   200   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   201  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   202  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   203  /** \brief API to get cpu index of the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   204   * Note: This api can be used whereever cpu no/index is needed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   205   * \return Resource index of the CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   206   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   207  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   208  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   209  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   210   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   211   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   212   * shall not be used to initialize the CSA of another CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   213   * \param csaBegin Pointer to start of context save area
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   214   * \param csaEnd Pointer to end of context save area
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   215   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   216   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   217  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   219  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   220   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   221   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   222  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   224  /** \brief Triggers Software Reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   225   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   226   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   227  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   228  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   229  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   230  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   231  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   232  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   233  /** \brief API to get current mode of CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   234   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   235   * \return Current mode of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   236   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   237  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   238  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   239  /** \brief API to get current mode of CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   240   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   241   * \return Resource index of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   242   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   243  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   244  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   245  /** \brief API to set mode of the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   246   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   247   * \param mode CPU mode to be set by this API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   248   * \return Success status of the activity (setting the core mode).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   249   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   250   * \retval FALSE: If the activity can't be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   251   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   252  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   253  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   254  /** \brief API to set the program counter for the CPU specified.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   255   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   256   * \param programCounter Program counter value to be set
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   257   * \return success status of the activity (setting program counter value).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   258   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   259   * \retval FALSE: If the activity can't be performed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   260   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   261  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   262  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   263  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   264   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   265   * \param programCounter Program counter value to start the CPU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   266   * \return success status of the activity (setting program counter value).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval TRUE: If the activity successfully be performed.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   268   * \retval FALSE: If the activity can't be performed
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   269   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   270  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   271  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   272  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   273  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   274  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   275   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   277  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   278  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   279  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   280  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   281  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   282   * This API provides the status of CPU where this API is called
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   283   * \return Status of global interrupt enable bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   284   * \retval TRUE: Global interrupts enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   285   * \retval FALSE: Global interrupts disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   286   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   287  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   288  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   289  /** \brief API to disable global interrupt and return the previous status.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   290   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   291   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   292   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   293   * \return Previous status of global interrupt enable bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   294   * \retval TRUE: Previously, global interrupts enabled.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   295   * \retval FALSE: Previously, global interrupts disabled
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   296   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   297  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   298  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   299  /** \brief API to enable global interrupt.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   300   * This API simply enables the global interrupt.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   301   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   302   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   303  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   304  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   305  /** \brief Disable the Global Interrupt
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   306   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   311   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   312   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   313   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   314   * \param enabled Previous status of the global interrupt enable bit
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   315   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   329   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   330   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   331   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   332   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   333   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   334   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   335  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   336  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   337  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   338   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   339   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   340   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   341   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to invalidate the program cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   348   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   350  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   352   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   353   * \return Status TRUE/FALSE
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enable Command to enable or bypass the data cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   362   * TRUE: Enable the data cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   363   * FALSE: Bypass the data cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   364   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   365   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   369   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   371   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   372   * \param enable Command to enable or bypass the program cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   373   * TRUE: Enable the program cache.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   374   * FALSE: Bypass the program cache
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   375   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   376   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   377  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   378  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   379  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   380  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   381  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   382   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   384  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   385  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   386  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   387  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   388  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   389   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   390   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   391   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   392   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   393   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   394  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   395  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   396  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   397   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   398   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   399   * It cannot be used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   400   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   401   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   402   * reading the counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   403   * \return Status of sticky overflow bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   404   * \retval TRUE: Sticky overflow bit is set.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   405   * \retval FALSE: Sticky overflow bit is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   406   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   408  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   410   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   413   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   414   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   415  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   416  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   417  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   418   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   419   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   420   * It cannot be used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   421   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   422   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   423   * reading the counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   424   * \return Status of sticky overflow bit.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   425   * \retval TRUE: Sticky overflow bit is set.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   426   * \retval FALSE: Sticky overflow bit is reset
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   427   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   428  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   429  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   430  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   431   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   432   * \return counter value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   433   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   434  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   435  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   436  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   437   * This is generic function to get sticky overflow bit of any performance counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   438   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Status
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief Reset and start instruction, clock and multi counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   445   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   446   * \param mode Counter mode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   448   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   450  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   452   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   455   * \param enable enable Command to enable or disable the performance counter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   456   * TRUE: Enable the performance counter.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   457   * FALSE: Disable the performance counter
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   458   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   459   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   460  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   461  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   462  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   463  /** \brief Stop instruction and clock counters, return their values
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   464   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   465   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   466   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   467   * \return Performance counter result
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   468   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   470  #endif
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   471  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   472  /** \brief API to update clock counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   473   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   474   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   475   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   476   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   477   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   478   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   479  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   480  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   481  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   482   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   483   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   484   * used for this activity towards other CPUs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   485   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   486   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief API to update performance counter for the CPU which calls this API.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   491   * This is generic function to update any of the performance counters
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   492   * \param address Address
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   493   * \param count Count
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   498  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   499  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   500  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   501   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   502  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   503  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   504  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   505  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   506  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   507  /** \brief API to acquire the mutex (binary semaphore).
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   508   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   509   * This API can be used to acquire/get the mutex.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   510   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   511   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   512   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   513   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   514   *    IfxCpu_mutexLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   515   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   516   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   517   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   518   *      IfxCpu_releaseMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   519   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   520   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   521   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   522   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   523  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   524  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   525  /** \brief API to unlock the mutex .
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   526   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   527   * This API can be used to unlock the previously acquired mutex
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   528   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   529   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   530   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   531   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   532   *    IfxCpu_mutexLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   533   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   534   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   535   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   536   *      IfxCpu_releaseMutex(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   537   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   538   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   539   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   540   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   541  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   542  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   543  /** \brief API to unlock the resource .
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   544   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   545   * This API can be used to unlock the previously acquired lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   546   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   547   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   548   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   549  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   550  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   551  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   552   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   553   * This API can be used to spin lock for the lock for the given timeout period.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   554   * \param lock lock pointer
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   555   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   556   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   557   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   558   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   559   *    IfxCpu_spinLock resourceLock;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   560   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   561   *    if (flag){
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   562   *      // critical section
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   563   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   564   *    }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   565   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   566   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   567   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   568  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   569  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   570  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   572  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   573   * \{ */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   574  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   575  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   577  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   578  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   579  /** \brief API to get random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   580   * \param seed Pointer to seed value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   581   * \return random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   582   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   583  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   584  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   585  /** \brief API to get random value with in the range
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   586   * \param seed Pointer to seed value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   587   * \param min minimum range value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   588   * \param max maximum range value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   589   * \return random value
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   590   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   591  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   592  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   593  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   594   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   595   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   596   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   597   * CORE_ID register.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   598   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   600   * e.g:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   601   * 1. Check for synchronisation between core 0 and core 5
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   602   * # define 0x41U
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   603   * 2. Check for synchronisation between core 0 to core 5
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   604   * # define 0x5FU
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   605   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   606   * Note:
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   607   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   608   * Core 0: 0
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   609   * Core 1: 1
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   610   * Core 2: 2
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   611   * Core 3: 3
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   612   * Core 4: 4
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   613   * Core 5: 6
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   614   * \param event Synchronous Event
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   615   * \param timeoutMilliSec timeout in millisec
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   616   * \return Error condition
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   617   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   618   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   619   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   620   * \code
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   621   * // Global variable. preferably located in  shared memory.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   622   * IfxCpu_syncEvent event;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   623   * boolean errorVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   624   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   625   * // Below code should be repeated in Each core
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   626   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   627   * // Upon reaching Synchonisation point
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   628   * IfxCpu_emitEvent(&event);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   629   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   630   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   631   * \endcode
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   632   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   633   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   634  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   635  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   636  /** \brief This function sets a bit corresponding to the core in the event.
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   637   * \param event Synchronous Event
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   638   * \return None
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   639   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   640   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   641   *
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   642   */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   643  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   644  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   645  /** \} */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   646  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   647  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   648  /*---------------------Inline Function Implementations------------------------*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   649  /******************************************************************************/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   650  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   651  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   652  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   653      Ifx_CPU_ICR reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   654      reg.U = __mfcr(CPU_ICR);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   655      return reg.B.IE != 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   656  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   657  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   658  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   659  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   660  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   661      boolean enabled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   662      enabled = IfxCpu_areInterruptsEnabled();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   663      __disable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   664      __nop();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   665      return enabled;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   666  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   667  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   668  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   670  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   671      __enable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   672  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   673  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   674  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   675  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   676  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   677      uint32 cpu_pmaVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   678      uint16 checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   679      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   680      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   681  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   682      /*resolve the restrictions*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   683      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   684      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   685  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   686      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   687      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   688          segmentNumberMask |= checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   689      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   690  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   691      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   692  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   693      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   694  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   695      /*The CPU_PMA registers are ENDINIT protected*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   696      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   697      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   698      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   699      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   700      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   701      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   702      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   703  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   704  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   705  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   707  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   708      uint32 cpu_pmaVal;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   709      uint16 checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   710      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   711      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   712  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   713      /*resolve the restrictions*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   714      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   715      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   716  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   717      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   718      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   719          segmentNumberMask |= checkRestrictionMask;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   720      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   721  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   722      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   723  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   724      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   725  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   726      /*The CPU_PMA registers are ENDINIT protected*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   727      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   728      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   729      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   730      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   731      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   732      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   733      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   734  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   735  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   736  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   737  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   738  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   739      __disable();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   740      __nop();
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   741  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   742  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   743  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   744  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   745  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   746      Ifx_CPU *module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   747  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   748      if (cpu < IfxCpu_ResourceCpu_none)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   749      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   750          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   751      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   752      else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   753      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   754          module = NULL_PTR;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   755      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   756  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   757      return module;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   758  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   759  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   760  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   761  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   762  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   763      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   764  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   765  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   766  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   767  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   768  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   769      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   770  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   771  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   772  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   773  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   774  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   775      Ifx_CPU_CORE_ID reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   776      reg.U = __mfcr(CPU_CORE_ID);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   778  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   780  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   781  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   782  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   783      Ifx_CPU_CORE_ID reg;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   784      reg.U = __mfcr(CPU_CORE_ID);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   785      return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   786  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   787  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   789  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   790  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   791      return IfxCpu_getPerformanceCounter(CPU_ICNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   792  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   793  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   794  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   795  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   796  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   797      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_ICNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   798  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   800  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   801  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   802  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   803      Ifx_CPU_CCNT ccnt;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   804  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   805      if (address == CPU_CCNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   806      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   807          ccnt.U = __mfcr(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   808      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   809      else if (address == CPU_ICNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   810      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   811          ccnt.U = __mfcr(CPU_ICNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   812      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   813      else if (address == CPU_M1CNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   814      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   815          ccnt.U = __mfcr(CPU_M1CNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   816      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   817      else if (address == CPU_M2CNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   818      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   819          ccnt.U = __mfcr(CPU_M2CNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   820      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   821      else if (address == CPU_M3CNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   822      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   823          ccnt.U = __mfcr(CPU_M3CNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   824      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   825  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   826      return ccnt.B.CountValue;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   827  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   828  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   830  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   831  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   832      Ifx_CPU_CCNT ccnt;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   833  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   834      if (address == CPU_CCNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   835      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   836          ccnt.U = __mfcr(CPU_CCNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   837      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   838      else if (address == CPU_ICNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   839      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   840          ccnt.U = __mfcr(CPU_ICNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   841      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   842      else if (address == CPU_M1CNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   844          ccnt.U = __mfcr(CPU_M1CNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   846      else if (address == CPU_M2CNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   848          ccnt.U = __mfcr(CPU_M2CNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   850      else if (address == CPU_M3CNT)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   851      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   852          ccnt.U = __mfcr(CPU_M3CNT);
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   853      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   855      return ccnt.B.SOvf;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   856  }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   857  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   858  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   859  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   860  {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   861      uint32  k;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   862      uint32  nxt_cxi_val = 0;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   863      uint32 *prvCsa      = 0U;
	mov.a	a4,#0
.L167:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   864      uint32 *nxtCsa      = csaBegin;
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   865      uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
	mov.d	d15,a2
.L286:
	mov.d	d0,a15
.L287:
	sub	d15,d0
.L288:
	mov	d0,#0
	addih	d0,d0,#1024
	mul.u	e4,d15,d0
.L169:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   867      for (k = 0; k < numOfCsa; k++)
	mov	d0,#0
.L170:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   867      for (k = 0; k < numOfCsa; k++)      (inlined)
	j	.L30
.L31:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   868      {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   869          nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28)) >> 12 | ((uint32)nxtCsa & (0XFFFFU << 6)) >> 6;
	mov.d	d15,a15
.L289:
	insert	d15,d15,#0,#0,#28
.L290:
	sh	d1,d15,#-12
.L291:
	mov.d	d15,a15
.L292:
	mov.u	d2,#65535
	sh	d2,#6
.L293:
	and	d15,d2
.L294:
	sh	d15,#-6
.L171:
	or	d1,d15
.L295:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   871          if (k == 0)      (inlined)
	jne	d0,#0,.L32
.L296:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   870  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   871          if (k == 0)
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   872          {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   873              __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
	mtcr	#65080,d1
	isync
.L297:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   873              __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */      (inlined)
	j	.L33

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   871          if (k == 0)      (inlined)
.L32:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   874          }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   875          else
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   876          {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   877              *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
	st.w	[a4],d1

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   875          else      (inlined)
.L33:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   878          }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   879  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   880          if (k == (numOfCsa - 3U))
	add	d15,d5,#-3
.L298:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   880          if (k == (numOfCsa - 3U))      (inlined)
	jne	d15,d0,.L34
.L299:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   881          {
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   882              __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
	mtcr	#65084,d1
	isync

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   880          if (k == (numOfCsa - 3U))      (inlined)
.L34:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   883          }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   884  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   885          prvCsa  = (uint32 *)nxtCsa;
	mov.aa	a4,a15
.L300:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   886          nxtCsa += 16;           /* next CSA */
	lea	a15,[a15]64
.L301:
	add	d0,#1

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   867      for (k = 0; k < numOfCsa; k++)      (inlined)
.L30:
	jlt.u	d0,d5,.L31
.L302:

; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   887      }
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   888  
; D:\smartcar\smartcar\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   889      *prvCsa = 0;
	mov	d15,#0
.L303:
	st.w	[a4],d15
.L130:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   156  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   157      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   158          /*CPU and safety watchdogs are enabled by default, C initialization functions are not servicing the watchdogs */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   159          uint16 safetyWdtPassword = IfxScuWdt_getSafetyWatchdogPassword();
	call	IfxScuWdt_getSafetyWatchdogPassword
.L168:
	mov	d15,d2
.L173:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   160          IfxScuWdt_disableCpuWatchdog(cpuWdtPassword);
	mov	d4,d8
.L174:
	call	IfxScuWdt_disableCpuWatchdog
.L172:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   161          IfxScuWdt_disableSafetyWatchdog(safetyWdtPassword);
	mov	d4,d15
.L175:
	call	IfxScuWdt_disableSafetyWatchdog
.L176:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   162  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   163          Ifx_C_Init();           /*Initialization of C runtime variables */
	call	Ifx_C_Init
.L304:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   164  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   165          IfxScuWdt_enableCpuWatchdog(cpuWdtPassword);
	mov	d4,d8
.L177:
	call	IfxScuWdt_enableCpuWatchdog
.L178:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   166          IfxScuWdt_enableSafetyWatchdog(safetyWdtPassword);
	mov	d4,d15
.L179:
	call	IfxScuWdt_enableSafetyWatchdog
.L142:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   167      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   168  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   169      /*Initialize the clock system */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   170      IFXCPU_CSTART_CCU_INIT_HOOK();
	movh.a	a4,#@his(IfxScuCcu_defaultClockConfig)
	lea	a4,[a4]@los(IfxScuCcu_defaultClockConfig)
	call	IfxScuCcu_init
.L305:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   171  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   172      /*Start remaining cores */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   173  #if (IFX_CFG_CPU_CSTART_ENABLE_TRICORE1 != 0)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   174      (void)IfxCpu_startCore(&MODULE_CPU1, (uint32)&_Core1_start);       /*The status returned by function call is ignored */
	movh.a	a4,#63619
.L306:
	movh.a	a15,#@his(_Core1_start)
.L166:
	lea	a15,[a15]@los(_Core1_start)
	mov.d	d4,a15
.L307:
	call	IfxCpu_startCore
.L308:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   175  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   176  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   177  #if (IFX_CFG_CPU_CSTART_ENABLE_TRICORE0 == 0)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   178      IfxScuWdt_disableCpuWatchdog(cpuWdtPassword);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   179      /*halt the CPU 0 if it is not needed to be enabled */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   180      IfxCpu_setCoreMode(&MODULE_CPU0, IfxCpu_CoreMode_idle);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   181  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   182  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   183      /*Call main function of Cpu0 */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   184      __non_return_call(core0_main);
	movh.a	a15,#@his(core0_main)
	lea	a15,[a15]@los(core0_main)
		ji a15
.L309:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   185  }
	ret
.L57:
	
___Core0_start_function_end:
	.size	_Core0_start,___Core0_start_function_end-_Core0_start
.L47:
	; End of function
	
	.sdecl	'.text.start',code,cluster('_START'),protect
	.sect	'.text.start'
	.align	2
	
	.global	_START

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   186  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   187  #if defined(__HIGHTEC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   188  #pragma GCC reset_options
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   189  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   190  /******************************************************************************
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   191   * reset vector address, user section to inform linker to locate the code at 0x8000 0020
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   192   *****************************************************************************/ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   193  #if defined(__HIGHTEC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   194  #pragma section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   195  #pragma section ".start" x
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   196  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   197  #if defined(__TASKING__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   198  #pragma protect on
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   199  #pragma section code "start"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   200  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   201  #if defined(__DCC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   202  #pragma section CODE ".start" X
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   203  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   204  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   205  void _START(void)
; Function _START
.L38:
_START:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   206  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   207  																																																																																																																																																																																																																																												__non_return_call(_Core0_start);
	movh.a	a15,#@his(_Core0_start)
	lea	a15,[a15]@los(_Core0_start)
		ji a15
.L314:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   208  }
	ret
.L144:
	
___START_function_end:
	.size	_START,___START_function_end-_START
.L52:
	; End of function
	
	.sdecl	'.rodata.bmhd_0',data,rom,cluster('BootModeHeader_0'),protect
	.sect	'.rodata.bmhd_0'
	.global	BootModeHeader_0
	.align	2
BootModeHeader_0:	.type	object
	.size	BootModeHeader_0,32
	.space	4
	.word	-1286012816
	.space	16
	.word	2032056420,-2032056421
	.sdecl	'.rodata.bmhd_1',data,rom,cluster('BootModeHeader_1'),protect
	.sect	'.rodata.bmhd_1'
	.global	BootModeHeader_1
	.align	2
BootModeHeader_1:	.type	object
	.size	BootModeHeader_1,32
	.space	4
	.word	-1286012816
	.space	16
	.word	2032056420,-2032056421
	.calls	'__INDIRECT__','_Core1_start'
	.calls	'__INDIRECT__','core0_main'
	.calls	'__INDIRECT__','_Core0_start'
	.calls	'_Core0_start','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'_Core0_start','IfxScuWdt_disableCpuWatchdog'
	.calls	'_Core0_start','IfxScuWdt_disableSafetyWatchdog'
	.calls	'_Core0_start','Ifx_C_Init'
	.calls	'_Core0_start','IfxScuWdt_enableCpuWatchdog'
	.calls	'_Core0_start','IfxScuWdt_enableSafetyWatchdog'
	.calls	'_Core0_start','IfxScuCcu_init'
	.calls	'_Core0_start','IfxCpu_startCore'
	.calls	'_Core0_start','',0
	.extern	Ifx_C_Init
	.extern	IfxScuWdt_disableCpuWatchdog
	.extern	IfxScuWdt_disableSafetyWatchdog
	.extern	IfxScuWdt_enableCpuWatchdog
	.extern	IfxScuWdt_enableSafetyWatchdog
	.extern	IfxScuWdt_getSafetyWatchdogPassword
	.extern	IfxCpu_startCore
	.extern	IfxScuCcu_init
	.extern	IfxScuCcu_defaultClockConfig
	.extern	_Core1_start
	.extern	__ISTACK0
	.extern	__INTTAB_CPU0
	.extern	__TRAPTAB_CPU0
	.extern	__CSA0
	.extern	__CSA0_END
	.extern	core0_main
	.extern	__INDIRECT__
	.calls	'_START','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L40:
	.word	78630
	.half	3
	.word	.L41
	.byte	4
.L39:
	.byte	1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L42
	.byte	2,1,1,3
	.word	156
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,61,17,1,1,5
	.byte	'fun',0,1,61,43
	.word	159
	.byte	6,0,7
	.byte	'__fract',0,4,128,1,7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,152,2,18
	.word	204
	.byte	1,1,5
	.byte	'a',0,1,152,2,44
	.word	216
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,172,2,17,1,1,6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0,3
	.word	328
	.byte	8
	.byte	'__ld64',0,3,2,135,1,19
	.word	302
	.byte	1,1,5
	.byte	'addr',0,2,135,1,32
	.word	334
	.byte	6,0,4
	.byte	'__st64',0,3,2,143,1,17,1,1,5
	.byte	'addr',0,2,143,1,30
	.word	334
	.byte	5
	.byte	'value',0,2,143,1,43
	.word	302
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,4,241,8,16,4,11
	.byte	'ENDINIT',0,4
	.word	443
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	443
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	443
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	443
	.byte	16,0,2,35,0,0,12,4,247,14,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	459
	.byte	4,2,35,0,0,7
	.byte	'unsigned char',0,1,8
.L60:
	.byte	7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,4,250,8,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	2,6,2,35,0,11
	.byte	'IR0',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	595
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	16,0,2,35,2,0,12,4,255,14,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	634
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,4,137,9,16,4,11
	.byte	'AE',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	595
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	612
	.byte	16,0,2,35,2,0,12,4,135,15,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	878
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,4,175,15,25,12,13
	.byte	'CON0',0
	.word	555
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	838
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1069
	.byte	4,2,35,8,0,14
	.word	1109
	.byte	3
	.word	1172
.L87:
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,3,181,3,17,1,1
.L90:
	.byte	5
	.byte	'watchdog',0,3,181,3,65
	.word	1177
.L92:
	.byte	5
	.byte	'password',0,3,181,3,82
	.word	612
.L94:
	.byte	6,0
.L99:
	.byte	4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,3,140,4,17,1,1
.L101:
	.byte	5
	.byte	'watchdog',0,3,140,4,63
	.word	1177
.L103:
	.byte	5
	.byte	'password',0,3,140,4,80
	.word	612
.L105:
	.byte	6,0
.L62:
	.byte	8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,3,227,3,19
	.word	612
	.byte	1,1
.L64:
	.byte	5
	.byte	'watchdog',0,3,227,3,74
	.word	1177
.L66:
	.byte	6,0,15,6,156,1,9,1,16
	.byte	'IfxCpu_ResourceCpu_0',0,0,16
	.byte	'IfxCpu_ResourceCpu_1',0,1,16
	.byte	'IfxCpu_ResourceCpu_none',0,2,0
.L81:
	.byte	8
	.byte	'IfxCpu_getCoreIndex',0,3,5,141,6,31
	.word	1407
	.byte	1,1
.L82:
	.byte	6,0
.L58:
	.byte	7
	.byte	'unsigned long int',0,4,7
.L138:
	.byte	3
	.word	1520
.L128:
	.byte	4
	.byte	'IfxCpu_initCSA',0,3,5,219,6,17,1,1
.L131:
	.byte	5
	.byte	'csaBegin',0,5,219,6,40
	.word	1541
.L133:
	.byte	5
	.byte	'csaEnd',0,5,219,6,58
	.word	1541
.L135:
	.byte	6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,5,139,5,20
	.word	595
	.byte	1,1,6,0
.L106:
	.byte	4
	.byte	'IfxCpu_setDataCache',0,3,5,177,7,17,1,1
.L109:
	.byte	5
	.byte	'enable',0,5,177,7,45
	.word	595
.L111:
	.byte	17
.L119:
	.byte	6,6,6,6,6,0,0
.L68:
	.byte	4
	.byte	'IfxCpu_setProgramCache',0,3,5,204,7,17,1,1
.L71:
	.byte	5
	.byte	'enable',0,5,204,7,48
	.word	595
.L73:
	.byte	17
.L74:
	.byte	6
.L78:
	.byte	17
.L95:
	.byte	6,0,6,6,6,6,0,0,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,5,161,6,19
	.word	1520
	.byte	1,1,5
	.byte	'address',0,5,161,6,55
	.word	612
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,5,190,6,20
	.word	595
	.byte	1,1,5
	.byte	'address',0,5,190,6,70
	.word	612
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,5,172,8,17,1,1,5
	.byte	'address',0,5,172,8,56
	.word	1520
	.byte	5
	.byte	'count',0,5,172,8,72
	.word	1520
	.byte	17,6,0,0,10
	.byte	'_Ifx_P_OUT_Bits',0,8,143,3,16,4,11
	.byte	'P0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	595
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	595
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	595
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	16,0,2,35,2,0,12,8,181,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1967
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,8,169,2,16,4,11
	.byte	'PS0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	595
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	595
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	595
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	595
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	595
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	595
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	595
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	595
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	595
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	595
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	595
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	595
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	595
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	595
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	595
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	595
	.byte	1,0,2,35,3,0,12,8,133,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2283
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,8,110,16,4,11
	.byte	'MODREV',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	612
	.byte	16,0,2,35,2,0,12,8,148,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2854
	.byte	4,2,35,0,0,18,4
	.word	595
	.byte	19,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,8,140,1,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	595
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	595
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	595
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	595
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	595
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	595
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	595
	.byte	5,0,2,35,3,0,12,8,164,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2982
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,8,166,1,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	595
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	595
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	595
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	595
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	595
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	595
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	595
	.byte	5,0,2,35,3,0,12,8,180,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3197
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,8,179,1,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	595
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	595
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	595
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	595
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	595
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	595
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	595
	.byte	5,0,2,35,3,0,12,8,188,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3412
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,8,153,1,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	595
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	595
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	595
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	595
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	595
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	595
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	595
	.byte	5,0,2,35,3,0,12,8,172,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3629
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,8,118,16,4,11
	.byte	'P0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	595
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	595
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	595
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	16,0,2,35,2,0,12,8,156,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3849
	.byte	4,2,35,0,0,18,24
	.word	595
	.byte	19,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,8,205,3,16,4,11
	.byte	'PD0',0,1
	.word	595
	.byte	3,5,2,35,0,11
	.byte	'PL0',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'PD1',0,1
	.word	595
	.byte	3,1,2,35,0,11
	.byte	'PL1',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'PD2',0,1
	.word	595
	.byte	3,5,2,35,1,11
	.byte	'PL2',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'PD3',0,1
	.word	595
	.byte	3,1,2,35,1,11
	.byte	'PL3',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'PD4',0,1
	.word	595
	.byte	3,5,2,35,2,11
	.byte	'PL4',0,1
	.word	595
	.byte	1,4,2,35,2,11
	.byte	'PD5',0,1
	.word	595
	.byte	3,1,2,35,2,11
	.byte	'PL5',0,1
	.word	595
	.byte	1,0,2,35,2,11
	.byte	'PD6',0,1
	.word	595
	.byte	3,5,2,35,3,11
	.byte	'PL6',0,1
	.word	595
	.byte	1,4,2,35,3,11
	.byte	'PD7',0,1
	.word	595
	.byte	3,1,2,35,3,11
	.byte	'PL7',0,1
	.word	595
	.byte	1,0,2,35,3,0,12,8,205,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4172
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,8,226,3,16,4,11
	.byte	'PD8',0,1
	.word	595
	.byte	3,5,2,35,0,11
	.byte	'PL8',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'PD9',0,1
	.word	595
	.byte	3,1,2,35,0,11
	.byte	'PL9',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'PD10',0,1
	.word	595
	.byte	3,5,2,35,1,11
	.byte	'PL10',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'PD11',0,1
	.word	595
	.byte	3,1,2,35,1,11
	.byte	'PL11',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'PD12',0,1
	.word	595
	.byte	3,5,2,35,2,11
	.byte	'PL12',0,1
	.word	595
	.byte	1,4,2,35,2,11
	.byte	'PD13',0,1
	.word	595
	.byte	3,1,2,35,2,11
	.byte	'PL13',0,1
	.word	595
	.byte	1,0,2,35,2,11
	.byte	'PD14',0,1
	.word	595
	.byte	3,5,2,35,3,11
	.byte	'PL14',0,1
	.word	595
	.byte	1,4,2,35,3,11
	.byte	'PD15',0,1
	.word	595
	.byte	3,1,2,35,3,11
	.byte	'PL15',0,1
	.word	595
	.byte	1,0,2,35,3,0,12,8,213,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4476
	.byte	4,2,35,0,0,18,8
	.word	595
	.byte	19,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,8,88,16,4,11
	.byte	'EN0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	595
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	595
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	595
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	16,0,2,35,2,0,12,8,140,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4801
	.byte	4,2,35,0,0,18,12
	.word	595
	.byte	19,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,8,183,3,16,4,11
	.byte	'PDIS0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	595
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	595
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	595
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	16,0,2,35,2,0,12,8,197,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5141
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,8,165,3,16,4,11
	.byte	'SEL0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	595
	.byte	2,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	420
	.byte	19,1,2,35,0,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,12,8,189,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5507
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,8,206,2,16,4,11
	.byte	'PS0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	420
	.byte	28,0,2,35,0,0,12,8,149,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5793
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,8,227,2,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	420
	.byte	24,0,2,35,0,0,12,8,165,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5940
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,8,238,2,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	420
	.byte	20,0,2,35,0,0,12,8,173,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6109
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,8,216,2,16,4,11
	.byte	'reserved_0',0,2
	.word	612
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	595
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	595
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	595
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	16,0,2,35,2,0,12,8,157,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6281
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,8,232,1,16,4,11
	.byte	'reserved_0',0,2
	.word	612
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	595
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	595
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	612
	.byte	12,0,2,35,2,0,12,8,229,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6456
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,8,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	420
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	595
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	595
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	595
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	595
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	595
	.byte	8,0,2,35,3,0,12,8,245,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6630
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,8,136,2,16,4,11
	.byte	'reserved_0',0,4
	.word	420
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	595
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	595
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	595
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	595
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	595
	.byte	4,0,2,35,3,0,12,8,253,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6804
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,8,243,1,16,4,11
	.byte	'reserved_0',0,4
	.word	420
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	595
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	595
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	595
	.byte	1,0,2,35,3,0,12,8,237,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6980
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,8,249,2,16,4,11
	.byte	'PS0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	595
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	595
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	595
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	16,0,2,35,2,0,12,8,141,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7136
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,8,147,2,16,4,11
	.byte	'reserved_0',0,2
	.word	612
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	595
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	595
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	595
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	595
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	595
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	595
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	595
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	595
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	595
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	595
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	595
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	595
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	595
	.byte	1,0,2,35,3,0,12,8,221,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7469
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR0_Bits',0,8,192,1,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	420
	.byte	30,0,2,35,0,0,12,8,196,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7817
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR1_Bits',0,8,200,1,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	420
	.byte	30,0,2,35,0,0,10
	.byte	'_Ifx_P_LPCR1_P21_Bits',0,8,208,1,16,4,11
	.byte	'RDIS_CTRL',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'RX_DIS',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	595
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	420
	.byte	24,0,2,35,0,0,12,8,204,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7941
	.byte	4,2,35,0,13
	.byte	'B_P21',0
	.word	8025
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR2_Bits',0,8,218,1,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'LVDSR',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'LVDSRL',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	595
	.byte	2,4,2,35,1,11
	.byte	'TDIS_CTRL',0,1
	.word	595
	.byte	1,3,2,35,1,11
	.byte	'TX_DIS',0,1
	.word	595
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	595
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	16,0,2,35,2,0,12,8,213,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8205
	.byte	4,2,35,0,0,18,76
	.word	595
	.byte	19,75,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,8,82,16,4,11
	.byte	'reserved_0',0,4
	.word	420
	.byte	32,0,2,35,0,0,12,8,132,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8458
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,8,45,16,4,11
	.byte	'EN0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	595
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	595
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	595
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	595
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	595
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	595
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	595
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	595
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	595
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	595
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	595
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	595
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	595
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	595
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	595
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	595
	.byte	1,0,2,35,3,0,12,8,252,3,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8545
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,8,229,5,25,128,2,13
	.byte	'OUT',0
	.word	2243
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	2814
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	2933
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2973
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	3157
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	3372
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	3589
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	3809
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	2973
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	4123
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4163
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	4436
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	4752
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	4792
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	5092
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	5132
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	5467
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	5753
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	4792
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	5900
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	6069
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	6241
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	6416
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	6590
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	6764
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	6940
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	7096
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	7429
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	7777
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	4792
	.byte	8,3,35,152,1,13
	.byte	'LPCR0',0
	.word	7901
	.byte	4,3,35,160,1,13
	.byte	'LPCR1',0
	.word	8150
	.byte	4,3,35,164,1,13
	.byte	'LPCR2',0
	.word	8409
	.byte	4,3,35,168,1,13
	.byte	'reserved_A4',0
	.word	8449
	.byte	76,3,35,172,1,13
	.byte	'ACCEN1',0
	.word	8505
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	9072
	.byte	4,3,35,252,1,0,14
	.word	9112
	.byte	3
	.word	9715
	.byte	15,7,172,1,9,4,16
	.byte	'IfxPort_State_notChanged',0,0,16
	.byte	'IfxPort_State_high',0,1,16
	.byte	'IfxPort_State_low',0,128,128,4,16
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,7,208,4,17,1,1,5
	.byte	'port',0,7,208,4,44
	.word	9720
	.byte	5
	.byte	'pinIndex',0,7,208,4,56
	.word	595
	.byte	5
	.byte	'action',0,7,208,4,80
	.word	9725
	.byte	6,0,20
	.word	436
	.byte	21
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,22
	.word	9906
	.byte	0,14
	.word	420
	.byte	3
	.word	420
	.byte	23
	.byte	'__cmpswapw',0
	.word	9948
	.byte	1,1,1,1,24
	.byte	'p',0
	.word	9953
	.byte	24
	.byte	'value',0
	.word	420
	.byte	24
	.byte	'compare',0
	.word	420
	.byte	0,21
	.byte	'__mtcr',0,1,1,1,1,22
	.word	436
	.byte	22
	.word	436
	.byte	0,14
	.word	436
	.byte	23
	.byte	'__mfcr',0
	.word	10033
	.byte	1,1,1,1,22
	.word	436
	.byte	0,25
	.byte	'__isync',0,1,1,1,1,25
	.byte	'__dsync',0,1,1,1,1,26
	.byte	'Ifx_C_Init',0,9,140,1,6,1,1,1,1,27
	.word	164
	.byte	28
	.word	190
	.byte	6,0,27
	.word	225
	.byte	28
	.word	257
	.byte	6,0,27
	.word	270
	.byte	6,0,27
	.word	339
	.byte	28
	.word	358
	.byte	6,0,27
	.word	374
	.byte	28
	.word	389
	.byte	28
	.word	403
	.byte	6,0,27
	.word	1182
	.byte	28
	.word	1222
	.byte	28
	.word	1240
	.byte	6,0,27
	.word	1260
	.byte	28
	.word	1298
	.byte	28
	.word	1316
	.byte	6,0,27
	.word	1336
	.byte	28
	.word	1387
	.byte	6,0,29
	.byte	'IfxScuWdt_disableCpuWatchdog',0,3,218,2,17,1,1,1,1,5
	.byte	'password',0,3,218,2,53
	.word	612
	.byte	0,29
	.byte	'IfxScuWdt_disableSafetyWatchdog',0,3,228,2,17,1,1,1,1,5
	.byte	'password',0,3,228,2,56
	.word	612
	.byte	0,29
	.byte	'IfxScuWdt_enableCpuWatchdog',0,3,238,2,17,1,1,1,1,5
	.byte	'password',0,3,238,2,52
	.word	612
	.byte	0,29
	.byte	'IfxScuWdt_enableSafetyWatchdog',0,3,248,2,17,1,1,1,1,5
	.byte	'password',0,3,248,2,55
	.word	612
	.byte	0,30
	.byte	'IfxScuWdt_getSafetyWatchdogPassword',0,3,143,3,19
	.word	612
	.byte	1,1,1,1,27
	.word	1486
	.byte	6,0,27
	.word	1546
	.byte	28
	.word	1569
	.byte	28
	.word	1587
	.byte	6,0,18,176,32
	.word	595
	.byte	19,175,32,0,10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,10,150,4,16,4,11
	.byte	'ADFLIP',0,4
	.word	443
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	443
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	443
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	443
	.byte	1,0,2,35,0,0,12,10,239,8,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10528
	.byte	4,2,35,0,0,18,208,223,1
	.word	595
	.byte	19,207,223,1,0,10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,10,234,4,16,4,11
	.byte	'ASI',0,4
	.word	443
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	443
	.byte	27,0,2,35,0,0,12,10,191,9,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10681
	.byte	4,2,35,0,0,18,248,1
	.word	595
	.byte	19,247,1,0,10
	.byte	'_Ifx_CPU_PMA0_Bits',0,10,224,3,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	13,19,2,35,0,11
	.byte	'DAC',0,4
	.word	443
	.byte	3,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	443
	.byte	16,0,2,35,0,0,12,10,199,8,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10799
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_PMA1_Bits',0,10,232,3,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	14,18,2,35,0,11
	.byte	'CAC',0,4
	.word	443
	.byte	2,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	443
	.byte	16,0,2,35,0,0,12,10,207,8,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10925
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_PMA2_Bits',0,10,240,3,16,4,11
	.byte	'PSI',0,4
	.word	443
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	443
	.byte	16,0,2,35,0,0,12,10,215,8,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11051
	.byte	4,2,35,0,0,18,244,29
	.word	595
	.byte	19,243,29,0,10
	.byte	'_Ifx_CPU_DCON2_Bits',0,10,195,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	443
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	443
	.byte	16,0,2,35,0,0,12,10,191,6,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11166
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_SMACON_Bits',0,10,159,4,16,4,11
	.byte	'PC',0,4
	.word	443
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	443
	.byte	1,30,2,35,0,11
	.byte	'PT',0,4
	.word	443
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	443
	.byte	5,24,2,35,0,11
	.byte	'DC',0,4
	.word	443
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	443
	.byte	1,22,2,35,0,11
	.byte	'DT',0,4
	.word	443
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	443
	.byte	13,8,2,35,0,11
	.byte	'IODT',0,4
	.word	443
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	443
	.byte	7,0,2,35,0,0,12,10,247,8,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11279
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DSTR_Bits',0,10,143,2,16,4,11
	.byte	'SRE',0,4
	.word	443
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	443
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	443
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	443
	.byte	3,26,2,35,0,11
	.byte	'CRE',0,4
	.word	443
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	443
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	443
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	443
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	443
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	443
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	443
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	443
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	443
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	443
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	443
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	443
	.byte	7,0,2,35,0,0,12,10,143,7,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11531
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DATR_Bits',0,10,152,1,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	443
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	443
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	443
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	443
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	443
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	443
	.byte	1,17,2,35,0,11
	.byte	'SME',0,4
	.word	443
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	443
	.byte	16,0,2,35,0,0,12,10,159,6,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11868
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DEADD_Bits',0,10,209,1,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	443
	.byte	32,0,2,35,0,0,12,10,207,6,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12099
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,10,215,1,16,4,11
	.byte	'TA',0,4
	.word	443
	.byte	32,0,2,35,0,0,12,10,215,6,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12191
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DIETR_Bits',0,10,221,1,16,4,11
	.byte	'IED',0,4
	.word	443
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	443
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	443
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	443
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	443
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	443
	.byte	6,21,2,35,0,11
	.byte	'IE_DUAL',0,4
	.word	443
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	443
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	443
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	443
	.byte	18,0,2,35,0,0,12,10,223,6,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12272
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DCON0_Bits',0,10,187,1,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	443
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	443
	.byte	30,0,2,35,0,0
.L121:
	.byte	12,10,183,6,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12513
	.byte	4,2,35,0,0,18,188,3
	.word	595
	.byte	19,187,3,0,10
	.byte	'_Ifx_CPU_PSTR_Bits',0,10,247,3,16,4,11
	.byte	'FRE',0,4
	.word	443
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	443
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	443
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	443
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	443
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	443
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	443
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	443
	.byte	17,0,2,35,0,0,12,10,223,8,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12652
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_PCON1_Bits',0,10,178,3,16,4,11
	.byte	'PCINV',0,4
	.word	443
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	443
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	443
	.byte	30,0,2,35,0,0
.L76:
	.byte	12,10,159,8,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12868
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_PCON2_Bits',0,10,186,3,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	443
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	443
	.byte	16,0,2,35,0,0,12,10,167,8,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12991
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_PCON0_Bits',0,10,170,3,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	443
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	443
	.byte	30,0,2,35,0,0
.L97:
	.byte	12,10,151,8,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13104
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,10,203,3,16,4,11
	.byte	'TA',0,4
	.word	443
	.byte	32,0,2,35,0,0,12,10,183,8,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13232
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_PIETR_Bits',0,10,209,3,16,4,11
	.byte	'IED',0,4
	.word	443
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	443
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	443
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	443
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	443
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	443
	.byte	6,21,2,35,0,11
	.byte	'IE_DUAL',0,4
	.word	443
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	443
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	443
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	443
	.byte	18,0,2,35,0,0,12,10,191,8,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13313
	.byte	4,2,35,0,0,18,232,3
	.word	595
	.byte	19,231,3,0,10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,10,83,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	443
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	443
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	443
	.byte	27,0,2,35,0,0,12,10,215,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13565
	.byte	4,2,35,0,0,18,252,23
	.word	595
	.byte	19,251,23,0,10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,10,183,2,16,4,11
	.byte	'TST',0,4
	.word	443
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	443
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	443
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	443
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	443
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	443
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	443
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	443
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	443
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	443
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	443
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	443
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	443
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	443
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	443
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	443
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	443
	.byte	1,0,2,35,0,0,12,10,167,7,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13715
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,10,215,2,16,4,11
	.byte	'PC',0,4
	.word	443
	.byte	32,0,2,35,0,0,12,10,183,7,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14069
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,10,205,2,16,4,11
	.byte	'OPC',0,4
	.word	443
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	443
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	443
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	443
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	443
	.byte	12,0,2,35,0,0,12,10,175,7,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14156
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,10,221,2,16,4,11
	.byte	'SRC1',0,4
	.word	443
	.byte	32,0,2,35,0,0,12,10,191,7,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14321
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,10,227,2,16,4,11
	.byte	'SRC2',0,4
	.word	443
	.byte	32,0,2,35,0,0,12,10,199,7,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14412
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,10,233,2,16,4,11
	.byte	'SRC3',0,4
	.word	443
	.byte	32,0,2,35,0,0,12,10,207,7,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14503
	.byte	4,2,35,0,0,18,228,63
	.word	595
	.byte	19,227,63,0,10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,10,243,1,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	443
	.byte	29,0,2,35,0,0,12,10,239,6,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14605
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,10,250,1,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	443
	.byte	29,0,2,35,0,0,12,10,247,6,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14712
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DPR',0,10,254,9,25,8,13
	.byte	'L',0
	.word	14672
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	14779
	.byte	4,2,35,4,0,18,128,1
	.word	14819
	.byte	19,15,0,14
	.word	14861
	.byte	18,128,31
	.word	595
	.byte	19,255,30,0,10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,10,99,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	443
	.byte	29,0,2,35,0,0,12,10,231,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14887
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,10,106,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	443
	.byte	29,0,2,35,0,0,12,10,239,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14993
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_CPR',0,10,247,9,25,8,13
	.byte	'L',0
	.word	14953
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	15059
	.byte	4,2,35,4,0,18,64
	.word	15099
	.byte	19,7,0,14
	.word	15141
	.byte	18,192,31
	.word	595
	.byte	19,191,31,0,10
	.byte	'_Ifx_CPU_CPXE_Bits',0,10,121,16,4,11
	.byte	'XE',0,4
	.word	443
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	443
	.byte	24,0,2,35,0,0,12,10,255,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15166
	.byte	4,2,35,0,0,18,16
	.word	15227
	.byte	19,3,0,10
	.byte	'_Ifx_CPU_DPRE_Bits',0,10,129,2,16,4,11
	.byte	'RE',0,4
	.word	443
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	443
	.byte	16,0,2,35,0,0,12,10,255,6,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15276
	.byte	4,2,35,0,0,18,16
	.word	15339
	.byte	19,3,0,10
	.byte	'_Ifx_CPU_DPWE_Bits',0,10,136,2,16,4,11
	.byte	'WE',0,4
	.word	443
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	443
	.byte	16,0,2,35,0,0,12,10,135,7,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15388
	.byte	4,2,35,0,0,18,16
	.word	15451
	.byte	19,3,0,18,208,7
	.word	595
	.byte	19,207,7,0,10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,10,241,4,16,4,11
	.byte	'TEXP0',0,4
	.word	443
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	443
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	443
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	443
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	443
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	443
	.byte	15,0,2,35,0,0,12,10,199,9,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15511
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,10,252,4,16,4,11
	.byte	'Timer',0,4
	.word	443
	.byte	32,0,2,35,0,0,12,10,207,9,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15693
	.byte	4,2,35,0,0,18,12
	.word	15741
	.byte	19,2,0,10
	.byte	'_Ifx_CPU_TPS',0,10,142,10,25,16,13
	.byte	'CON',0
	.word	15653
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	15781
	.byte	12,2,35,4,0,14
	.word	15790
	.byte	18,240,23
	.word	595
	.byte	19,239,23,0,10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,10,136,5,16,4,11
	.byte	'EVTA',0,4
	.word	443
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	443
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	443
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	443
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	443
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	443
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	443
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	443
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	443
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	443
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	443
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	443
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	443
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	443
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	443
	.byte	3,0,2,35,0,0,12,10,223,9,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15854
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,10,130,5,16,4,11
	.byte	'ADDR',0,4
	.word	443
	.byte	32,0,2,35,0,0,12,10,215,9,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16183
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_TR',0,10,149,10,25,8,13
	.byte	'EVT',0
	.word	16143
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	16227
	.byte	4,2,35,4,0,18,64
	.word	16267
	.byte	19,7,0,14
	.word	16312
	.byte	18,192,23
	.word	595
	.byte	19,191,23,0,10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,10,72,16,4,11
	.byte	'CM',0,4
	.word	443
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	443
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	443
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	443
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	443
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	443
	.byte	21,0,2,35,0,0,12,10,207,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16337
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_CCNT_Bits',0,10,65,16,4,11
	.byte	'CountValue',0,4
	.word	443
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	443
	.byte	1,0,2,35,0,0,12,10,199,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16496
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_ICNT_Bits',0,10,239,2,16,4,11
	.byte	'CountValue',0,4
	.word	443
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	443
	.byte	1,0,2,35,0,0,12,10,215,7,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16599
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,10,142,3,16,4,11
	.byte	'CountValue',0,4
	.word	443
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	443
	.byte	1,0,2,35,0,0,12,10,247,7,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16703
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,10,149,3,16,4,11
	.byte	'CountValue',0,4
	.word	443
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	443
	.byte	1,0,2,35,0,0,12,10,255,7,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16808
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,10,156,3,16,4,11
	.byte	'CountValue',0,4
	.word	443
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	443
	.byte	1,0,2,35,0,0,12,10,135,8,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16913
	.byte	4,2,35,0,0,18,232,1
	.word	595
	.byte	19,231,1,0,10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,10,166,1,16,4,11
	.byte	'DE',0,4
	.word	443
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	443
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	443
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	443
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	443
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	443
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	443
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	443
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	443
	.byte	19,0,2,35,0,0,12,10,167,6,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17029
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,10,164,2,16,4,11
	.byte	'EVTA',0,4
	.word	443
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	443
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	443
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	443
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	443
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	443
	.byte	24,0,2,35,0,0,12,10,151,7,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17256
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_CREVT_Bits',0,10,128,1,16,4,11
	.byte	'EVTA',0,4
	.word	443
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	443
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	443
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	443
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	443
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	443
	.byte	24,0,2,35,0,0,12,10,135,6,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17422
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,10,212,4,16,4,11
	.byte	'EVTA',0,4
	.word	443
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	443
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	443
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	443
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	443
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	443
	.byte	24,0,2,35,0,0,12,10,175,9,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17588
	.byte	4,2,35,0,0,18,28
	.word	595
	.byte	19,27,0,10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,10,156,5,16,4,11
	.byte	'T0',0,4
	.word	443
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	443
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	443
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	443
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	443
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	443
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	443
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	443
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	443
	.byte	24,0,2,35,0,0,12,10,231,9,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17763
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DMS_Bits',0,10,236,1,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	1,31,2,35,0,11
	.byte	'DMSValue',0,4
	.word	443
	.byte	31,0,2,35,0,0,12,10,231,6,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17967
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DCX_Bits',0,10,202,1,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	6,26,2,35,0,11
	.byte	'DCXValue',0,4
	.word	443
	.byte	26,0,2,35,0,0,12,10,199,6,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18074
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,10,180,1,16,4,11
	.byte	'DTA',0,4
	.word	443
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	443
	.byte	31,0,2,35,0,0,12,10,175,6,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18181
	.byte	4,2,35,0,0,18,180,1
	.word	595
	.byte	19,179,1,0,10
	.byte	'_Ifx_CPU_PCXI_Bits',0,10,193,3,16,4,11
	.byte	'PCXO',0,4
	.word	443
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	443
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	443
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	443
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	443
	.byte	10,0,2,35,0,0,12,10,175,8,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18297
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_PSW_Bits',0,10,132,4,16,4,11
	.byte	'CDC',0,4
	.word	443
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	443
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	443
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	443
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	443
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	443
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	443
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	443
	.byte	12,5,2,35,0,11
	.byte	'SAV',0,4
	.word	443
	.byte	1,4,2,35,0,11
	.byte	'AV',0,4
	.word	443
	.byte	1,3,2,35,0,11
	.byte	'SV',0,4
	.word	443
	.byte	1,2,2,35,0,11
	.byte	'V',0,4
	.word	443
	.byte	1,1,2,35,0,11
	.byte	'C',0,4
	.word	443
	.byte	1,0,2,35,0,0,12,10,231,8,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18440
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_PC_Bits',0,10,163,3,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	443
	.byte	31,0,2,35,0,0,12,10,143,8,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18697
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,10,223,4,16,4,11
	.byte	'FCDSF',0,4
	.word	443
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	443
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	443
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	443
	.byte	1,28,2,35,0,11
	.byte	'IT',0,4
	.word	443
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	443
	.byte	27,0,2,35,0,0,12,10,183,9,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18797
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,10,113,16,4,11
	.byte	'MODREV',0,4
	.word	443
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	443
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	443
	.byte	16,0,2,35,0,0,12,10,247,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18969
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,10,92,16,4,11
	.byte	'CORE_ID',0,4
	.word	443
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	443
	.byte	29,0,2,35,0,0
.L83:
	.byte	12,10,223,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19088
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_BIV_Bits',0,10,51,16,4,11
	.byte	'VSS',0,4
	.word	443
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	443
	.byte	31,0,2,35,0,0,12,10,183,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19197
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_BTV_Bits',0,10,58,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	443
	.byte	31,0,2,35,0,0,12,10,191,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19291
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_ISP_Bits',0,10,128,3,16,4,11
	.byte	'ISP',0,4
	.word	443
	.byte	32,0,2,35,0,0,12,10,231,7,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19392
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_ICR_Bits',0,10,246,2,16,4,11
	.byte	'CCPN',0,4
	.word	443
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	443
	.byte	5,17,2,35,0,11
	.byte	'IE',0,4
	.word	443
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	443
	.byte	10,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	443
	.byte	6,0,2,35,0,0,12,10,223,7,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19472
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_FCX_Bits',0,10,175,2,16,4,11
	.byte	'FCXO',0,4
	.word	443
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	443
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	443
	.byte	12,0,2,35,0,0,12,10,159,7,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19629
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CPU_LCX_Bits',0,10,134,3,16,4,11
	.byte	'LCXO',0,4
	.word	443
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	443
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	443
	.byte	12,0,2,35,0,0,12,10,239,7,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19749
	.byte	4,2,35,0,0,18,16
	.word	595
	.byte	19,15,0,10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,10,139,1,16,4,11
	.byte	'CID',0,4
	.word	443
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	443
	.byte	29,0,2,35,0,0,12,10,143,6,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19878
	.byte	4,2,35,0,0,18,172,1
	.word	595
	.byte	19,171,1,0,10
	.byte	'_Ifx_CPU_D_Bits',0,10,146,1,16,4,11
	.byte	'DATA',0,4
	.word	443
	.byte	32,0,2,35,0,0,12,10,151,6,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19994
	.byte	4,2,35,0,0,18,64
	.word	20033
	.byte	19,15,0,18,64
	.word	595
	.byte	19,63,0,10
	.byte	'_Ifx_CPU_A_Bits',0,10,45,16,4,11
	.byte	'ADDR',0,4
	.word	443
	.byte	32,0,2,35,0,0,12,10,175,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20091
	.byte	4,2,35,0,0,18,64
	.word	20129
	.byte	19,15,0,10
	.byte	'_Ifx_CPU',0,10,166,10,25,128,128,4,13
	.byte	'reserved_0',0
	.word	10517
	.byte	176,32,2,35,0,13
	.byte	'SEGEN',0
	.word	10628
	.byte	4,3,35,176,32,13
	.byte	'reserved_1034',0
	.word	10668
	.byte	208,223,1,3,35,180,32,13
	.byte	'TASK_ASI',0
	.word	10748
	.byte	4,4,35,132,128,2,13
	.byte	'reserved_8008',0
	.word	10788
	.byte	248,1,4,35,136,128,2,13
	.byte	'PMA0',0
	.word	10885
	.byte	4,4,35,128,130,2,13
	.byte	'PMA1',0
	.word	11011
	.byte	4,4,35,132,130,2,13
	.byte	'PMA2',0
	.word	11115
	.byte	4,4,35,136,130,2,13
	.byte	'reserved_810C',0
	.word	11155
	.byte	244,29,4,35,140,130,2,13
	.byte	'DCON2',0
	.word	11239
	.byte	4,4,35,128,160,2,13
	.byte	'reserved_9004',0
	.word	4792
	.byte	8,4,35,132,160,2,13
	.byte	'SMACON',0
	.word	11491
	.byte	4,4,35,140,160,2,13
	.byte	'DSTR',0
	.word	11828
	.byte	4,4,35,144,160,2,13
	.byte	'reserved_9014',0
	.word	2973
	.byte	4,4,35,148,160,2,13
	.byte	'DATR',0
	.word	12059
	.byte	4,4,35,152,160,2,13
	.byte	'DEADD',0
	.word	12151
	.byte	4,4,35,156,160,2,13
	.byte	'DIEAR',0
	.word	12232
	.byte	4,4,35,160,160,2,13
	.byte	'DIETR',0
	.word	12473
	.byte	4,4,35,164,160,2,13
	.byte	'reserved_9028',0
	.word	4163
	.byte	24,4,35,168,160,2,13
	.byte	'DCON0',0
	.word	12601
	.byte	4,4,35,192,160,2,13
	.byte	'reserved_9044',0
	.word	12641
	.byte	188,3,4,35,196,160,2,13
	.byte	'PSTR',0
	.word	12828
	.byte	4,4,35,128,164,2,13
	.byte	'PCON1',0
	.word	12951
	.byte	4,4,35,132,164,2,13
	.byte	'PCON2',0
	.word	13064
	.byte	4,4,35,136,164,2,13
	.byte	'PCON0',0
	.word	13192
	.byte	4,4,35,140,164,2,13
	.byte	'PIEAR',0
	.word	13273
	.byte	4,4,35,144,164,2,13
	.byte	'PIETR',0
	.word	13514
	.byte	4,4,35,148,164,2,13
	.byte	'reserved_9218',0
	.word	13554
	.byte	232,3,4,35,152,164,2,13
	.byte	'COMPAT',0
	.word	13664
	.byte	4,4,35,128,168,2,13
	.byte	'reserved_9404',0
	.word	13704
	.byte	252,23,4,35,132,168,2,13
	.byte	'FPU_TRAP_CON',0
	.word	14029
	.byte	4,4,35,128,192,2,13
	.byte	'FPU_TRAP_PC',0
	.word	14116
	.byte	4,4,35,132,192,2,13
	.byte	'FPU_TRAP_OPC',0
	.word	14281
	.byte	4,4,35,136,192,2,13
	.byte	'reserved_A00C',0
	.word	2973
	.byte	4,4,35,140,192,2,13
	.byte	'FPU_TRAP_SRC1',0
	.word	14372
	.byte	4,4,35,144,192,2,13
	.byte	'FPU_TRAP_SRC2',0
	.word	14463
	.byte	4,4,35,148,192,2,13
	.byte	'FPU_TRAP_SRC3',0
	.word	14554
	.byte	4,4,35,152,192,2,13
	.byte	'reserved_A01C',0
	.word	14594
	.byte	228,63,4,35,156,192,2,13
	.byte	'DPR',0
	.word	14871
	.byte	128,1,4,35,128,128,3,13
	.byte	'reserved_C080',0
	.word	14876
	.byte	128,31,4,35,128,129,3,13
	.byte	'CPR',0
	.word	15150
	.byte	64,4,35,128,160,3,13
	.byte	'reserved_D040',0
	.word	15155
	.byte	192,31,4,35,192,160,3,13
	.byte	'CPXE',0
	.word	15267
	.byte	16,4,35,128,192,3,13
	.byte	'DPRE',0
	.word	15379
	.byte	16,4,35,144,192,3,13
	.byte	'DPWE',0
	.word	15491
	.byte	16,4,35,160,192,3,13
	.byte	'reserved_E030',0
	.word	15500
	.byte	208,7,4,35,176,192,3,13
	.byte	'TPS',0
	.word	15838
	.byte	16,4,35,128,200,3,13
	.byte	'reserved_E410',0
	.word	15843
	.byte	240,23,4,35,144,200,3,13
	.byte	'TR',0
	.word	16321
	.byte	64,4,35,128,224,3,13
	.byte	'reserved_F040',0
	.word	16326
	.byte	192,23,4,35,192,224,3,13
	.byte	'CCTRL',0
	.word	16456
	.byte	4,4,35,128,248,3,13
	.byte	'CCNT',0
	.word	16559
	.byte	4,4,35,132,248,3,13
	.byte	'ICNT',0
	.word	16663
	.byte	4,4,35,136,248,3,13
	.byte	'M1CNT',0
	.word	16768
	.byte	4,4,35,140,248,3,13
	.byte	'M2CNT',0
	.word	16873
	.byte	4,4,35,144,248,3,13
	.byte	'M3CNT',0
	.word	16978
	.byte	4,4,35,148,248,3,13
	.byte	'reserved_FC18',0
	.word	17018
	.byte	232,1,4,35,152,248,3,13
	.byte	'DBGSR',0
	.word	17216
	.byte	4,4,35,128,250,3,13
	.byte	'reserved_FD04',0
	.word	2973
	.byte	4,4,35,132,250,3,13
	.byte	'EXEVT',0
	.word	17382
	.byte	4,4,35,136,250,3,13
	.byte	'CREVT',0
	.word	17548
	.byte	4,4,35,140,250,3,13
	.byte	'SWEVT',0
	.word	17714
	.byte	4,4,35,144,250,3,13
	.byte	'reserved_FD14',0
	.word	17754
	.byte	28,4,35,148,250,3,13
	.byte	'TRIG_ACC',0
	.word	17927
	.byte	4,4,35,176,250,3,13
	.byte	'reserved_FD34',0
	.word	5132
	.byte	12,4,35,180,250,3,13
	.byte	'DMS',0
	.word	18034
	.byte	4,4,35,192,250,3,13
	.byte	'DCX',0
	.word	18141
	.byte	4,4,35,196,250,3,13
	.byte	'DBGTCR',0
	.word	18246
	.byte	4,4,35,200,250,3,13
	.byte	'reserved_FD4C',0
	.word	18286
	.byte	180,1,4,35,204,250,3,13
	.byte	'PCXI',0
	.word	18400
	.byte	4,4,35,128,252,3,13
	.byte	'PSW',0
	.word	18657
	.byte	4,4,35,132,252,3,13
	.byte	'PC',0
	.word	18757
	.byte	4,4,35,136,252,3,13
	.byte	'reserved_FE0C',0
	.word	4792
	.byte	8,4,35,140,252,3,13
	.byte	'SYSCON',0
	.word	18929
	.byte	4,4,35,148,252,3,13
	.byte	'CPU_ID',0
	.word	19048
	.byte	4,4,35,152,252,3,13
	.byte	'CORE_ID',0
	.word	19157
	.byte	4,4,35,156,252,3,13
	.byte	'BIV',0
	.word	19251
	.byte	4,4,35,160,252,3,13
	.byte	'BTV',0
	.word	19352
	.byte	4,4,35,164,252,3,13
	.byte	'ISP',0
	.word	19432
	.byte	4,4,35,168,252,3,13
	.byte	'ICR',0
	.word	19589
	.byte	4,4,35,172,252,3,13
	.byte	'reserved_FE30',0
	.word	4792
	.byte	8,4,35,176,252,3,13
	.byte	'FCX',0
	.word	19709
	.byte	4,4,35,184,252,3,13
	.byte	'LCX',0
	.word	19829
	.byte	4,4,35,188,252,3,13
	.byte	'reserved_FE40',0
	.word	19869
	.byte	16,4,35,192,252,3,13
	.byte	'CUS_ID',0
	.word	19943
	.byte	4,4,35,208,252,3,13
	.byte	'reserved_FE54',0
	.word	19983
	.byte	172,1,4,35,212,252,3,13
	.byte	'D',0
	.word	20073
	.byte	64,4,35,128,254,3,13
	.byte	'reserved_FF40',0
	.word	20082
	.byte	64,4,35,192,254,3,13
	.byte	'A',0
	.word	20169
	.byte	64,4,35,128,255,3,13
	.byte	'reserved_FFC0',0
	.word	20082
	.byte	64,4,35,192,255,3,0,14
	.word	20178
	.byte	3
	.word	21969
	.byte	31
	.byte	'IfxCpu_startCore',0,5,142,2,20
	.word	595
	.byte	1,1,1,1,5
	.byte	'cpu',0,5,142,2,46
	.word	21974
	.byte	5
	.byte	'programCounter',0,5,142,2,58
	.word	1520
	.byte	0,27
	.word	1605
	.byte	6,0,27
	.word	1647
	.byte	28
	.word	1675
	.byte	17,17,32
	.word	1260
	.byte	28
	.word	1298
	.byte	28
	.word	1316
	.byte	33
	.word	1334
	.byte	0,0,32
	.word	1486
	.byte	33
	.word	1518
	.byte	0,6,32
	.word	1336
	.byte	28
	.word	1387
	.byte	33
	.word	1405
	.byte	0,6,32
	.word	1182
	.byte	28
	.word	1222
	.byte	28
	.word	1240
	.byte	33
	.word	1258
	.byte	0,6,6,0,0,27
	.word	1699
	.byte	28
	.word	1730
	.byte	17,6,17,17,32
	.word	1260
	.byte	28
	.word	1298
	.byte	28
	.word	1316
	.byte	33
	.word	1334
	.byte	0,0,32
	.word	1486
	.byte	33
	.word	1518
	.byte	0,32
	.word	1336
	.byte	28
	.word	1387
	.byte	33
	.word	1405
	.byte	0,32
	.word	1182
	.byte	28
	.word	1222
	.byte	28
	.word	1240
	.byte	33
	.word	1258
	.byte	0,0,6,6,6,6,0,0,27
	.word	1757
	.byte	28
	.word	1798
	.byte	6,0,27
	.word	1817
	.byte	28
	.word	1872
	.byte	6,0,27
	.word	1891
	.byte	28
	.word	1931
	.byte	28
	.word	1948
	.byte	17,6,0,0,27
	.word	9828
	.byte	28
	.word	9856
	.byte	28
	.word	9870
	.byte	28
	.word	9888
	.byte	6,0,34
	.byte	'IfxScuCcu_PllStepsFunctionHook',0,11,148,1,16
	.word	159
	.byte	35,11,231,5,9,12,13
	.byte	'k2Step',0
	.word	595
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	216
	.byte	4,2,35,2,13
	.byte	'hookFunction',0
	.word	22298
	.byte	4,2,35,8,0,3
	.word	22338
	.byte	35,11,221,5,9,8,13
	.byte	'pDivider',0
	.word	595
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	595
	.byte	1,2,35,1,13
	.byte	'k2Initial',0
	.word	595
	.byte	1,2,35,2,13
	.byte	'waitTime',0
	.word	216
	.byte	4,2,35,4,0,35,11,137,6,9,16,13
	.byte	'numOfPllDividerSteps',0
	.word	595
	.byte	1,2,35,0,13
	.byte	'pllDividerStep',0
	.word	22401
	.byte	4,2,35,4,13
	.byte	'pllInitialStep',0
	.word	22406
	.byte	8,2,35,8,0,35,11,212,5,9,8,13
	.byte	'value',0
	.word	1520
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	1520
	.byte	4,2,35,4,0,35,11,244,5,9,48,13
	.byte	'ccucon0',0
	.word	22571
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	22571
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	22571
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	22571
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	22571
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	22571
	.byte	8,2,35,40,0,35,11,128,6,9,8,13
	.byte	'value',0
	.word	1520
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	1520
	.byte	4,2,35,4,0,35,11,150,6,9,76,13
	.byte	'sysPll',0
	.word	22486
	.byte	16,2,35,0,13
	.byte	'clockDistribution',0
	.word	22607
	.byte	48,2,35,16,13
	.byte	'flashFconWaitStateConfig',0
	.word	22716
	.byte	8,2,35,64,13
	.byte	'xtalFrequency',0
	.word	1520
	.byte	4,2,35,72,0,20
	.word	22752
	.byte	3
	.word	22859
	.byte	31
	.byte	'IfxScuCcu_init',0,11,246,7,20
	.word	595
	.byte	1,1,1,1,5
	.byte	'cfg',0,11,246,7,59
	.word	22864
	.byte	0,3
	.word	156
	.byte	26
	.byte	'_Core1_start',0,12,81,6,1,1,1,1,26
	.byte	'core0_main',0,13,89,17,1,1,1,1,36
	.byte	'__INDIRECT__',0,13,1,1,1,1,1,7
	.byte	'short int',0,2,5,34
	.byte	'__wchar_t',0,13,1,1
	.word	22976
	.byte	34
	.byte	'__size_t',0,13,1,1
	.word	420
	.byte	34
	.byte	'__ptrdiff_t',0,13,1,1
	.word	436
	.byte	37,1,3
	.word	23044
	.byte	34
	.byte	'__codeptr',0,13,1,1
	.word	23046
	.byte	15,14,240,10,9,1,16
	.byte	'IfxScu_CCUCON0_CLKSEL_fBack',0,0,16
	.byte	'IfxScu_CCUCON0_CLKSEL_fPll',0,1,0,34
	.byte	'IfxScu_CCUCON0_CLKSEL',0,14,244,10,3
	.word	23069
	.byte	15,14,254,10,9,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,16
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,34
	.byte	'IfxScu_WDTCON1_IR',0,14,131,11,3
	.word	23166
	.byte	34
	.byte	'boolean',0,15,101,29
	.word	595
	.byte	34
	.byte	'uint8',0,15,105,29
	.word	595
	.byte	34
	.byte	'uint16',0,15,109,29
	.word	612
	.byte	34
	.byte	'uint32',0,15,113,29
	.word	1520
	.byte	34
	.byte	'uint64',0,15,118,29
	.word	302
	.byte	34
	.byte	'sint16',0,15,126,29
	.word	22976
	.byte	7
	.byte	'long int',0,4,5,34
	.byte	'sint32',0,15,131,1,29
	.word	23378
	.byte	7
	.byte	'long long int',0,8,5,34
	.byte	'sint64',0,15,138,1,29
	.word	23406
	.byte	34
	.byte	'float32',0,15,167,1,29
	.word	216
	.byte	34
	.byte	'pvoid',0,16,57,28
	.word	334
	.byte	34
	.byte	'Ifx_TickTime',0,16,79,28
	.word	23406
	.byte	15,16,130,1,9,1,16
	.byte	'Ifx_RxSel_a',0,0,16
	.byte	'Ifx_RxSel_b',0,1,16
	.byte	'Ifx_RxSel_c',0,2,16
	.byte	'Ifx_RxSel_d',0,3,16
	.byte	'Ifx_RxSel_e',0,4,16
	.byte	'Ifx_RxSel_f',0,5,16
	.byte	'Ifx_RxSel_g',0,6,16
	.byte	'Ifx_RxSel_h',0,7,0,34
	.byte	'Ifx_RxSel',0,16,140,1,3
	.word	23491
	.byte	10
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,4,45,16,4,11
	.byte	'EN0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	595
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	595
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	595
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	595
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	595
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	595
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	595
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	595
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	595
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	595
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	595
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	595
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	595
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	595
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	595
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_ACCEN0_Bits',0,4,79,3
	.word	23629
	.byte	10
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,4,82,16,4,11
	.byte	'reserved_0',0,4
	.word	420
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_SCU_ACCEN1_Bits',0,4,85,3
	.word	24186
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,4,88,16,4,11
	.byte	'STM0DIS',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	420
	.byte	29,0,2,35,0,0,34
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,4,94,3
	.word	24263
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,4,97,16,4,11
	.byte	'BAUD1DIV',0,1
	.word	595
	.byte	4,4,2,35,0,11
	.byte	'BAUD2DIV',0,1
	.word	595
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	595
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	595
	.byte	4,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	595
	.byte	4,4,2,35,2,11
	.byte	'FSI2DIV',0,1
	.word	595
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	595
	.byte	2,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	595
	.byte	2,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	595
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	595
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_CCUCON0_Bits',0,4,111,3
	.word	24399
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,4,114,16,4,11
	.byte	'CANDIV',0,1
	.word	595
	.byte	4,4,2,35,0,11
	.byte	'ERAYDIV',0,1
	.word	595
	.byte	4,0,2,35,0,11
	.byte	'STMDIV',0,1
	.word	595
	.byte	4,4,2,35,1,11
	.byte	'GTMDIV',0,1
	.word	595
	.byte	4,0,2,35,1,11
	.byte	'ETHDIV',0,1
	.word	595
	.byte	4,4,2,35,2,11
	.byte	'ASCLINFDIV',0,1
	.word	595
	.byte	4,0,2,35,2,11
	.byte	'ASCLINSDIV',0,1
	.word	595
	.byte	4,4,2,35,3,11
	.byte	'INSEL',0,1
	.word	595
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_CCUCON1_Bits',0,4,126,3
	.word	24679
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,4,129,1,16,4,11
	.byte	'BBBDIV',0,1
	.word	595
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	420
	.byte	26,2,2,35,0,11
	.byte	'UP',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_CCUCON2_Bits',0,4,135,1,3
	.word	24917
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,4,138,1,16,4,11
	.byte	'PLLDIV',0,1
	.word	595
	.byte	6,2,2,35,0,11
	.byte	'PLLSEL',0,1
	.word	595
	.byte	2,0,2,35,0,11
	.byte	'PLLERAYDIV',0,1
	.word	595
	.byte	6,2,2,35,1,11
	.byte	'PLLERAYSEL',0,1
	.word	595
	.byte	2,0,2,35,1,11
	.byte	'SRIDIV',0,1
	.word	595
	.byte	6,2,2,35,2,11
	.byte	'SRISEL',0,1
	.word	595
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	595
	.byte	5,3,2,35,3,11
	.byte	'SLCK',0,1
	.word	595
	.byte	1,2,2,35,3,11
	.byte	'UP',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_CCUCON3_Bits',0,4,150,1,3
	.word	25045
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,4,153,1,16,4,11
	.byte	'SPBDIV',0,1
	.word	595
	.byte	6,2,2,35,0,11
	.byte	'SPBSEL',0,1
	.word	595
	.byte	2,0,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	595
	.byte	6,2,2,35,1,11
	.byte	'GTMSEL',0,1
	.word	595
	.byte	2,0,2,35,1,11
	.byte	'STMDIV',0,1
	.word	595
	.byte	6,2,2,35,2,11
	.byte	'STMSEL',0,1
	.word	595
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	595
	.byte	5,3,2,35,3,11
	.byte	'SLCK',0,1
	.word	595
	.byte	1,2,2,35,3,11
	.byte	'UP',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_CCUCON4_Bits',0,4,165,1,3
	.word	25288
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,4,168,1,16,4,11
	.byte	'MAXDIV',0,1
	.word	595
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	420
	.byte	26,2,2,35,0,11
	.byte	'UP',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_CCUCON5_Bits',0,4,174,1,3
	.word	25523
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,4,177,1,16,4,11
	.byte	'CPU0DIV',0,1
	.word	595
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	420
	.byte	26,0,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON6_Bits',0,4,181,1,3
	.word	25651
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,4,184,1,16,4,11
	.byte	'CPU1DIV',0,1
	.word	595
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	420
	.byte	26,0,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON7_Bits',0,4,188,1,3
	.word	25751
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,4,191,1,16,4,11
	.byte	'CHREV',0,1
	.word	595
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	595
	.byte	2,0,2,35,0,11
	.byte	'CHID',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'EEA',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	595
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	595
	.byte	4,4,2,35,3,11
	.byte	'SP',0,1
	.word	595
	.byte	2,2,2,35,3,11
	.byte	'SEC',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_CHIPID_Bits',0,4,202,1,3
	.word	25851
	.byte	10
	.byte	'_Ifx_SCU_DTSCON_Bits',0,4,205,1,16,4,11
	.byte	'PWD',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'START',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	595
	.byte	2,4,2,35,0,11
	.byte	'CAL',0,4
	.word	420
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	595
	.byte	7,1,2,35,3,11
	.byte	'SLCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_DTSCON_Bits',0,4,213,1,3
	.word	26059
	.byte	10
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,4,216,1,16,4,11
	.byte	'LOWER',0,2
	.word	612
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	595
	.byte	5,1,2,35,1,11
	.byte	'LLU',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	612
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	595
	.byte	4,2,2,35,3,11
	.byte	'SLCK',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_DTSLIM_Bits',0,4,225,1,3
	.word	26224
	.byte	10
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,4,228,1,16,4,11
	.byte	'RESULT',0,2
	.word	612
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	595
	.byte	4,2,2,35,1,11
	.byte	'RDY',0,1
	.word	595
	.byte	1,1,2,35,1,11
	.byte	'BUSY',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,4,235,1,3
	.word	26407
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,4,238,1,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	595
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	595
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	420
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	595
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	595
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	595
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	595
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	595
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	595
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	595
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EICR_Bits',0,4,129,2,3
	.word	26561
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,4,132,2,16,4,11
	.byte	'INTF0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	420
	.byte	24,0,2,35,0,0,34
	.byte	'Ifx_SCU_EIFR_Bits',0,4,143,2,3
	.word	26925
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,4,146,2,16,4,11
	.byte	'POL',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	612
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	595
	.byte	6,0,2,35,2,11
	.byte	'EMSFM',0,1
	.word	595
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	595
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	595
	.byte	4,0,2,35,3,0,34
	.byte	'Ifx_SCU_EMSR_Bits',0,4,159,2,3
	.word	27136
	.byte	10
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,4,162,2,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	612
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	420
	.byte	23,0,2,35,0,0,34
	.byte	'Ifx_SCU_ESRCFG_Bits',0,4,167,2,3
	.word	27388
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,4,170,2,16,4,11
	.byte	'ARI',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	420
	.byte	30,0,2,35,0,0,34
	.byte	'Ifx_SCU_ESROCFG_Bits',0,4,175,2,3
	.word	27506
	.byte	10
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,4,178,2,16,4,11
	.byte	'reserved_0',0,4
	.word	420
	.byte	28,4,2,35,0,11
	.byte	'EVR13OFF',0,1
	.word	595
	.byte	1,3,2,35,3,11
	.byte	'BPEVR13OFF',0,1
	.word	595
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVR13CON_Bits',0,4,185,2,3
	.word	27617
	.byte	10
	.byte	'_Ifx_SCU_EVR33CON_Bits',0,4,188,2,16,4,11
	.byte	'reserved_0',0,4
	.word	420
	.byte	28,4,2,35,0,11
	.byte	'EVR33OFF',0,1
	.word	595
	.byte	1,3,2,35,3,11
	.byte	'BPEVR33OFF',0,1
	.word	595
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVR33CON_Bits',0,4,195,2,3
	.word	27780
	.byte	10
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,4,198,2,16,4,11
	.byte	'ADC13V',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'ADC33V',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'ADCSWDV',0,1
	.word	595
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	595
	.byte	7,1,2,35,3,11
	.byte	'VAL',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,4,205,2,3
	.word	27943
	.byte	10
	.byte	'_Ifx_SCU_EVRDVSTAT_Bits',0,4,208,2,16,4,11
	.byte	'DVS13TRIM',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'DVS33TRIM',0,1
	.word	595
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	595
	.byte	7,1,2,35,3,11
	.byte	'VAL',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRDVSTAT_Bits',0,4,215,2,3
	.word	28101
	.byte	10
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,4,218,2,16,4,11
	.byte	'EVR13OVMOD',0,1
	.word	595
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	595
	.byte	2,4,2,35,0,11
	.byte	'EVR13UVMOD',0,1
	.word	595
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	595
	.byte	2,0,2,35,0,11
	.byte	'EVR33OVMOD',0,1
	.word	595
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	595
	.byte	2,4,2,35,1,11
	.byte	'EVR33UVMOD',0,1
	.word	595
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	595
	.byte	2,0,2,35,1,11
	.byte	'SWDOVMOD',0,1
	.word	595
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	595
	.byte	2,4,2,35,2,11
	.byte	'SWDUVMOD',0,1
	.word	595
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	612
	.byte	10,0,2,35,2,0,34
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,4,232,2,3
	.word	28266
	.byte	10
	.byte	'_Ifx_SCU_EVROSCCTRL_Bits',0,4,235,2,16,4,11
	.byte	'OSCTRIM',0,2
	.word	612
	.byte	10,6,2,35,0,11
	.byte	'OSCPTAT',0,1
	.word	595
	.byte	6,0,2,35,1,11
	.byte	'OSCANASEL',0,1
	.word	595
	.byte	4,4,2,35,2,11
	.byte	'HPBGTRIM',0,2
	.word	612
	.byte	7,5,2,35,2,11
	.byte	'HPBGCLKEN',0,1
	.word	595
	.byte	1,4,2,35,3,11
	.byte	'OSC3V3',0,1
	.word	595
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	595
	.byte	2,1,2,35,3,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVROSCCTRL_Bits',0,4,245,2,3
	.word	28595
	.byte	10
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,4,248,2,16,4,11
	.byte	'EVR13OVVAL',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'EVR33OVVAL',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'SWDOVVAL',0,1
	.word	595
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	595
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVROVMON_Bits',0,4,255,2,3
	.word	28816
	.byte	10
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,4,130,3,16,4,11
	.byte	'RST13TRIM',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	420
	.byte	16,8,2,35,0,11
	.byte	'RST13OFF',0,1
	.word	595
	.byte	1,7,2,35,3,11
	.byte	'BPRST13OFF',0,1
	.word	595
	.byte	1,6,2,35,3,11
	.byte	'RST33OFF',0,1
	.word	595
	.byte	1,5,2,35,3,11
	.byte	'BPRST33OFF',0,1
	.word	595
	.byte	1,4,2,35,3,11
	.byte	'RSTSWDOFF',0,1
	.word	595
	.byte	1,3,2,35,3,11
	.byte	'BPRSTSWDOFF',0,1
	.word	595
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,4,142,3,3
	.word	28979
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF1_Bits',0,4,145,3,16,4,11
	.byte	'SD5P',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'SD5I',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'SD5D',0,1
	.word	595
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	595
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF1_Bits',0,4,152,3,3
	.word	29251
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,4,155,3,16,4,11
	.byte	'SD33P',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'SD33I',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'SD33D',0,1
	.word	595
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	595
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,4,162,3,3
	.word	29404
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF3_Bits',0,4,165,3,16,4,11
	.byte	'CT5REG0',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'CT5REG1',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'CT5REG2',0,1
	.word	595
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	595
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF3_Bits',0,4,172,3,3
	.word	29560
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF4_Bits',0,4,175,3,16,4,11
	.byte	'CT5REG3',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'CT5REG4',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF4_Bits',0,4,181,3,3
	.word	29722
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF5_Bits',0,4,184,3,16,4,11
	.byte	'CT33REG0',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'CT33REG1',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'CT33REG2',0,1
	.word	595
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	595
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF5_Bits',0,4,191,3,3
	.word	29865
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF6_Bits',0,4,194,3,16,4,11
	.byte	'CT33REG3',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'CT33REG4',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF6_Bits',0,4,200,3,3
	.word	30030
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,4,203,3,16,4,11
	.byte	'SDFREQSPRD',0,2
	.word	612
	.byte	16,0,2,35,0,11
	.byte	'SDFREQ',0,1
	.word	595
	.byte	8,0,2,35,2,11
	.byte	'SDSTEP',0,1
	.word	595
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	595
	.byte	2,2,2,35,3,11
	.byte	'SDSAMPLE',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,4,211,3,3
	.word	30175
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,4,214,3,16,4,11
	.byte	'DRVP',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'SDMINMAXDC',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'DRVN',0,1
	.word	595
	.byte	8,0,2,35,2,11
	.byte	'SDLUT',0,1
	.word	595
	.byte	6,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,4,222,3,3
	.word	30356
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,4,225,3,16,4,11
	.byte	'SDPWMPRE',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'SDPID',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'SDVOKLVL',0,1
	.word	595
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	595
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,4,232,3,3
	.word	30530
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL4_Bits',0,4,235,3,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'SYNCDIV',0,1
	.word	595
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	420
	.byte	20,1,2,35,0,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRSDCTRL4_Bits',0,4,241,3,3
	.word	30690
	.byte	10
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,4,244,3,16,4,11
	.byte	'EVR13',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'OV13',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'EVR33',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'OV33',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'OVSWD',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'UV13',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'UV33',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'UVSWD',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'EXTPASS13',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'EXTPASS33',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'BGPROK',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	420
	.byte	21,0,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,4,130,4,3
	.word	30834
	.byte	10
	.byte	'_Ifx_SCU_EVRTRIM_Bits',0,4,133,4,16,4,11
	.byte	'EVR13TRIM',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'SDVOUTSEL',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRTRIM_Bits',0,4,139,4,3
	.word	31108
	.byte	10
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,4,142,4,16,4,11
	.byte	'EVR13UVVAL',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'EVR33UVVAL',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'SWDUVVAL',0,1
	.word	595
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	595
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,4,149,4,3
	.word	31247
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,4,152,4,16,4,11
	.byte	'EN0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	595
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	612
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	595
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	595
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	595
	.byte	8,0,2,35,3,0,34
	.byte	'Ifx_SCU_EXTCON_Bits',0,4,163,4,3
	.word	31410
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,4,166,4,16,4,11
	.byte	'STEP',0,2
	.word	612
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	595
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	595
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	612
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	595
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_FDR_Bits',0,4,174,4,3
	.word	31628
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,4,177,4,16,4,11
	.byte	'FS0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	595
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	595
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	595
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	595
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	595
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	595
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	595
	.byte	8,0,2,35,3,0,34
	.byte	'Ifx_SCU_FMR_Bits',0,4,197,4,3
	.word	31791
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,4,200,4,16,4,11
	.byte	'MODREV',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	612
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_SCU_ID_Bits',0,4,205,4,3
	.word	32127
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,4,208,4,16,4,11
	.byte	'IPEN00',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	595
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	595
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	595
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	595
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	595
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	595
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	595
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	595
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	595
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	595
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	595
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	595
	.byte	2,0,2,35,3,0,34
	.byte	'Ifx_SCU_IGCR_Bits',0,4,232,4,3
	.word	32234
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,4,235,4,16,4,11
	.byte	'P0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	420
	.byte	30,0,2,35,0,0,34
	.byte	'Ifx_SCU_IN_Bits',0,4,240,4,3
	.word	32686
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,4,243,4,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	595
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	595
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	595
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_SCU_IOCR_Bits',0,4,250,4,3
	.word	32785
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,4,253,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'LBISTREQP',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,2
	.word	612
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,4,131,5,3
	.word	32935
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,4,134,5,16,4,11
	.byte	'SEED',0,4
	.word	420
	.byte	23,9,2,35,0,11
	.byte	'reserved_23',0,1
	.word	595
	.byte	1,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	595
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	595
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	595
	.byte	4,0,2,35,3,0,34
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,4,141,5,3
	.word	33084
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,4,144,5,16,4,11
	.byte	'SIGNATURE',0,4
	.word	420
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	595
	.byte	7,1,2,35,3,11
	.byte	'LBISTDONE',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,4,149,5,3
	.word	33245
	.byte	10
	.byte	'_Ifx_SCU_LCLCON_Bits',0,4,152,5,16,4,11
	.byte	'reserved_0',0,2
	.word	612
	.byte	16,0,2,35,0,11
	.byte	'LS',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	612
	.byte	14,1,2,35,2,11
	.byte	'LSEN',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_LCLCON_Bits',0,4,158,5,3
	.word	33375
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,4,161,5,16,4,11
	.byte	'LCLT0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	420
	.byte	30,0,2,35,0,0,34
	.byte	'Ifx_SCU_LCLTEST_Bits',0,4,166,5,3
	.word	33507
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,4,169,5,16,4,11
	.byte	'DEPT',0,1
	.word	595
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	612
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_SCU_MANID_Bits',0,4,174,5,3
	.word	33622
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,4,177,5,16,4,11
	.byte	'PS0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	612
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	612
	.byte	14,0,2,35,2,0,34
	.byte	'Ifx_SCU_OMR_Bits',0,4,185,5,3
	.word	33733
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,4,188,5,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	595
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	595
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'X1D',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'X1DEN',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	595
	.byte	4,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	595
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	595
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	595
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	595
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	595
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	595
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	595
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	595
	.byte	4,0,2,35,3,0,34
	.byte	'Ifx_SCU_OSCCON_Bits',0,4,209,5,3
	.word	33891
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,4,212,5,16,4,11
	.byte	'P0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	420
	.byte	30,0,2,35,0,0,34
	.byte	'Ifx_SCU_OUT_Bits',0,4,217,5,3
	.word	34303
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,4,220,5,16,4,11
	.byte	'CSEL0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	612
	.byte	13,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	595
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	595
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	595
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	595
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	595
	.byte	6,0,2,35,3,0,34
	.byte	'Ifx_SCU_OVCCON_Bits',0,4,233,5,3
	.word	34404
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,4,236,5,16,4,11
	.byte	'OVEN0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	420
	.byte	29,0,2,35,0,0,34
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,4,242,5,3
	.word	34671
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,4,245,5,16,4,11
	.byte	'PDIS0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	420
	.byte	30,0,2,35,0,0,34
	.byte	'Ifx_SCU_PDISC_Bits',0,4,250,5,3
	.word	34807
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,4,253,5,16,4,11
	.byte	'PD0',0,1
	.word	595
	.byte	3,5,2,35,0,11
	.byte	'PL0',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'PD1',0,1
	.word	595
	.byte	3,1,2,35,0,11
	.byte	'PL1',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	420
	.byte	24,0,2,35,0,0,34
	.byte	'Ifx_SCU_PDR_Bits',0,4,132,6,3
	.word	34918
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,4,135,6,16,4,11
	.byte	'PDR0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	420
	.byte	24,0,2,35,0,0,34
	.byte	'Ifx_SCU_PDRR_Bits',0,4,146,6,3
	.word	35051
	.byte	10
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,4,149,6,16,4,11
	.byte	'VCOBYP',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'VCOPWD',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'SETFINDIS',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'CLRFINDIS',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'OSCDISCDIS',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	612
	.byte	2,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	595
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	595
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	595
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	595
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	595
	.byte	4,0,2,35,3,0,34
	.byte	'Ifx_SCU_PLLCON0_Bits',0,4,166,6,3
	.word	35254
	.byte	10
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,4,169,6,16,4,11
	.byte	'K2DIV',0,1
	.word	595
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	595
	.byte	7,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'K1DIV',0,1
	.word	595
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	612
	.byte	9,0,2,35,2,0,34
	.byte	'Ifx_SCU_PLLCON1_Bits',0,4,177,6,3
	.word	35610
	.byte	10
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,4,180,6,16,4,11
	.byte	'MODCFG',0,2
	.word	612
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_SCU_PLLCON2_Bits',0,4,184,6,3
	.word	35788
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,4,187,6,16,4,11
	.byte	'VCOBYP',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'VCOPWD',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	595
	.byte	2,4,2,35,0,11
	.byte	'SETFINDIS',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'CLRFINDIS',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'OSCDISCDIS',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	612
	.byte	2,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	595
	.byte	5,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	595
	.byte	2,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	595
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	595
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	595
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	595
	.byte	4,0,2,35,3,0,34
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,4,204,6,3
	.word	35888
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,4,207,6,16,4,11
	.byte	'K2DIV',0,1
	.word	595
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	595
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	595
	.byte	4,0,2,35,1,11
	.byte	'K1DIV',0,1
	.word	595
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	612
	.byte	9,0,2,35,2,0,34
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,4,215,6,3
	.word	36258
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,4,218,6,16,4,11
	.byte	'VCOBYST',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'VCOLOCK',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'FINDIS',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'K1RDY',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	420
	.byte	26,0,2,35,0,0,34
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,4,227,6,3
	.word	36444
	.byte	10
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,4,230,6,16,4,11
	.byte	'VCOBYST',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'VCOLOCK',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'FINDIS',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'K1RDY',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	420
	.byte	24,0,2,35,0,0,34
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,4,241,6,3
	.word	36642
	.byte	10
	.byte	'_Ifx_SCU_PMCSR_Bits',0,4,244,6,16,4,11
	.byte	'REQSLP',0,1
	.word	595
	.byte	2,6,2,35,0,11
	.byte	'SMUSLP',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	595
	.byte	5,0,2,35,0,11
	.byte	'PMST',0,1
	.word	595
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	420
	.byte	21,0,2,35,0,0,34
	.byte	'Ifx_SCU_PMCSR_Bits',0,4,251,6,3
	.word	36875
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,4,254,6,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'ESR1WKEN',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'PINAWKEN',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'PINBWKEN',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'ESR0DFEN',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'ESR0EDCON',0,1
	.word	595
	.byte	2,1,2,35,0,11
	.byte	'ESR1DFEN',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'ESR1EDCON',0,1
	.word	595
	.byte	2,6,2,35,1,11
	.byte	'PINADFEN',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'PINAEDCON',0,1
	.word	595
	.byte	2,3,2,35,1,11
	.byte	'PINBDFEN',0,1
	.word	595
	.byte	1,2,2,35,1,11
	.byte	'PINBEDCON',0,1
	.word	595
	.byte	2,0,2,35,1,11
	.byte	'SCREN',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'STBYRAMSEL',0,1
	.word	595
	.byte	2,5,2,35,2,11
	.byte	'SCRCLKSEL',0,1
	.word	595
	.byte	1,4,2,35,2,11
	.byte	'SCRWKEN',0,1
	.word	595
	.byte	1,3,2,35,2,11
	.byte	'TRISTEN',0,1
	.word	595
	.byte	1,2,2,35,2,11
	.byte	'TRISTREQ',0,1
	.word	595
	.byte	1,1,2,35,2,11
	.byte	'PORSTDF',0,1
	.word	595
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	595
	.byte	1,7,2,35,3,11
	.byte	'DCDCSYNC',0,1
	.word	595
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	595
	.byte	3,3,2,35,3,11
	.byte	'ESR0TRIST',0,1
	.word	595
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,4,153,7,3
	.word	37027
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,4,156,7,16,4,11
	.byte	'SCRSTEN',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'SCRSTREQ',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	595
	.byte	6,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	595
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	595
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	595
	.byte	3,0,2,35,1,11
	.byte	'SCRCFG',0,1
	.word	595
	.byte	8,0,2,35,2,11
	.byte	'CPUSEL',0,1
	.word	595
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	595
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	595
	.byte	3,1,2,35,3,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,4,170,7,3
	.word	37594
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR2_Bits',0,4,173,7,16,4,11
	.byte	'SCRINT',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'BUSY',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'SCRECC',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'SCRWDT',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'SCRRST',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	595
	.byte	4,0,2,35,1,11
	.byte	'TCINT',0,1
	.word	595
	.byte	8,0,2,35,2,11
	.byte	'TCINTREQ',0,1
	.word	595
	.byte	1,7,2,35,3,11
	.byte	'SMURST',0,1
	.word	595
	.byte	1,6,2,35,3,11
	.byte	'RST',0,1
	.word	595
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	595
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SCU_PMSWCR2_Bits',0,4,187,7,3
	.word	37888
	.byte	10
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,4,190,7,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	2,6,2,35,0,11
	.byte	'ESR1WKP',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'ESR1OVRUN',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'PINAWKP',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'PINAOVRUN',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'PINBWKP',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'PINBOVRUN',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'PORSTDF',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'HWCFGEVR',0,1
	.word	595
	.byte	3,3,2,35,1,11
	.byte	'STBYRAM',0,1
	.word	595
	.byte	2,1,2,35,1,11
	.byte	'TRIST',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'SCRST',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'SCRWKP',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'SCR',0,1
	.word	595
	.byte	1,5,2,35,2,11
	.byte	'SCRWKEN',0,1
	.word	595
	.byte	1,4,2,35,2,11
	.byte	'ESR1WKEN',0,1
	.word	595
	.byte	1,3,2,35,2,11
	.byte	'PINAWKEN',0,1
	.word	595
	.byte	1,2,2,35,2,11
	.byte	'PINBWKEN',0,1
	.word	595
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	612
	.byte	4,5,2,35,2,11
	.byte	'ESR0TRIST',0,1
	.word	595
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	595
	.byte	4,0,2,35,3,0,34
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,4,214,7,3
	.word	38166
	.byte	10
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,4,217,7,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	2,6,2,35,0,11
	.byte	'ESR1WKPCLR',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'ESR1OVRUNCLR',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'PINAWKPCLR',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'PINAOVRUNCLR',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'PINBWKPCLR',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'PINBOVRUNCLR',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'SCRSTCLR',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'SCRWKPCLR',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	612
	.byte	14,0,2,35,2,0,34
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,4,230,7,3
	.word	38662
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,4,233,7,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	612
	.byte	10,4,2,35,0,11
	.byte	'CSS0',0,1
	.word	595
	.byte	1,3,2,35,1,11
	.byte	'CSS1',0,1
	.word	595
	.byte	1,2,2,35,1,11
	.byte	'CSS2',0,1
	.word	595
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	612
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_SCU_RSTCON2_Bits',0,4,243,7,3
	.word	38975
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,4,246,7,16,4,11
	.byte	'ESR0',0,1
	.word	595
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	595
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	595
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	595
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	595
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	595
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	595
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	595
	.byte	2,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_SCU_RSTCON_Bits',0,4,129,8,3
	.word	39184
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,4,132,8,16,4,11
	.byte	'ESR0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'PORST',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	595
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	595
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	595
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	595
	.byte	2,1,2,35,2,11
	.byte	'EVR13',0,1
	.word	595
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	595
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	595
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	595
	.byte	2,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	595
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	595
	.byte	3,0,2,35,3,0,34
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,4,155,8,3
	.word	39395
	.byte	10
	.byte	'_Ifx_SCU_SAFECON_Bits',0,4,158,8,16,4,11
	.byte	'HBT',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	420
	.byte	31,0,2,35,0,0,34
	.byte	'Ifx_SCU_SAFECON_Bits',0,4,162,8,3
	.word	39827
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,4,165,8,16,4,11
	.byte	'HWCFG',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	595
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	595
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	595
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	595
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	595
	.byte	3,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	595
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	595
	.byte	7,0,2,35,3,0,34
	.byte	'Ifx_SCU_STSTAT_Bits',0,4,178,8,3
	.word	39923
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,4,181,8,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	420
	.byte	30,0,2,35,0,0,34
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,4,186,8,3
	.word	40183
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,4,189,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	595
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	595
	.byte	3,0,2,35,0,11
	.byte	'DATM',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	420
	.byte	23,0,2,35,0,0,34
	.byte	'Ifx_SCU_SYSCON_Bits',0,4,198,8,3
	.word	40308
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,4,201,8,16,4,11
	.byte	'ESR0T',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	420
	.byte	28,0,2,35,0,0,34
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,4,208,8,3
	.word	40505
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,4,211,8,16,4,11
	.byte	'ESR0T',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	420
	.byte	28,0,2,35,0,0,34
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,4,218,8,3
	.word	40658
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,4,221,8,16,4,11
	.byte	'ESR0T',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	420
	.byte	28,0,2,35,0,0,34
	.byte	'Ifx_SCU_TRAPSET_Bits',0,4,228,8,3
	.word	40811
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,4,231,8,16,4,11
	.byte	'ESR0T',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	420
	.byte	28,0,2,35,0,0,34
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,4,238,8,3
	.word	40964
	.byte	34
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,4,247,8,3
	.word	459
	.byte	34
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,4,134,9,3
	.word	634
	.byte	34
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,4,150,9,3
	.word	878
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,4,153,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	443
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	443
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	443
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	443
	.byte	16,0,2,35,0,0,34
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,4,159,9,3
	.word	41219
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,4,162,9,16,4,11
	.byte	'CLRIRF',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	595
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,4,175,9,3
	.word	41345
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,4,178,9,16,4,11
	.byte	'AE',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	595
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	612
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,4,191,9,3
	.word	41597
	.byte	12,4,199,9,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23629
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_ACCEN0',0,4,204,9,3
	.word	41816
	.byte	12,4,207,9,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24186
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_ACCEN1',0,4,212,9,3
	.word	41880
	.byte	12,4,215,9,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24263
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_ARSTDIS',0,4,220,9,3
	.word	41944
	.byte	12,4,223,9,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24399
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON0',0,4,228,9,3
	.word	42009
	.byte	12,4,231,9,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24679
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON1',0,4,236,9,3
	.word	42074
	.byte	12,4,239,9,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24917
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON2',0,4,244,9,3
	.word	42139
	.byte	12,4,247,9,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25045
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON3',0,4,252,9,3
	.word	42204
	.byte	12,4,255,9,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25288
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON4',0,4,132,10,3
	.word	42269
	.byte	12,4,135,10,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25523
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON5',0,4,140,10,3
	.word	42334
	.byte	12,4,143,10,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25651
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON6',0,4,148,10,3
	.word	42399
	.byte	12,4,151,10,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25751
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_CCUCON7',0,4,156,10,3
	.word	42464
	.byte	12,4,159,10,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25851
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_CHIPID',0,4,164,10,3
	.word	42529
	.byte	12,4,167,10,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26059
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_DTSCON',0,4,172,10,3
	.word	42593
	.byte	12,4,175,10,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26224
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_DTSLIM',0,4,180,10,3
	.word	42657
	.byte	12,4,183,10,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26407
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_DTSSTAT',0,4,188,10,3
	.word	42721
	.byte	12,4,191,10,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26561
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EICR',0,4,196,10,3
	.word	42786
	.byte	12,4,199,10,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26925
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EIFR',0,4,204,10,3
	.word	42848
	.byte	12,4,207,10,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27136
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EMSR',0,4,212,10,3
	.word	42910
	.byte	12,4,215,10,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27388
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_ESRCFG',0,4,220,10,3
	.word	42972
	.byte	12,4,223,10,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27506
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_ESROCFG',0,4,228,10,3
	.word	43036
	.byte	12,4,231,10,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27617
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVR13CON',0,4,236,10,3
	.word	43101
	.byte	12,4,239,10,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27780
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVR33CON',0,4,244,10,3
	.word	43167
	.byte	12,4,247,10,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27943
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRADCSTAT',0,4,252,10,3
	.word	43233
	.byte	12,4,255,10,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28101
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRDVSTAT',0,4,132,11,3
	.word	43301
	.byte	12,4,135,11,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28266
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRMONCTRL',0,4,140,11,3
	.word	43368
	.byte	12,4,143,11,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28595
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVROSCCTRL',0,4,148,11,3
	.word	43436
	.byte	12,4,151,11,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28816
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVROVMON',0,4,156,11,3
	.word	43504
	.byte	12,4,159,11,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28979
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRRSTCON',0,4,164,11,3
	.word	43570
	.byte	12,4,167,11,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29251
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF1',0,4,172,11,3
	.word	43637
	.byte	12,4,175,11,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29404
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,4,180,11,3
	.word	43706
	.byte	12,4,183,11,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29560
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF3',0,4,188,11,3
	.word	43775
	.byte	12,4,191,11,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29722
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF4',0,4,196,11,3
	.word	43844
	.byte	12,4,199,11,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29865
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF5',0,4,204,11,3
	.word	43913
	.byte	12,4,207,11,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30030
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSDCOEFF6',0,4,212,11,3
	.word	43982
	.byte	12,4,215,11,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30175
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSDCTRL1',0,4,220,11,3
	.word	44051
	.byte	12,4,223,11,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30356
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSDCTRL2',0,4,228,11,3
	.word	44119
	.byte	12,4,231,11,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30530
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSDCTRL3',0,4,236,11,3
	.word	44187
	.byte	12,4,239,11,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30690
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSDCTRL4',0,4,244,11,3
	.word	44255
	.byte	12,4,247,11,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30834
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRSTAT',0,4,252,11,3
	.word	44323
	.byte	12,4,255,11,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31108
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRTRIM',0,4,132,12,3
	.word	44388
	.byte	12,4,135,12,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31247
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EVRUVMON',0,4,140,12,3
	.word	44453
	.byte	12,4,143,12,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31410
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_EXTCON',0,4,148,12,3
	.word	44519
	.byte	12,4,151,12,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31628
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_FDR',0,4,156,12,3
	.word	44583
	.byte	12,4,159,12,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31791
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_FMR',0,4,164,12,3
	.word	44644
	.byte	12,4,167,12,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32127
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_ID',0,4,172,12,3
	.word	44705
	.byte	12,4,175,12,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32234
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_IGCR',0,4,180,12,3
	.word	44765
	.byte	12,4,183,12,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32686
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_IN',0,4,188,12,3
	.word	44827
	.byte	12,4,191,12,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32785
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_IOCR',0,4,196,12,3
	.word	44887
	.byte	12,4,199,12,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32935
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_LBISTCTRL0',0,4,204,12,3
	.word	44949
	.byte	12,4,207,12,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33084
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_LBISTCTRL1',0,4,212,12,3
	.word	45017
	.byte	12,4,215,12,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33245
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_LBISTCTRL2',0,4,220,12,3
	.word	45085
	.byte	12,4,223,12,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33375
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_LCLCON',0,4,228,12,3
	.word	45153
	.byte	12,4,231,12,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33507
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_LCLTEST',0,4,236,12,3
	.word	45217
	.byte	12,4,239,12,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33622
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_MANID',0,4,244,12,3
	.word	45282
	.byte	12,4,247,12,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33733
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_OMR',0,4,252,12,3
	.word	45345
	.byte	12,4,255,12,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33891
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_OSCCON',0,4,132,13,3
	.word	45406
	.byte	12,4,135,13,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34303
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_OUT',0,4,140,13,3
	.word	45470
	.byte	12,4,143,13,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34404
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_OVCCON',0,4,148,13,3
	.word	45531
	.byte	12,4,151,13,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34671
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_OVCENABLE',0,4,156,13,3
	.word	45595
	.byte	12,4,159,13,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34807
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PDISC',0,4,164,13,3
	.word	45662
	.byte	12,4,167,13,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34918
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PDR',0,4,172,13,3
	.word	45725
	.byte	12,4,175,13,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35051
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PDRR',0,4,180,13,3
	.word	45786
	.byte	12,4,183,13,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35254
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PLLCON0',0,4,188,13,3
	.word	45848
	.byte	12,4,191,13,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35610
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PLLCON1',0,4,196,13,3
	.word	45913
	.byte	12,4,199,13,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35788
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PLLCON2',0,4,204,13,3
	.word	45978
	.byte	12,4,207,13,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35888
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PLLERAYCON0',0,4,212,13,3
	.word	46043
	.byte	12,4,215,13,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36258
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PLLERAYCON1',0,4,220,13,3
	.word	46112
	.byte	12,4,223,13,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36444
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PLLERAYSTAT',0,4,228,13,3
	.word	46181
	.byte	12,4,231,13,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36642
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PLLSTAT',0,4,236,13,3
	.word	46250
	.byte	12,4,239,13,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36875
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PMCSR',0,4,244,13,3
	.word	46315
	.byte	12,4,247,13,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37027
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PMSWCR0',0,4,252,13,3
	.word	46378
	.byte	12,4,255,13,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37594
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PMSWCR1',0,4,132,14,3
	.word	46443
	.byte	12,4,135,14,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37888
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PMSWCR2',0,4,140,14,3
	.word	46508
	.byte	12,4,143,14,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38166
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PMSWSTAT',0,4,148,14,3
	.word	46573
	.byte	12,4,151,14,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38662
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_PMSWSTATCLR',0,4,156,14,3
	.word	46639
	.byte	12,4,159,14,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39184
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_RSTCON',0,4,164,14,3
	.word	46708
	.byte	12,4,167,14,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38975
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_RSTCON2',0,4,172,14,3
	.word	46772
	.byte	12,4,175,14,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39395
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_RSTSTAT',0,4,180,14,3
	.word	46837
	.byte	12,4,183,14,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39827
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_SAFECON',0,4,188,14,3
	.word	46902
	.byte	12,4,191,14,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39923
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_STSTAT',0,4,196,14,3
	.word	46967
	.byte	12,4,199,14,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40183
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_SWRSTCON',0,4,204,14,3
	.word	47031
	.byte	12,4,207,14,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40308
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_SYSCON',0,4,212,14,3
	.word	47097
	.byte	12,4,215,14,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40505
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_TRAPCLR',0,4,220,14,3
	.word	47161
	.byte	12,4,223,14,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40658
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_TRAPDIS',0,4,228,14,3
	.word	47226
	.byte	12,4,231,14,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40811
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_TRAPSET',0,4,236,14,3
	.word	47291
	.byte	12,4,239,14,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40964
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_TRAPSTAT',0,4,244,14,3
	.word	47356
	.byte	34
	.byte	'Ifx_SCU_WDTCPU_CON0',0,4,252,14,3
	.word	555
	.byte	34
	.byte	'Ifx_SCU_WDTCPU_CON1',0,4,132,15,3
	.word	838
	.byte	34
	.byte	'Ifx_SCU_WDTCPU_SR',0,4,140,15,3
	.word	1069
	.byte	12,4,143,15,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41219
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_WDTS_CON0',0,4,148,15,3
	.word	47507
	.byte	12,4,151,15,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41345
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_WDTS_CON1',0,4,156,15,3
	.word	47574
	.byte	12,4,159,15,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41597
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SCU_WDTS_SR',0,4,164,15,3
	.word	47641
	.byte	14
	.word	1109
	.byte	34
	.byte	'Ifx_SCU_WDTCPU',0,4,180,15,3
	.word	47706
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,4,183,15,25,12,13
	.byte	'CON0',0
	.word	47507
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	47574
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	47641
	.byte	4,2,35,8,0,14
	.word	47735
	.byte	34
	.byte	'Ifx_SCU_WDTS',0,4,188,15,3
	.word	47796
	.byte	18,8
	.word	42972
	.byte	19,1,0,18,20
	.word	595
	.byte	19,19,0,18,8
	.word	46315
	.byte	19,1,0,14
	.word	47735
	.byte	18,24
	.word	1109
	.byte	19,1,0,14
	.word	47855
	.byte	18,40
	.word	595
	.byte	19,39,0,18,16
	.word	42786
	.byte	19,3,0,18,16
	.word	44765
	.byte	19,3,0,18,180,3
	.word	595
	.byte	19,179,3,0,10
	.byte	'_Ifx_SCU',0,4,201,15,25,128,8,13
	.byte	'reserved_0',0
	.word	4792
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	44705
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2973
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	45406
	.byte	4,2,35,16,13
	.byte	'PLLSTAT',0
	.word	46250
	.byte	4,2,35,20,13
	.byte	'PLLCON0',0
	.word	45848
	.byte	4,2,35,24,13
	.byte	'PLLCON1',0
	.word	45913
	.byte	4,2,35,28,13
	.byte	'PLLCON2',0
	.word	45978
	.byte	4,2,35,32,13
	.byte	'PLLERAYSTAT',0
	.word	46181
	.byte	4,2,35,36,13
	.byte	'PLLERAYCON0',0
	.word	46043
	.byte	4,2,35,40,13
	.byte	'PLLERAYCON1',0
	.word	46112
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	42009
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	42074
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	44583
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	44519
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	42139
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	42204
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	42269
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	42334
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	46837
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	2973
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	46708
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	41944
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	47031
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	46772
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	2973
	.byte	4,2,35,104,13
	.byte	'EVRRSTCON',0
	.word	43570
	.byte	4,2,35,108,13
	.byte	'ESRCFG',0
	.word	47823
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	43036
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	47097
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	42399
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	42464
	.byte	4,3,35,132,1,13
	.byte	'reserved_88',0
	.word	47832
	.byte	20,3,35,136,1,13
	.byte	'PDR',0
	.word	45725
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	44887
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	45470
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	45345
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	44827
	.byte	4,3,35,172,1,13
	.byte	'EVRSTAT',0
	.word	44323
	.byte	4,3,35,176,1,13
	.byte	'EVRDVSTAT',0
	.word	43301
	.byte	4,3,35,180,1,13
	.byte	'EVR13CON',0
	.word	43101
	.byte	4,3,35,184,1,13
	.byte	'EVR33CON',0
	.word	43167
	.byte	4,3,35,188,1,13
	.byte	'STSTAT',0
	.word	46967
	.byte	4,3,35,192,1,13
	.byte	'reserved_C4',0
	.word	2973
	.byte	4,3,35,196,1,13
	.byte	'PMSWCR0',0
	.word	46378
	.byte	4,3,35,200,1,13
	.byte	'PMSWSTAT',0
	.word	46573
	.byte	4,3,35,204,1,13
	.byte	'PMSWSTATCLR',0
	.word	46639
	.byte	4,3,35,208,1,13
	.byte	'PMCSR',0
	.word	47841
	.byte	8,3,35,212,1,13
	.byte	'reserved_DC',0
	.word	2973
	.byte	4,3,35,220,1,13
	.byte	'DTSSTAT',0
	.word	42721
	.byte	4,3,35,224,1,13
	.byte	'DTSCON',0
	.word	42593
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	46443
	.byte	4,3,35,232,1,13
	.byte	'PMSWCR2',0
	.word	46508
	.byte	4,3,35,236,1,13
	.byte	'WDTS',0
	.word	47850
	.byte	12,3,35,240,1,13
	.byte	'EMSR',0
	.word	42910
	.byte	4,3,35,252,1,13
	.byte	'WDTCPU',0
	.word	47864
	.byte	24,3,35,128,2,13
	.byte	'reserved_118',0
	.word	5132
	.byte	12,3,35,152,2,13
	.byte	'TRAPSTAT',0
	.word	47356
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	47291
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	47161
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS',0
	.word	47226
	.byte	4,3,35,176,2,13
	.byte	'reserved_134',0
	.word	2973
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	45153
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	45217
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	42529
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	45282
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	4792
	.byte	8,3,35,200,2,13
	.byte	'SAFECON',0
	.word	46902
	.byte	4,3,35,208,2,13
	.byte	'reserved_154',0
	.word	19869
	.byte	16,3,35,212,2,13
	.byte	'LBISTCTRL0',0
	.word	44949
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	45017
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	45085
	.byte	4,3,35,236,2,13
	.byte	'reserved_170',0
	.word	17754
	.byte	28,3,35,240,2,13
	.byte	'PDISC',0
	.word	45662
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	4792
	.byte	8,3,35,144,3,13
	.byte	'EVRTRIM',0
	.word	44388
	.byte	4,3,35,152,3,13
	.byte	'EVRADCSTAT',0
	.word	43233
	.byte	4,3,35,156,3,13
	.byte	'EVRUVMON',0
	.word	44453
	.byte	4,3,35,160,3,13
	.byte	'EVROVMON',0
	.word	43504
	.byte	4,3,35,164,3,13
	.byte	'EVRMONCTRL',0
	.word	43368
	.byte	4,3,35,168,3,13
	.byte	'reserved_1AC',0
	.word	2973
	.byte	4,3,35,172,3,13
	.byte	'EVRSDCTRL1',0
	.word	44051
	.byte	4,3,35,176,3,13
	.byte	'EVRSDCTRL2',0
	.word	44119
	.byte	4,3,35,180,3,13
	.byte	'EVRSDCTRL3',0
	.word	44187
	.byte	4,3,35,184,3,13
	.byte	'EVRSDCTRL4',0
	.word	44255
	.byte	4,3,35,188,3,13
	.byte	'EVRSDCOEFF1',0
	.word	43637
	.byte	4,3,35,192,3,13
	.byte	'EVRSDCOEFF2',0
	.word	43706
	.byte	4,3,35,196,3,13
	.byte	'EVRSDCOEFF3',0
	.word	43775
	.byte	4,3,35,200,3,13
	.byte	'EVRSDCOEFF4',0
	.word	43844
	.byte	4,3,35,204,3,13
	.byte	'EVRSDCOEFF5',0
	.word	43913
	.byte	4,3,35,208,3,13
	.byte	'EVRSDCOEFF6',0
	.word	43982
	.byte	4,3,35,212,3,13
	.byte	'EVROSCCTRL',0
	.word	43436
	.byte	4,3,35,216,3,13
	.byte	'reserved_1DC',0
	.word	2973
	.byte	4,3,35,220,3,13
	.byte	'OVCENABLE',0
	.word	45595
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	45531
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	47869
	.byte	40,3,35,232,3,13
	.byte	'EICR',0
	.word	47878
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	42848
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	44644
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	45786
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	47887
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	2973
	.byte	4,3,35,188,4,13
	.byte	'DTSLIM',0
	.word	42657
	.byte	4,3,35,192,4,13
	.byte	'reserved_244',0
	.word	47896
	.byte	180,3,3,35,196,4,13
	.byte	'ACCEN1',0
	.word	41880
	.byte	4,3,35,248,7,13
	.byte	'ACCEN0',0
	.word	41816
	.byte	4,3,35,252,7,0,14
	.word	47907
	.byte	34
	.byte	'Ifx_SCU',0,4,181,16,3
	.word	49897
	.byte	34
	.byte	'Ifx_CPU_A_Bits',0,10,48,3
	.word	20091
	.byte	34
	.byte	'Ifx_CPU_BIV_Bits',0,10,55,3
	.word	19197
	.byte	34
	.byte	'Ifx_CPU_BTV_Bits',0,10,62,3
	.word	19291
	.byte	34
	.byte	'Ifx_CPU_CCNT_Bits',0,10,69,3
	.word	16496
	.byte	34
	.byte	'Ifx_CPU_CCTRL_Bits',0,10,80,3
	.word	16337
	.byte	34
	.byte	'Ifx_CPU_COMPAT_Bits',0,10,89,3
	.word	13565
	.byte	34
	.byte	'Ifx_CPU_CORE_ID_Bits',0,10,96,3
	.word	19088
	.byte	34
	.byte	'Ifx_CPU_CPR_L_Bits',0,10,103,3
	.word	14887
	.byte	34
	.byte	'Ifx_CPU_CPR_U_Bits',0,10,110,3
	.word	14993
	.byte	34
	.byte	'Ifx_CPU_CPU_ID_Bits',0,10,118,3
	.word	18969
	.byte	34
	.byte	'Ifx_CPU_CPXE_Bits',0,10,125,3
	.word	15166
	.byte	34
	.byte	'Ifx_CPU_CREVT_Bits',0,10,136,1,3
	.word	17422
	.byte	34
	.byte	'Ifx_CPU_CUS_ID_Bits',0,10,143,1,3
	.word	19878
	.byte	34
	.byte	'Ifx_CPU_D_Bits',0,10,149,1,3
	.word	19994
	.byte	34
	.byte	'Ifx_CPU_DATR_Bits',0,10,163,1,3
	.word	11868
	.byte	34
	.byte	'Ifx_CPU_DBGSR_Bits',0,10,177,1,3
	.word	17029
	.byte	34
	.byte	'Ifx_CPU_DBGTCR_Bits',0,10,184,1,3
	.word	18181
	.byte	34
	.byte	'Ifx_CPU_DCON0_Bits',0,10,192,1,3
	.word	12513
	.byte	34
	.byte	'Ifx_CPU_DCON2_Bits',0,10,199,1,3
	.word	11166
	.byte	34
	.byte	'Ifx_CPU_DCX_Bits',0,10,206,1,3
	.word	18074
	.byte	34
	.byte	'Ifx_CPU_DEADD_Bits',0,10,212,1,3
	.word	12099
	.byte	34
	.byte	'Ifx_CPU_DIEAR_Bits',0,10,218,1,3
	.word	12191
	.byte	34
	.byte	'Ifx_CPU_DIETR_Bits',0,10,233,1,3
	.word	12272
	.byte	34
	.byte	'Ifx_CPU_DMS_Bits',0,10,240,1,3
	.word	17967
	.byte	34
	.byte	'Ifx_CPU_DPR_L_Bits',0,10,247,1,3
	.word	14605
	.byte	34
	.byte	'Ifx_CPU_DPR_U_Bits',0,10,254,1,3
	.word	14712
	.byte	34
	.byte	'Ifx_CPU_DPRE_Bits',0,10,133,2,3
	.word	15276
	.byte	34
	.byte	'Ifx_CPU_DPWE_Bits',0,10,140,2,3
	.word	15388
	.byte	34
	.byte	'Ifx_CPU_DSTR_Bits',0,10,161,2,3
	.word	11531
	.byte	34
	.byte	'Ifx_CPU_EXEVT_Bits',0,10,172,2,3
	.word	17256
	.byte	34
	.byte	'Ifx_CPU_FCX_Bits',0,10,180,2,3
	.word	19629
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,10,202,2,3
	.word	13715
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,10,212,2,3
	.word	14156
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,10,218,2,3
	.word	14069
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,10,224,2,3
	.word	14321
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,10,230,2,3
	.word	14412
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,10,236,2,3
	.word	14503
	.byte	34
	.byte	'Ifx_CPU_ICNT_Bits',0,10,243,2,3
	.word	16599
	.byte	34
	.byte	'Ifx_CPU_ICR_Bits',0,10,253,2,3
	.word	19472
	.byte	34
	.byte	'Ifx_CPU_ISP_Bits',0,10,131,3,3
	.word	19392
	.byte	34
	.byte	'Ifx_CPU_LCX_Bits',0,10,139,3,3
	.word	19749
	.byte	34
	.byte	'Ifx_CPU_M1CNT_Bits',0,10,146,3,3
	.word	16703
	.byte	34
	.byte	'Ifx_CPU_M2CNT_Bits',0,10,153,3,3
	.word	16808
	.byte	34
	.byte	'Ifx_CPU_M3CNT_Bits',0,10,160,3,3
	.word	16913
	.byte	34
	.byte	'Ifx_CPU_PC_Bits',0,10,167,3,3
	.word	18697
	.byte	34
	.byte	'Ifx_CPU_PCON0_Bits',0,10,175,3,3
	.word	13104
	.byte	34
	.byte	'Ifx_CPU_PCON1_Bits',0,10,183,3,3
	.word	12868
	.byte	34
	.byte	'Ifx_CPU_PCON2_Bits',0,10,190,3,3
	.word	12991
	.byte	34
	.byte	'Ifx_CPU_PCXI_Bits',0,10,200,3,3
	.word	18297
	.byte	34
	.byte	'Ifx_CPU_PIEAR_Bits',0,10,206,3,3
	.word	13232
	.byte	34
	.byte	'Ifx_CPU_PIETR_Bits',0,10,221,3,3
	.word	13313
	.byte	34
	.byte	'Ifx_CPU_PMA0_Bits',0,10,229,3,3
	.word	10799
	.byte	34
	.byte	'Ifx_CPU_PMA1_Bits',0,10,237,3,3
	.word	10925
	.byte	34
	.byte	'Ifx_CPU_PMA2_Bits',0,10,244,3,3
	.word	11051
	.byte	34
	.byte	'Ifx_CPU_PSTR_Bits',0,10,129,4,3
	.word	12652
	.byte	34
	.byte	'Ifx_CPU_PSW_Bits',0,10,147,4,3
	.word	18440
	.byte	34
	.byte	'Ifx_CPU_SEGEN_Bits',0,10,156,4,3
	.word	10528
	.byte	34
	.byte	'Ifx_CPU_SMACON_Bits',0,10,171,4,3
	.word	11279
	.byte	10
	.byte	'_Ifx_CPU_SPROT_ACCENA_Bits',0,10,174,4,16,4,11
	.byte	'EN',0,4
	.word	420
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_ACCENA_Bits',0,10,177,4,3
	.word	51542
	.byte	10
	.byte	'_Ifx_CPU_SPROT_ACCENB_Bits',0,10,180,4,16,4,11
	.byte	'reserved_0',0,4
	.word	420
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_ACCENB_Bits',0,10,183,4,3
	.word	51625
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,10,186,4,16,4,11
	.byte	'EN',0,4
	.word	420
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,10,189,4,3
	.word	51716
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,10,192,4,16,4,11
	.byte	'reserved_0',0,4
	.word	420
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,10,195,4,3
	.word	51807
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_LA_Bits',0,10,198,4,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	420
	.byte	27,0,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_RGN_LA_Bits',0,10,202,4,3
	.word	51906
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_UA_Bits',0,10,205,4,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	420
	.byte	27,0,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_RGN_UA_Bits',0,10,209,4,3
	.word	52013
	.byte	34
	.byte	'Ifx_CPU_SWEVT_Bits',0,10,220,4,3
	.word	17588
	.byte	34
	.byte	'Ifx_CPU_SYSCON_Bits',0,10,231,4,3
	.word	18797
	.byte	34
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,10,238,4,3
	.word	10681
	.byte	34
	.byte	'Ifx_CPU_TPS_CON_Bits',0,10,249,4,3
	.word	15511
	.byte	34
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,10,255,4,3
	.word	15693
	.byte	34
	.byte	'Ifx_CPU_TR_ADR_Bits',0,10,133,5,3
	.word	16183
	.byte	34
	.byte	'Ifx_CPU_TR_EVT_Bits',0,10,153,5,3
	.word	15854
	.byte	34
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,10,167,5,3
	.word	17763
	.byte	34
	.byte	'Ifx_CPU_A',0,10,180,5,3
	.word	20129
	.byte	34
	.byte	'Ifx_CPU_BIV',0,10,188,5,3
	.word	19251
	.byte	34
	.byte	'Ifx_CPU_BTV',0,10,196,5,3
	.word	19352
	.byte	34
	.byte	'Ifx_CPU_CCNT',0,10,204,5,3
	.word	16559
	.byte	34
	.byte	'Ifx_CPU_CCTRL',0,10,212,5,3
	.word	16456
	.byte	34
	.byte	'Ifx_CPU_COMPAT',0,10,220,5,3
	.word	13664
	.byte	34
	.byte	'Ifx_CPU_CORE_ID',0,10,228,5,3
	.word	19157
	.byte	34
	.byte	'Ifx_CPU_CPR_L',0,10,236,5,3
	.word	14953
	.byte	34
	.byte	'Ifx_CPU_CPR_U',0,10,244,5,3
	.word	15059
	.byte	34
	.byte	'Ifx_CPU_CPU_ID',0,10,252,5,3
	.word	19048
	.byte	34
	.byte	'Ifx_CPU_CPXE',0,10,132,6,3
	.word	15227
	.byte	34
	.byte	'Ifx_CPU_CREVT',0,10,140,6,3
	.word	17548
	.byte	34
	.byte	'Ifx_CPU_CUS_ID',0,10,148,6,3
	.word	19943
	.byte	34
	.byte	'Ifx_CPU_D',0,10,156,6,3
	.word	20033
	.byte	34
	.byte	'Ifx_CPU_DATR',0,10,164,6,3
	.word	12059
	.byte	34
	.byte	'Ifx_CPU_DBGSR',0,10,172,6,3
	.word	17216
	.byte	34
	.byte	'Ifx_CPU_DBGTCR',0,10,180,6,3
	.word	18246
	.byte	34
	.byte	'Ifx_CPU_DCON0',0,10,188,6,3
	.word	12601
	.byte	34
	.byte	'Ifx_CPU_DCON2',0,10,196,6,3
	.word	11239
	.byte	34
	.byte	'Ifx_CPU_DCX',0,10,204,6,3
	.word	18141
	.byte	34
	.byte	'Ifx_CPU_DEADD',0,10,212,6,3
	.word	12151
	.byte	34
	.byte	'Ifx_CPU_DIEAR',0,10,220,6,3
	.word	12232
	.byte	34
	.byte	'Ifx_CPU_DIETR',0,10,228,6,3
	.word	12473
	.byte	34
	.byte	'Ifx_CPU_DMS',0,10,236,6,3
	.word	18034
	.byte	34
	.byte	'Ifx_CPU_DPR_L',0,10,244,6,3
	.word	14672
	.byte	34
	.byte	'Ifx_CPU_DPR_U',0,10,252,6,3
	.word	14779
	.byte	34
	.byte	'Ifx_CPU_DPRE',0,10,132,7,3
	.word	15339
	.byte	34
	.byte	'Ifx_CPU_DPWE',0,10,140,7,3
	.word	15451
	.byte	34
	.byte	'Ifx_CPU_DSTR',0,10,148,7,3
	.word	11828
	.byte	34
	.byte	'Ifx_CPU_EXEVT',0,10,156,7,3
	.word	17382
	.byte	34
	.byte	'Ifx_CPU_FCX',0,10,164,7,3
	.word	19709
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,10,172,7,3
	.word	14029
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,10,180,7,3
	.word	14281
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,10,188,7,3
	.word	14116
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,10,196,7,3
	.word	14372
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,10,204,7,3
	.word	14463
	.byte	34
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,10,212,7,3
	.word	14554
	.byte	34
	.byte	'Ifx_CPU_ICNT',0,10,220,7,3
	.word	16663
	.byte	34
	.byte	'Ifx_CPU_ICR',0,10,228,7,3
	.word	19589
	.byte	34
	.byte	'Ifx_CPU_ISP',0,10,236,7,3
	.word	19432
	.byte	34
	.byte	'Ifx_CPU_LCX',0,10,244,7,3
	.word	19829
	.byte	34
	.byte	'Ifx_CPU_M1CNT',0,10,252,7,3
	.word	16768
	.byte	34
	.byte	'Ifx_CPU_M2CNT',0,10,132,8,3
	.word	16873
	.byte	34
	.byte	'Ifx_CPU_M3CNT',0,10,140,8,3
	.word	16978
	.byte	34
	.byte	'Ifx_CPU_PC',0,10,148,8,3
	.word	18757
	.byte	34
	.byte	'Ifx_CPU_PCON0',0,10,156,8,3
	.word	13192
	.byte	34
	.byte	'Ifx_CPU_PCON1',0,10,164,8,3
	.word	12951
	.byte	34
	.byte	'Ifx_CPU_PCON2',0,10,172,8,3
	.word	13064
	.byte	34
	.byte	'Ifx_CPU_PCXI',0,10,180,8,3
	.word	18400
	.byte	34
	.byte	'Ifx_CPU_PIEAR',0,10,188,8,3
	.word	13273
	.byte	34
	.byte	'Ifx_CPU_PIETR',0,10,196,8,3
	.word	13514
	.byte	34
	.byte	'Ifx_CPU_PMA0',0,10,204,8,3
	.word	10885
	.byte	34
	.byte	'Ifx_CPU_PMA1',0,10,212,8,3
	.word	11011
	.byte	34
	.byte	'Ifx_CPU_PMA2',0,10,220,8,3
	.word	11115
	.byte	34
	.byte	'Ifx_CPU_PSTR',0,10,228,8,3
	.word	12828
	.byte	34
	.byte	'Ifx_CPU_PSW',0,10,236,8,3
	.word	18657
	.byte	34
	.byte	'Ifx_CPU_SEGEN',0,10,244,8,3
	.word	10628
	.byte	34
	.byte	'Ifx_CPU_SMACON',0,10,252,8,3
	.word	11491
	.byte	12,10,255,8,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51542
	.byte	4,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_ACCENA',0,10,132,9,3
	.word	53703
	.byte	12,10,135,9,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51625
	.byte	4,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_ACCENB',0,10,140,9,3
	.word	53773
	.byte	12,10,143,9,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51716
	.byte	4,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA',0,10,148,9,3
	.word	53843
	.byte	12,10,151,9,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51807
	.byte	4,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB',0,10,156,9,3
	.word	53917
	.byte	12,10,159,9,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51906
	.byte	4,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_RGN_LA',0,10,164,9,3
	.word	53991
	.byte	12,10,167,9,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52013
	.byte	4,2,35,0,0,34
	.byte	'Ifx_CPU_SPROT_RGN_UA',0,10,172,9,3
	.word	54061
	.byte	34
	.byte	'Ifx_CPU_SWEVT',0,10,180,9,3
	.word	17714
	.byte	34
	.byte	'Ifx_CPU_SYSCON',0,10,188,9,3
	.word	18929
	.byte	34
	.byte	'Ifx_CPU_TASK_ASI',0,10,196,9,3
	.word	10748
	.byte	34
	.byte	'Ifx_CPU_TPS_CON',0,10,204,9,3
	.word	15653
	.byte	34
	.byte	'Ifx_CPU_TPS_TIMER',0,10,212,9,3
	.word	15741
	.byte	34
	.byte	'Ifx_CPU_TR_ADR',0,10,220,9,3
	.word	16227
	.byte	34
	.byte	'Ifx_CPU_TR_EVT',0,10,228,9,3
	.word	16143
	.byte	34
	.byte	'Ifx_CPU_TRIG_ACC',0,10,236,9,3
	.word	17927
	.byte	14
	.word	15099
	.byte	34
	.byte	'Ifx_CPU_CPR',0,10,251,9,3
	.word	54330
	.byte	14
	.word	14819
	.byte	34
	.byte	'Ifx_CPU_DPR',0,10,130,10,3
	.word	54356
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN',0,10,133,10,25,16,13
	.byte	'LA',0
	.word	53991
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	54061
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	53843
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	53917
	.byte	4,2,35,12,0,14
	.word	54382
	.byte	34
	.byte	'Ifx_CPU_SPROT_RGN',0,10,139,10,3
	.word	54464
	.byte	14
	.word	15790
	.byte	34
	.byte	'Ifx_CPU_TPS',0,10,146,10,3
	.word	54496
	.byte	14
	.word	16267
	.byte	34
	.byte	'Ifx_CPU_TR',0,10,153,10,3
	.word	54522
	.byte	14
	.word	20178
	.byte	34
	.byte	'Ifx_CPU',0,10,130,11,3
	.word	54547
	.byte	15,6,127,9,1,16
	.byte	'IfxCpu_Id_0',0,0,16
	.byte	'IfxCpu_Id_1',0,1,16
	.byte	'IfxCpu_Id_none',0,2,0,34
	.byte	'IfxCpu_Id',0,6,132,1,3
	.word	54569
	.byte	34
	.byte	'IfxCpu_ResourceCpu',0,6,161,1,3
	.word	1407
	.byte	10
	.byte	'_Ifx_SRC_SRCR_Bits',0,17,45,16,4,11
	.byte	'SRPN',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	595
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	595
	.byte	2,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	595
	.byte	3,0,2,35,1,11
	.byte	'ECC',0,1
	.word	595
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	595
	.byte	2,0,2,35,2,11
	.byte	'SRR',0,1
	.word	595
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	595
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	595
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	595
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	595
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	595
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_SRC_SRCR_Bits',0,17,62,3
	.word	54667
	.byte	12,17,70,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54667
	.byte	4,2,35,0,0,34
	.byte	'Ifx_SRC_SRCR',0,17,75,3
	.word	54983
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,17,86,25,4,13
	.byte	'SR',0
	.word	54983
	.byte	4,2,35,0,0,14
	.word	55043
	.byte	34
	.byte	'Ifx_SRC_AGBT',0,17,89,3
	.word	55075
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,17,92,25,12,13
	.byte	'TX',0
	.word	54983
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	54983
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	54983
	.byte	4,2,35,8,0,14
	.word	55101
	.byte	34
	.byte	'Ifx_SRC_ASCLIN',0,17,97,3
	.word	55160
	.byte	10
	.byte	'_Ifx_SRC_BCUSPB',0,17,100,25,4,13
	.byte	'SBSRC',0
	.word	54983
	.byte	4,2,35,0,0,14
	.word	55188
	.byte	34
	.byte	'Ifx_SRC_BCUSPB',0,17,103,3
	.word	55225
	.byte	18,64
	.word	54983
	.byte	19,15,0,10
	.byte	'_Ifx_SRC_CAN',0,17,106,25,64,13
	.byte	'INT',0
	.word	55253
	.byte	64,2,35,0,0,14
	.word	55262
	.byte	34
	.byte	'Ifx_SRC_CAN',0,17,109,3
	.word	55294
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,17,112,25,16,13
	.byte	'SR0',0
	.word	54983
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	54983
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	54983
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	54983
	.byte	4,2,35,12,0,14
	.word	55319
	.byte	34
	.byte	'Ifx_SRC_CCU6',0,17,118,3
	.word	55391
	.byte	18,8
	.word	54983
	.byte	19,1,0,10
	.byte	'_Ifx_SRC_CERBERUS',0,17,121,25,8,13
	.byte	'SR',0
	.word	55417
	.byte	8,2,35,0,0,14
	.word	55426
	.byte	34
	.byte	'Ifx_SRC_CERBERUS',0,17,124,3
	.word	55462
	.byte	10
	.byte	'_Ifx_SRC_CIF',0,17,127,25,16,13
	.byte	'MI',0
	.word	54983
	.byte	4,2,35,0,13
	.byte	'MIEP',0
	.word	54983
	.byte	4,2,35,4,13
	.byte	'ISP',0
	.word	54983
	.byte	4,2,35,8,13
	.byte	'MJPEG',0
	.word	54983
	.byte	4,2,35,12,0,14
	.word	55492
	.byte	34
	.byte	'Ifx_SRC_CIF',0,17,133,1,3
	.word	55565
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,17,136,1,25,4,13
	.byte	'SBSRC',0
	.word	54983
	.byte	4,2,35,0,0,14
	.word	55591
	.byte	34
	.byte	'Ifx_SRC_CPU',0,17,139,1,3
	.word	55626
	.byte	18,192,1
	.word	54983
	.byte	19,47,0,10
	.byte	'_Ifx_SRC_DMA',0,17,142,1,25,208,1,13
	.byte	'ERR',0
	.word	54983
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	5132
	.byte	12,2,35,4,13
	.byte	'CH',0
	.word	55652
	.byte	192,1,2,35,16,0,14
	.word	55662
	.byte	34
	.byte	'Ifx_SRC_DMA',0,17,147,1,3
	.word	55729
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,17,150,1,25,8,13
	.byte	'SRM',0
	.word	54983
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	54983
	.byte	4,2,35,4,0,14
	.word	55755
	.byte	34
	.byte	'Ifx_SRC_DSADC',0,17,154,1,3
	.word	55803
	.byte	10
	.byte	'_Ifx_SRC_EMEM',0,17,157,1,25,4,13
	.byte	'SR',0
	.word	54983
	.byte	4,2,35,0,0,14
	.word	55831
	.byte	34
	.byte	'Ifx_SRC_EMEM',0,17,160,1,3
	.word	55864
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,17,163,1,25,80,13
	.byte	'INT',0
	.word	55417
	.byte	8,2,35,0,13
	.byte	'TINT',0
	.word	55417
	.byte	8,2,35,8,13
	.byte	'NDAT',0
	.word	55417
	.byte	8,2,35,16,13
	.byte	'MBSC',0
	.word	55417
	.byte	8,2,35,24,13
	.byte	'OBUSY',0
	.word	54983
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	54983
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	47869
	.byte	40,2,35,40,0,14
	.word	55891
	.byte	34
	.byte	'Ifx_SRC_ERAY',0,17,172,1,3
	.word	56018
	.byte	10
	.byte	'_Ifx_SRC_ETH',0,17,175,1,25,4,13
	.byte	'SR',0
	.word	54983
	.byte	4,2,35,0,0,14
	.word	56045
	.byte	34
	.byte	'Ifx_SRC_ETH',0,17,178,1,3
	.word	56077
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,17,181,1,25,4,13
	.byte	'SR',0
	.word	54983
	.byte	4,2,35,0,0,14
	.word	56103
	.byte	34
	.byte	'Ifx_SRC_FCE',0,17,184,1,3
	.word	56135
	.byte	10
	.byte	'_Ifx_SRC_FFT',0,17,187,1,25,12,13
	.byte	'DONE',0
	.word	54983
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	54983
	.byte	4,2,35,4,13
	.byte	'RFS',0
	.word	54983
	.byte	4,2,35,8,0,14
	.word	56161
	.byte	34
	.byte	'Ifx_SRC_FFT',0,17,192,1,3
	.word	56221
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,17,195,1,25,32,13
	.byte	'SR0',0
	.word	54983
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	54983
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	54983
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	54983
	.byte	4,2,35,12,13
	.byte	'reserved_10',0
	.word	19869
	.byte	16,2,35,16,0,14
	.word	56247
	.byte	34
	.byte	'Ifx_SRC_GPSR',0,17,202,1,3
	.word	56341
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,17,205,1,25,48,13
	.byte	'CIRQ',0
	.word	54983
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	54983
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	54983
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	54983
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	54983
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	54983
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	4163
	.byte	24,2,35,24,0,14
	.word	56368
	.byte	34
	.byte	'Ifx_SRC_GPT12',0,17,214,1,3
	.word	56485
	.byte	18,12
	.word	54983
	.byte	19,2,0,18,32
	.word	54983
	.byte	19,7,0,18,32
	.word	56522
	.byte	19,0,0,18,88
	.word	595
	.byte	19,87,0,18,108
	.word	54983
	.byte	19,26,0,18,96
	.word	595
	.byte	19,95,0,18,96
	.word	56522
	.byte	19,2,0,18,160,3
	.word	595
	.byte	19,159,3,0,18,64
	.word	56522
	.byte	19,1,0,18,192,3
	.word	595
	.byte	19,191,3,0,18,16
	.word	54983
	.byte	19,3,0,18,64
	.word	56607
	.byte	19,3,0,18,192,2
	.word	595
	.byte	19,191,2,0,18,52
	.word	595
	.byte	19,51,0,10
	.byte	'_Ifx_SRC_GTM',0,17,217,1,25,204,18,13
	.byte	'AEIIRQ',0
	.word	54983
	.byte	4,2,35,0,13
	.byte	'ARUIRQ',0
	.word	56513
	.byte	12,2,35,4,13
	.byte	'reserved_10',0
	.word	2973
	.byte	4,2,35,16,13
	.byte	'BRCIRQ',0
	.word	54983
	.byte	4,2,35,20,13
	.byte	'CMPIRQ',0
	.word	54983
	.byte	4,2,35,24,13
	.byte	'SPEIRQ',0
	.word	55417
	.byte	8,2,35,28,13
	.byte	'reserved_24',0
	.word	4792
	.byte	8,2,35,36,13
	.byte	'PSM',0
	.word	56531
	.byte	32,2,35,44,13
	.byte	'reserved_4C',0
	.word	56540
	.byte	88,2,35,76,13
	.byte	'DPLL',0
	.word	56549
	.byte	108,3,35,164,1,13
	.byte	'reserved_110',0
	.word	56558
	.byte	96,3,35,144,2,13
	.byte	'ERR',0
	.word	54983
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	5132
	.byte	12,3,35,244,2,13
	.byte	'TIM',0
	.word	56567
	.byte	96,3,35,128,3,13
	.byte	'reserved_1E0',0
	.word	56576
	.byte	160,3,3,35,224,3,13
	.byte	'MCS',0
	.word	56567
	.byte	96,3,35,128,7,13
	.byte	'reserved_3E0',0
	.word	56576
	.byte	160,3,3,35,224,7,13
	.byte	'TOM',0
	.word	56587
	.byte	64,3,35,128,11,13
	.byte	'reserved_5C0',0
	.word	56596
	.byte	192,3,3,35,192,11,13
	.byte	'ATOM',0
	.word	56616
	.byte	64,3,35,128,15,13
	.byte	'reserved_7C0',0
	.word	56625
	.byte	192,2,3,35,192,15,13
	.byte	'MCSW0',0
	.word	56513
	.byte	12,3,35,128,18,13
	.byte	'reserved_90C',0
	.word	56636
	.byte	52,3,35,140,18,13
	.byte	'MCSW1',0
	.word	56513
	.byte	12,3,35,192,18,0,14
	.word	56645
	.byte	34
	.byte	'Ifx_SRC_GTM',0,17,243,1,3
	.word	57105
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,17,246,1,25,4,13
	.byte	'SR',0
	.word	54983
	.byte	4,2,35,0,0,14
	.word	57131
	.byte	34
	.byte	'Ifx_SRC_HSCT',0,17,249,1,3
	.word	57164
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,17,252,1,25,16,13
	.byte	'COK',0
	.word	54983
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	54983
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	54983
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	54983
	.byte	4,2,35,12,0,14
	.word	57191
	.byte	34
	.byte	'Ifx_SRC_HSSL',0,17,130,2,3
	.word	57264
	.byte	18,56
	.word	595
	.byte	19,55,0,10
	.byte	'_Ifx_SRC_I2C',0,17,133,2,25,80,13
	.byte	'BREQ',0
	.word	54983
	.byte	4,2,35,0,13
	.byte	'LBREQ',0
	.word	54983
	.byte	4,2,35,4,13
	.byte	'SREQ',0
	.word	54983
	.byte	4,2,35,8,13
	.byte	'LSREQ',0
	.word	54983
	.byte	4,2,35,12,13
	.byte	'ERR',0
	.word	54983
	.byte	4,2,35,16,13
	.byte	'P',0
	.word	54983
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	57291
	.byte	56,2,35,24,0,14
	.word	57300
	.byte	34
	.byte	'Ifx_SRC_I2C',0,17,142,2,3
	.word	57423
	.byte	10
	.byte	'_Ifx_SRC_LMU',0,17,145,2,25,4,13
	.byte	'SR',0
	.word	54983
	.byte	4,2,35,0,0,14
	.word	57449
	.byte	34
	.byte	'Ifx_SRC_LMU',0,17,148,2,3
	.word	57481
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,17,151,2,25,20,13
	.byte	'SR0',0
	.word	54983
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	54983
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	54983
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	54983
	.byte	4,2,35,12,13
	.byte	'SR4',0
	.word	54983
	.byte	4,2,35,16,0,14
	.word	57507
	.byte	34
	.byte	'Ifx_SRC_MSC',0,17,158,2,3
	.word	57592
	.byte	10
	.byte	'_Ifx_SRC_PMU',0,17,161,2,25,4,13
	.byte	'SR',0
	.word	54983
	.byte	4,2,35,0,0,14
	.word	57618
	.byte	34
	.byte	'Ifx_SRC_PMU',0,17,164,2,3
	.word	57650
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,17,167,2,25,32,13
	.byte	'SR',0
	.word	56522
	.byte	32,2,35,0,0,14
	.word	57676
	.byte	34
	.byte	'Ifx_SRC_PSI5',0,17,170,2,3
	.word	57709
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,17,173,2,25,32,13
	.byte	'SR',0
	.word	56522
	.byte	32,2,35,0,0,14
	.word	57736
	.byte	34
	.byte	'Ifx_SRC_PSI5S',0,17,176,2,3
	.word	57770
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,17,179,2,25,24,13
	.byte	'TX',0
	.word	54983
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	54983
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	54983
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	54983
	.byte	4,2,35,12,13
	.byte	'HC',0
	.word	54983
	.byte	4,2,35,16,13
	.byte	'U',0
	.word	54983
	.byte	4,2,35,20,0,14
	.word	57798
	.byte	34
	.byte	'Ifx_SRC_QSPI',0,17,187,2,3
	.word	57891
	.byte	10
	.byte	'_Ifx_SRC_SCR',0,17,190,2,25,4,13
	.byte	'SR',0
	.word	54983
	.byte	4,2,35,0,0,14
	.word	57918
	.byte	34
	.byte	'Ifx_SRC_SCR',0,17,193,2,3
	.word	57950
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,17,196,2,25,20,13
	.byte	'DTS',0
	.word	54983
	.byte	4,2,35,0,13
	.byte	'ERU',0
	.word	56607
	.byte	16,2,35,4,0,14
	.word	57976
	.byte	34
	.byte	'Ifx_SRC_SCU',0,17,200,2,3
	.word	58022
	.byte	18,24
	.word	54983
	.byte	19,5,0,10
	.byte	'_Ifx_SRC_SENT',0,17,203,2,25,24,13
	.byte	'SR',0
	.word	58048
	.byte	24,2,35,0,0,14
	.word	58057
	.byte	34
	.byte	'Ifx_SRC_SENT',0,17,206,2,3
	.word	58090
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,17,209,2,25,12,13
	.byte	'SR',0
	.word	56513
	.byte	12,2,35,0,0,14
	.word	58117
	.byte	34
	.byte	'Ifx_SRC_SMU',0,17,212,2,3
	.word	58149
	.byte	10
	.byte	'_Ifx_SRC_STM',0,17,215,2,25,8,13
	.byte	'SR0',0
	.word	54983
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	54983
	.byte	4,2,35,4,0,14
	.word	58175
	.byte	34
	.byte	'Ifx_SRC_STM',0,17,219,2,3
	.word	58221
	.byte	10
	.byte	'_Ifx_SRC_VADCCG',0,17,222,2,25,16,13
	.byte	'SR0',0
	.word	54983
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	54983
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	54983
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	54983
	.byte	4,2,35,12,0,14
	.word	58247
	.byte	34
	.byte	'Ifx_SRC_VADCCG',0,17,228,2,3
	.word	58322
	.byte	10
	.byte	'_Ifx_SRC_VADCG',0,17,231,2,25,16,13
	.byte	'SR0',0
	.word	54983
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	54983
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	54983
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	54983
	.byte	4,2,35,12,0,14
	.word	58351
	.byte	34
	.byte	'Ifx_SRC_VADCG',0,17,237,2,3
	.word	58425
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,17,240,2,25,4,13
	.byte	'SRC',0
	.word	54983
	.byte	4,2,35,0,0,14
	.word	58453
	.byte	34
	.byte	'Ifx_SRC_XBAR',0,17,243,2,3
	.word	58487
	.byte	18,4
	.word	55043
	.byte	19,0,0,14
	.word	58514
	.byte	10
	.byte	'_Ifx_SRC_GAGBT',0,17,128,3,25,4,13
	.byte	'AGBT',0
	.word	58523
	.byte	4,2,35,0,0,14
	.word	58528
	.byte	34
	.byte	'Ifx_SRC_GAGBT',0,17,131,3,3
	.word	58564
	.byte	18,48
	.word	55101
	.byte	19,3,0,14
	.word	58592
	.byte	10
	.byte	'_Ifx_SRC_GASCLIN',0,17,134,3,25,48,13
	.byte	'ASCLIN',0
	.word	58601
	.byte	48,2,35,0,0,14
	.word	58606
	.byte	34
	.byte	'Ifx_SRC_GASCLIN',0,17,137,3,3
	.word	58646
	.byte	14
	.word	55188
	.byte	10
	.byte	'_Ifx_SRC_GBCU',0,17,140,3,25,4,13
	.byte	'SPB',0
	.word	58676
	.byte	4,2,35,0,0,14
	.word	58681
	.byte	34
	.byte	'Ifx_SRC_GBCU',0,17,143,3,3
	.word	58715
	.byte	18,64
	.word	55262
	.byte	19,0,0,14
	.word	58742
	.byte	10
	.byte	'_Ifx_SRC_GCAN',0,17,146,3,25,64,13
	.byte	'CAN',0
	.word	58751
	.byte	64,2,35,0,0,14
	.word	58756
	.byte	34
	.byte	'Ifx_SRC_GCAN',0,17,149,3,3
	.word	58790
	.byte	18,32
	.word	55319
	.byte	19,1,0,14
	.word	58817
	.byte	10
	.byte	'_Ifx_SRC_GCCU6',0,17,152,3,25,32,13
	.byte	'CCU6',0
	.word	58826
	.byte	32,2,35,0,0,14
	.word	58831
	.byte	34
	.byte	'Ifx_SRC_GCCU6',0,17,155,3,3
	.word	58867
	.byte	14
	.word	55426
	.byte	10
	.byte	'_Ifx_SRC_GCERBERUS',0,17,158,3,25,8,13
	.byte	'CERBERUS',0
	.word	58895
	.byte	8,2,35,0,0,14
	.word	58900
	.byte	34
	.byte	'Ifx_SRC_GCERBERUS',0,17,161,3,3
	.word	58944
	.byte	18,16
	.word	55492
	.byte	19,0,0,14
	.word	58976
	.byte	10
	.byte	'_Ifx_SRC_GCIF',0,17,164,3,25,16,13
	.byte	'CIF',0
	.word	58985
	.byte	16,2,35,0,0,14
	.word	58990
	.byte	34
	.byte	'Ifx_SRC_GCIF',0,17,167,3,3
	.word	59024
	.byte	18,8
	.word	55591
	.byte	19,1,0,14
	.word	59051
	.byte	10
	.byte	'_Ifx_SRC_GCPU',0,17,170,3,25,8,13
	.byte	'CPU',0
	.word	59060
	.byte	8,2,35,0,0,14
	.word	59065
	.byte	34
	.byte	'Ifx_SRC_GCPU',0,17,173,3,3
	.word	59099
	.byte	18,208,1
	.word	55662
	.byte	19,0,0,14
	.word	59126
	.byte	10
	.byte	'_Ifx_SRC_GDMA',0,17,176,3,25,208,1,13
	.byte	'DMA',0
	.word	59136
	.byte	208,1,2,35,0,0,14
	.word	59141
	.byte	34
	.byte	'Ifx_SRC_GDMA',0,17,179,3,3
	.word	59177
	.byte	14
	.word	55755
	.byte	14
	.word	55755
	.byte	14
	.word	55755
	.byte	10
	.byte	'_Ifx_SRC_GDSADC',0,17,182,3,25,32,13
	.byte	'DSADC0',0
	.word	59204
	.byte	8,2,35,0,13
	.byte	'reserved_8',0
	.word	4792
	.byte	8,2,35,8,13
	.byte	'DSADC2',0
	.word	59209
	.byte	8,2,35,16,13
	.byte	'DSADC3',0
	.word	59214
	.byte	8,2,35,24,0,14
	.word	59219
	.byte	34
	.byte	'Ifx_SRC_GDSADC',0,17,188,3,3
	.word	59310
	.byte	18,4
	.word	55831
	.byte	19,0,0,14
	.word	59339
	.byte	10
	.byte	'_Ifx_SRC_GEMEM',0,17,191,3,25,4,13
	.byte	'EMEM',0
	.word	59348
	.byte	4,2,35,0,0,14
	.word	59353
	.byte	34
	.byte	'Ifx_SRC_GEMEM',0,17,194,3,3
	.word	59389
	.byte	18,80
	.word	55891
	.byte	19,0,0,14
	.word	59417
	.byte	10
	.byte	'_Ifx_SRC_GERAY',0,17,197,3,25,80,13
	.byte	'ERAY',0
	.word	59426
	.byte	80,2,35,0,0,14
	.word	59431
	.byte	34
	.byte	'Ifx_SRC_GERAY',0,17,200,3,3
	.word	59467
	.byte	18,4
	.word	56045
	.byte	19,0,0,14
	.word	59495
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,17,203,3,25,4,13
	.byte	'ETH',0
	.word	59504
	.byte	4,2,35,0,0,14
	.word	59509
	.byte	34
	.byte	'Ifx_SRC_GETH',0,17,206,3,3
	.word	59543
	.byte	18,4
	.word	56103
	.byte	19,0,0,14
	.word	59570
	.byte	10
	.byte	'_Ifx_SRC_GFCE',0,17,209,3,25,4,13
	.byte	'FCE',0
	.word	59579
	.byte	4,2,35,0,0,14
	.word	59584
	.byte	34
	.byte	'Ifx_SRC_GFCE',0,17,212,3,3
	.word	59618
	.byte	18,12
	.word	56161
	.byte	19,0,0,14
	.word	59645
	.byte	10
	.byte	'_Ifx_SRC_GFFT',0,17,215,3,25,12,13
	.byte	'FFT',0
	.word	59654
	.byte	12,2,35,0,0,14
	.word	59659
	.byte	34
	.byte	'Ifx_SRC_GFFT',0,17,218,3,3
	.word	59693
	.byte	18,64
	.word	56247
	.byte	19,1,0,14
	.word	59720
	.byte	10
	.byte	'_Ifx_SRC_GGPSR',0,17,221,3,25,64,13
	.byte	'GPSR',0
	.word	59729
	.byte	64,2,35,0,0,14
	.word	59734
	.byte	34
	.byte	'Ifx_SRC_GGPSR',0,17,224,3,3
	.word	59770
	.byte	18,48
	.word	56368
	.byte	19,0,0,14
	.word	59798
	.byte	10
	.byte	'_Ifx_SRC_GGPT12',0,17,227,3,25,48,13
	.byte	'GPT12',0
	.word	59807
	.byte	48,2,35,0,0,14
	.word	59812
	.byte	34
	.byte	'Ifx_SRC_GGPT12',0,17,230,3,3
	.word	59850
	.byte	18,204,18
	.word	56645
	.byte	19,0,0,14
	.word	59879
	.byte	10
	.byte	'_Ifx_SRC_GGTM',0,17,233,3,25,204,18,13
	.byte	'GTM',0
	.word	59889
	.byte	204,18,2,35,0,0,14
	.word	59894
	.byte	34
	.byte	'Ifx_SRC_GGTM',0,17,236,3,3
	.word	59930
	.byte	18,4
	.word	57131
	.byte	19,0,0,14
	.word	59957
	.byte	10
	.byte	'_Ifx_SRC_GHSCT',0,17,239,3,25,4,13
	.byte	'HSCT',0
	.word	59966
	.byte	4,2,35,0,0,14
	.word	59971
	.byte	34
	.byte	'Ifx_SRC_GHSCT',0,17,242,3,3
	.word	60007
	.byte	18,64
	.word	57191
	.byte	19,3,0,14
	.word	60035
	.byte	10
	.byte	'_Ifx_SRC_GHSSL',0,17,245,3,25,68,13
	.byte	'HSSL',0
	.word	60044
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	54983
	.byte	4,2,35,64,0,14
	.word	60049
	.byte	34
	.byte	'Ifx_SRC_GHSSL',0,17,249,3,3
	.word	60098
	.byte	18,80
	.word	57300
	.byte	19,0,0,14
	.word	60126
	.byte	10
	.byte	'_Ifx_SRC_GI2C',0,17,252,3,25,80,13
	.byte	'I2C',0
	.word	60135
	.byte	80,2,35,0,0,14
	.word	60140
	.byte	34
	.byte	'Ifx_SRC_GI2C',0,17,255,3,3
	.word	60174
	.byte	18,4
	.word	57449
	.byte	19,0,0,14
	.word	60201
	.byte	10
	.byte	'_Ifx_SRC_GLMU',0,17,130,4,25,4,13
	.byte	'LMU',0
	.word	60210
	.byte	4,2,35,0,0,14
	.word	60215
	.byte	34
	.byte	'Ifx_SRC_GLMU',0,17,133,4,3
	.word	60249
	.byte	18,40
	.word	57507
	.byte	19,1,0,14
	.word	60276
	.byte	10
	.byte	'_Ifx_SRC_GMSC',0,17,136,4,25,40,13
	.byte	'MSC',0
	.word	60285
	.byte	40,2,35,0,0,14
	.word	60290
	.byte	34
	.byte	'Ifx_SRC_GMSC',0,17,139,4,3
	.word	60324
	.byte	18,8
	.word	57618
	.byte	19,1,0,14
	.word	60351
	.byte	10
	.byte	'_Ifx_SRC_GPMU',0,17,142,4,25,8,13
	.byte	'PMU',0
	.word	60360
	.byte	8,2,35,0,0,14
	.word	60365
	.byte	34
	.byte	'Ifx_SRC_GPMU',0,17,145,4,3
	.word	60399
	.byte	18,32
	.word	57676
	.byte	19,0,0,14
	.word	60426
	.byte	10
	.byte	'_Ifx_SRC_GPSI5',0,17,148,4,25,32,13
	.byte	'PSI5',0
	.word	60435
	.byte	32,2,35,0,0,14
	.word	60440
	.byte	34
	.byte	'Ifx_SRC_GPSI5',0,17,151,4,3
	.word	60476
	.byte	18,32
	.word	57736
	.byte	19,0,0,14
	.word	60504
	.byte	10
	.byte	'_Ifx_SRC_GPSI5S',0,17,154,4,25,32,13
	.byte	'PSI5S',0
	.word	60513
	.byte	32,2,35,0,0,14
	.word	60518
	.byte	34
	.byte	'Ifx_SRC_GPSI5S',0,17,157,4,3
	.word	60556
	.byte	18,96
	.word	57798
	.byte	19,3,0,14
	.word	60585
	.byte	10
	.byte	'_Ifx_SRC_GQSPI',0,17,160,4,25,96,13
	.byte	'QSPI',0
	.word	60594
	.byte	96,2,35,0,0,14
	.word	60599
	.byte	34
	.byte	'Ifx_SRC_GQSPI',0,17,163,4,3
	.word	60635
	.byte	18,4
	.word	57918
	.byte	19,0,0,14
	.word	60663
	.byte	10
	.byte	'_Ifx_SRC_GSCR',0,17,166,4,25,4,13
	.byte	'SCR',0
	.word	60672
	.byte	4,2,35,0,0,14
	.word	60677
	.byte	34
	.byte	'Ifx_SRC_GSCR',0,17,169,4,3
	.word	60711
	.byte	14
	.word	57976
	.byte	10
	.byte	'_Ifx_SRC_GSCU',0,17,172,4,25,20,13
	.byte	'SCU',0
	.word	60738
	.byte	20,2,35,0,0,14
	.word	60743
	.byte	34
	.byte	'Ifx_SRC_GSCU',0,17,175,4,3
	.word	60777
	.byte	18,24
	.word	58057
	.byte	19,0,0,14
	.word	60804
	.byte	10
	.byte	'_Ifx_SRC_GSENT',0,17,178,4,25,24,13
	.byte	'SENT',0
	.word	60813
	.byte	24,2,35,0,0,14
	.word	60818
	.byte	34
	.byte	'Ifx_SRC_GSENT',0,17,181,4,3
	.word	60854
	.byte	18,12
	.word	58117
	.byte	19,0,0,14
	.word	60882
	.byte	10
	.byte	'_Ifx_SRC_GSMU',0,17,184,4,25,12,13
	.byte	'SMU',0
	.word	60891
	.byte	12,2,35,0,0,14
	.word	60896
	.byte	34
	.byte	'Ifx_SRC_GSMU',0,17,187,4,3
	.word	60930
	.byte	18,16
	.word	58175
	.byte	19,1,0,14
	.word	60957
	.byte	10
	.byte	'_Ifx_SRC_GSTM',0,17,190,4,25,16,13
	.byte	'STM',0
	.word	60966
	.byte	16,2,35,0,0,14
	.word	60971
	.byte	34
	.byte	'Ifx_SRC_GSTM',0,17,193,4,3
	.word	61005
	.byte	18,64
	.word	58351
	.byte	19,3,0,14
	.word	61032
	.byte	18,224,1
	.word	595
	.byte	19,223,1,0,18,32
	.word	58247
	.byte	19,1,0,14
	.word	61057
	.byte	10
	.byte	'_Ifx_SRC_GVADC',0,17,196,4,25,192,2,13
	.byte	'G',0
	.word	61041
	.byte	64,2,35,0,13
	.byte	'reserved_40',0
	.word	61046
	.byte	224,1,2,35,64,13
	.byte	'CG',0
	.word	61066
	.byte	32,3,35,160,2,0,14
	.word	61071
	.byte	34
	.byte	'Ifx_SRC_GVADC',0,17,201,4,3
	.word	61140
	.byte	14
	.word	58453
	.byte	10
	.byte	'_Ifx_SRC_GXBAR',0,17,204,4,25,4,13
	.byte	'XBAR',0
	.word	61168
	.byte	4,2,35,0,0,14
	.word	61173
	.byte	34
	.byte	'Ifx_SRC_GXBAR',0,17,207,4,3
	.word	61209
	.byte	10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,18,45,16,4,11
	.byte	'EN0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	595
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	595
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	595
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	595
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	595
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	595
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	595
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	595
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	595
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	595
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	595
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	595
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	595
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	595
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	595
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_STM_ACCEN0_Bits',0,18,79,3
	.word	61237
	.byte	10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,18,82,16,4,11
	.byte	'reserved_0',0,4
	.word	420
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_ACCEN1_Bits',0,18,85,3
	.word	61794
	.byte	10
	.byte	'_Ifx_STM_CAP_Bits',0,18,88,16,4,11
	.byte	'STMCAP63_32',0,4
	.word	420
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_CAP_Bits',0,18,91,3
	.word	61871
	.byte	10
	.byte	'_Ifx_STM_CAPSV_Bits',0,18,94,16,4,11
	.byte	'STMCAP63_32',0,4
	.word	420
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_CAPSV_Bits',0,18,97,3
	.word	61943
	.byte	10
	.byte	'_Ifx_STM_CLC_Bits',0,18,100,16,4,11
	.byte	'DISR',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	420
	.byte	28,0,2,35,0,0,34
	.byte	'Ifx_STM_CLC_Bits',0,18,107,3
	.word	62019
	.byte	10
	.byte	'_Ifx_STM_CMCON_Bits',0,18,110,16,4,11
	.byte	'MSIZE0',0,1
	.word	595
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	595
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	595
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	595
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	595
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	595
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	595
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	595
	.byte	3,0,2,35,3,0,34
	.byte	'Ifx_STM_CMCON_Bits',0,18,120,3
	.word	62160
	.byte	10
	.byte	'_Ifx_STM_CMP_Bits',0,18,123,16,4,11
	.byte	'CMPVAL',0,4
	.word	420
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_CMP_Bits',0,18,126,3
	.word	62378
	.byte	10
	.byte	'_Ifx_STM_ICR_Bits',0,18,129,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	420
	.byte	25,0,2,35,0,0,34
	.byte	'Ifx_STM_ICR_Bits',0,18,139,1,3
	.word	62445
	.byte	10
	.byte	'_Ifx_STM_ID_Bits',0,18,142,1,16,4,11
	.byte	'MODREV',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	612
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_STM_ID_Bits',0,18,147,1,3
	.word	62648
	.byte	10
	.byte	'_Ifx_STM_ISCR_Bits',0,18,150,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	420
	.byte	28,0,2,35,0,0,34
	.byte	'Ifx_STM_ISCR_Bits',0,18,157,1,3
	.word	62755
	.byte	10
	.byte	'_Ifx_STM_KRST0_Bits',0,18,160,1,16,4,11
	.byte	'RST',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	420
	.byte	30,0,2,35,0,0,34
	.byte	'Ifx_STM_KRST0_Bits',0,18,165,1,3
	.word	62906
	.byte	10
	.byte	'_Ifx_STM_KRST1_Bits',0,18,168,1,16,4,11
	.byte	'RST',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	420
	.byte	31,0,2,35,0,0,34
	.byte	'Ifx_STM_KRST1_Bits',0,18,172,1,3
	.word	63017
	.byte	10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,18,175,1,16,4,11
	.byte	'CLR',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	420
	.byte	31,0,2,35,0,0,34
	.byte	'Ifx_STM_KRSTCLR_Bits',0,18,179,1,3
	.word	63109
	.byte	10
	.byte	'_Ifx_STM_OCS_Bits',0,18,182,1,16,4,11
	.byte	'reserved_0',0,4
	.word	420
	.byte	24,8,2,35,0,11
	.byte	'SUS',0,1
	.word	595
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	595
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	595
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	595
	.byte	2,0,2,35,3,0,34
	.byte	'Ifx_STM_OCS_Bits',0,18,189,1,3
	.word	63205
	.byte	10
	.byte	'_Ifx_STM_TIM0_Bits',0,18,192,1,16,4,11
	.byte	'STM31_0',0,4
	.word	420
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_TIM0_Bits',0,18,195,1,3
	.word	63351
	.byte	10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,18,198,1,16,4,11
	.byte	'STM31_0',0,4
	.word	420
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_TIM0SV_Bits',0,18,201,1,3
	.word	63423
	.byte	10
	.byte	'_Ifx_STM_TIM1_Bits',0,18,204,1,16,4,11
	.byte	'STM35_4',0,4
	.word	420
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_TIM1_Bits',0,18,207,1,3
	.word	63499
	.byte	10
	.byte	'_Ifx_STM_TIM2_Bits',0,18,210,1,16,4,11
	.byte	'STM39_8',0,4
	.word	420
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_TIM2_Bits',0,18,213,1,3
	.word	63571
	.byte	10
	.byte	'_Ifx_STM_TIM3_Bits',0,18,216,1,16,4,11
	.byte	'STM43_12',0,4
	.word	420
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_TIM3_Bits',0,18,219,1,3
	.word	63643
	.byte	10
	.byte	'_Ifx_STM_TIM4_Bits',0,18,222,1,16,4,11
	.byte	'STM47_16',0,4
	.word	420
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_TIM4_Bits',0,18,225,1,3
	.word	63716
	.byte	10
	.byte	'_Ifx_STM_TIM5_Bits',0,18,228,1,16,4,11
	.byte	'STM51_20',0,4
	.word	420
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_TIM5_Bits',0,18,231,1,3
	.word	63789
	.byte	10
	.byte	'_Ifx_STM_TIM6_Bits',0,18,234,1,16,4,11
	.byte	'STM63_32',0,4
	.word	420
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_STM_TIM6_Bits',0,18,237,1,3
	.word	63862
	.byte	12,18,245,1,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61237
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_ACCEN0',0,18,250,1,3
	.word	63935
	.byte	12,18,253,1,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61794
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_ACCEN1',0,18,130,2,3
	.word	63999
	.byte	12,18,133,2,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61871
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_CAP',0,18,138,2,3
	.word	64063
	.byte	12,18,141,2,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61943
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_CAPSV',0,18,146,2,3
	.word	64124
	.byte	12,18,149,2,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62019
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_CLC',0,18,154,2,3
	.word	64187
	.byte	12,18,157,2,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62160
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_CMCON',0,18,162,2,3
	.word	64248
	.byte	12,18,165,2,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62378
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_CMP',0,18,170,2,3
	.word	64311
	.byte	12,18,173,2,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62445
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_ICR',0,18,178,2,3
	.word	64372
	.byte	12,18,181,2,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62648
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_ID',0,18,186,2,3
	.word	64433
	.byte	12,18,189,2,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62755
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_ISCR',0,18,194,2,3
	.word	64493
	.byte	12,18,197,2,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62906
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_KRST0',0,18,202,2,3
	.word	64555
	.byte	12,18,205,2,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63017
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_KRST1',0,18,210,2,3
	.word	64618
	.byte	12,18,213,2,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63109
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_KRSTCLR',0,18,218,2,3
	.word	64681
	.byte	12,18,221,2,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63205
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_OCS',0,18,226,2,3
	.word	64746
	.byte	12,18,229,2,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63351
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_TIM0',0,18,234,2,3
	.word	64807
	.byte	12,18,237,2,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63423
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_TIM0SV',0,18,242,2,3
	.word	64869
	.byte	12,18,245,2,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63499
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_TIM1',0,18,250,2,3
	.word	64933
	.byte	12,18,253,2,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63571
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_TIM2',0,18,130,3,3
	.word	64995
	.byte	12,18,133,3,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63643
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_TIM3',0,18,138,3,3
	.word	65057
	.byte	12,18,141,3,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63716
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_TIM4',0,18,146,3,3
	.word	65119
	.byte	12,18,149,3,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63789
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_TIM5',0,18,154,3,3
	.word	65181
	.byte	12,18,157,3,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63862
	.byte	4,2,35,0,0,34
	.byte	'Ifx_STM_TIM6',0,18,162,3,3
	.word	65243
	.byte	15,5,144,1,9,1,16
	.byte	'IfxCpu_CounterMode_normal',0,0,16
	.byte	'IfxCpu_CounterMode_task',0,1,0,34
	.byte	'IfxCpu_CounterMode',0,5,148,1,3
	.word	65305
	.byte	35,5,160,1,9,6,13
	.byte	'counter',0
	.word	1520
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	595
	.byte	1,2,35,4,0,34
	.byte	'IfxCpu_Counter',0,5,164,1,3
	.word	65394
	.byte	35,5,172,1,9,32,13
	.byte	'instruction',0
	.word	65394
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	65394
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	65394
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	65394
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	65394
	.byte	6,2,35,24,0,34
	.byte	'IfxCpu_Perf',0,5,179,1,3
	.word	65460
	.byte	10
	.byte	'_Ifx_FLASH_ACCEN0_Bits',0,19,45,16,4,11
	.byte	'EN0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	595
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	595
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	595
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	595
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	595
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	595
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	595
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	595
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	595
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	595
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	595
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	595
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	595
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	595
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	595
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_ACCEN0_Bits',0,19,79,3
	.word	65578
	.byte	10
	.byte	'_Ifx_FLASH_ACCEN1_Bits',0,19,82,16,4,11
	.byte	'reserved_0',0,4
	.word	420
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_FLASH_ACCEN1_Bits',0,19,85,3
	.word	66139
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_CFG_Bits',0,19,88,16,4,11
	.byte	'SEL',0,1
	.word	595
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	595
	.byte	2,0,2,35,0,11
	.byte	'CLR',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'DIS',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	420
	.byte	22,0,2,35,0,0,34
	.byte	'Ifx_FLASH_CBAB_CFG_Bits',0,19,95,3
	.word	66220
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_STAT_Bits',0,19,98,16,4,11
	.byte	'VLD0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'VLD1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'VLD2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'VLD3',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'VLD4',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'VLD5',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'VLD6',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'VLD7',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'VLD8',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'VLD9',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	420
	.byte	22,0,2,35,0,0,34
	.byte	'Ifx_FLASH_CBAB_STAT_Bits',0,19,111,3
	.word	66373
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_TOP_Bits',0,19,114,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	420
	.byte	19,8,2,35,0,11
	.byte	'ERR',0,1
	.word	595
	.byte	6,2,2,35,3,11
	.byte	'VLD',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'CLR',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_CBAB_TOP_Bits',0,19,121,3
	.word	66621
	.byte	10
	.byte	'_Ifx_FLASH_COMM0_Bits',0,19,124,16,4,11
	.byte	'STATUS',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	420
	.byte	24,0,2,35,0,0,34
	.byte	'Ifx_FLASH_COMM0_Bits',0,19,128,1,3
	.word	66767
	.byte	10
	.byte	'_Ifx_FLASH_COMM1_Bits',0,19,131,1,16,4,11
	.byte	'STATUS',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'DATA',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_FLASH_COMM1_Bits',0,19,136,1,3
	.word	66865
	.byte	10
	.byte	'_Ifx_FLASH_COMM2_Bits',0,19,139,1,16,4,11
	.byte	'STATUS',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'DATA',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_FLASH_COMM2_Bits',0,19,144,1,3
	.word	66981
	.byte	10
	.byte	'_Ifx_FLASH_ECCRD_Bits',0,19,147,1,16,4,11
	.byte	'RCODE',0,4
	.word	420
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	612
	.byte	8,2,2,35,2,11
	.byte	'EDCERRINJ',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'ECCORDIS',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_ECCRD_Bits',0,19,153,1,3
	.word	67097
	.byte	10
	.byte	'_Ifx_FLASH_ECCRP_Bits',0,19,156,1,16,4,11
	.byte	'RCODE',0,4
	.word	420
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	612
	.byte	8,2,2,35,2,11
	.byte	'EDCERRINJ',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'ECCORDIS',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_ECCRP_Bits',0,19,162,1,3
	.word	67237
	.byte	10
	.byte	'_Ifx_FLASH_ECCW_Bits',0,19,165,1,16,4,11
	.byte	'WCODE',0,4
	.word	420
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	612
	.byte	8,2,2,35,2,11
	.byte	'DECENCDIS',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'PECENCDIS',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_ECCW_Bits',0,19,171,1,3
	.word	67377
	.byte	10
	.byte	'_Ifx_FLASH_FCON_Bits',0,19,174,1,16,4,11
	.byte	'WSPFLASH',0,1
	.word	595
	.byte	4,4,2,35,0,11
	.byte	'WSECPF',0,1
	.word	595
	.byte	2,2,2,35,0,11
	.byte	'WSDFLASH',0,2
	.word	612
	.byte	6,4,2,35,0,11
	.byte	'WSECDF',0,1
	.word	595
	.byte	3,1,2,35,1,11
	.byte	'IDLE',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'ESLDIS',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'SLEEP',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'NSAFECC',0,1
	.word	595
	.byte	1,5,2,35,2,11
	.byte	'STALL',0,1
	.word	595
	.byte	1,4,2,35,2,11
	.byte	'RES21',0,1
	.word	595
	.byte	2,2,2,35,2,11
	.byte	'RES23',0,1
	.word	595
	.byte	2,0,2,35,2,11
	.byte	'VOPERM',0,1
	.word	595
	.byte	1,7,2,35,3,11
	.byte	'SQERM',0,1
	.word	595
	.byte	1,6,2,35,3,11
	.byte	'PROERM',0,1
	.word	595
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	595
	.byte	3,2,2,35,3,11
	.byte	'PR5V',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'EOBM',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_FCON_Bits',0,19,193,1,3
	.word	67516
	.byte	10
	.byte	'_Ifx_FLASH_FPRO_Bits',0,19,196,1,16,4,11
	.byte	'PROINP',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'PRODISP',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'PROIND',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'PRODISD',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'PROINHSMCOTP',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'RES5',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'PROINOTP',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'RES7',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'PROINDBG',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'PRODISDBG',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'PROINHSM',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	595
	.byte	5,0,2,35,1,11
	.byte	'DCFP',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'DDFP',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'DDFPX',0,1
	.word	595
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	595
	.byte	1,4,2,35,2,11
	.byte	'DDFD',0,1
	.word	595
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	595
	.byte	1,2,2,35,2,11
	.byte	'ENPE',0,1
	.word	595
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	595
	.byte	8,0,2,35,3,0,34
	.byte	'Ifx_FLASH_FPRO_Bits',0,19,218,1,3
	.word	67878
	.byte	10
	.byte	'_Ifx_FLASH_FSR_Bits',0,19,221,1,16,4,11
	.byte	'FABUSY',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'D0BUSY',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'RES1',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'P0BUSY',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'P1BUSY',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'RES5',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'RES6',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'PROG',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'ERASE',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'PFPAGE',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'DFPAGE',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'OPER',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'SQER',0,1
	.word	595
	.byte	1,3,2,35,1,11
	.byte	'PROER',0,1
	.word	595
	.byte	1,2,2,35,1,11
	.byte	'PFSBER',0,1
	.word	595
	.byte	1,1,2,35,1,11
	.byte	'PFDBER',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'PFMBER',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'RES17',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'DFSBER',0,1
	.word	595
	.byte	1,5,2,35,2,11
	.byte	'DFDBER',0,1
	.word	595
	.byte	1,4,2,35,2,11
	.byte	'DFTBER',0,1
	.word	595
	.byte	1,3,2,35,2,11
	.byte	'DFMBER',0,1
	.word	595
	.byte	1,2,2,35,2,11
	.byte	'SRIADDERR',0,1
	.word	595
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	612
	.byte	2,7,2,35,2,11
	.byte	'PVER',0,1
	.word	595
	.byte	1,6,2,35,3,11
	.byte	'EVER',0,1
	.word	595
	.byte	1,5,2,35,3,11
	.byte	'SPND',0,1
	.word	595
	.byte	1,4,2,35,3,11
	.byte	'SLM',0,1
	.word	595
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	595
	.byte	1,2,2,35,3,11
	.byte	'ORIER',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_FSR_Bits',0,19,254,1,3
	.word	68319
	.byte	10
	.byte	'_Ifx_FLASH_ID_Bits',0,19,129,2,16,4,11
	.byte	'MODREV',0,1
	.word	595
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	595
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	612
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_FLASH_ID_Bits',0,19,134,2,3
	.word	68925
	.byte	10
	.byte	'_Ifx_FLASH_MARD_Bits',0,19,137,2,16,4,11
	.byte	'HMARGIN',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'SELD0',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'SPND',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'SPNDERR',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,2
	.word	612
	.byte	10,1,2,35,0,11
	.byte	'TRAPDIS',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_FLASH_MARD_Bits',0,19,147,2,3
	.word	69036
	.byte	10
	.byte	'_Ifx_FLASH_MARP_Bits',0,19,150,2,16,4,11
	.byte	'SELP0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'SELP1',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'RES2',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'RES3',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	612
	.byte	11,1,2,35,0,11
	.byte	'TRAPDIS',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_FLASH_MARP_Bits',0,19,159,2,3
	.word	69250
	.byte	10
	.byte	'_Ifx_FLASH_PROCOND_Bits',0,19,162,2,16,4,11
	.byte	'L',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'NSAFECC',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'RAMIN',0,1
	.word	595
	.byte	2,4,2,35,0,11
	.byte	'RAMINSEL',0,1
	.word	595
	.byte	4,0,2,35,0,11
	.byte	'OSCCFG',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'MODE',0,1
	.word	595
	.byte	2,5,2,35,1,11
	.byte	'APREN',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'CAP0EN',0,1
	.word	595
	.byte	1,3,2,35,1,11
	.byte	'CAP1EN',0,1
	.word	595
	.byte	1,2,2,35,1,11
	.byte	'CAP2EN',0,1
	.word	595
	.byte	1,1,2,35,1,11
	.byte	'CAP3EN',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'ESR0CNT',0,2
	.word	612
	.byte	12,4,2,35,2,11
	.byte	'RES29',0,1
	.word	595
	.byte	2,2,2,35,3,11
	.byte	'RES30',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'RPRO',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_PROCOND_Bits',0,19,179,2,3
	.word	69437
	.byte	10
	.byte	'_Ifx_FLASH_PROCONDBG_Bits',0,19,182,2,16,4,11
	.byte	'OCDSDIS',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'DBGIFLCK',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'EDM',0,1
	.word	595
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	420
	.byte	28,0,2,35,0,0,34
	.byte	'Ifx_FLASH_PROCONDBG_Bits',0,19,188,2,3
	.word	69761
	.byte	10
	.byte	'_Ifx_FLASH_PROCONHSM_Bits',0,19,191,2,16,4,11
	.byte	'HSMDBGDIS',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'DBGIFLCK',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'TSTIFLCK',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'HSMTSTDIS',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'RES15',0,2
	.word	612
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	612
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_FLASH_PROCONHSM_Bits',0,19,199,2,3
	.word	69904
	.byte	10
	.byte	'_Ifx_FLASH_PROCONHSMCOTP_Bits',0,19,202,2,16,4,11
	.byte	'HSMBOOTEN',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'SSWWAIT',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'HSMDX',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'HSM6X',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'HSM16X',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'HSM17X',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'S6ROM',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'HSMENPINS',0,2
	.word	612
	.byte	2,7,2,35,0,11
	.byte	'HSMENRES',0,1
	.word	595
	.byte	2,5,2,35,1,11
	.byte	'DESTDBG',0,1
	.word	595
	.byte	2,3,2,35,1,11
	.byte	'BLKFLAN',0,1
	.word	595
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	595
	.byte	2,0,2,35,1,11
	.byte	'S16ROM',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'S17ROM',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	612
	.byte	14,0,2,35,2,0,34
	.byte	'Ifx_FLASH_PROCONHSMCOTP_Bits',0,19,219,2,3
	.word	70093
	.byte	10
	.byte	'_Ifx_FLASH_PROCONOTP_Bits',0,19,222,2,16,4,11
	.byte	'S0ROM',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'S1ROM',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'S2ROM',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'S3ROM',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'S4ROM',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'S5ROM',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'S6ROM',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'S7ROM',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'S8ROM',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'S9ROM',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'S10ROM',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'S11ROM',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'S12ROM',0,1
	.word	595
	.byte	1,3,2,35,1,11
	.byte	'S13ROM',0,1
	.word	595
	.byte	1,2,2,35,1,11
	.byte	'S14ROM',0,1
	.word	595
	.byte	1,1,2,35,1,11
	.byte	'S15ROM',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'S16ROM',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'S17ROM',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'S18ROM',0,1
	.word	595
	.byte	1,5,2,35,2,11
	.byte	'S19ROM',0,1
	.word	595
	.byte	1,4,2,35,2,11
	.byte	'S20ROM',0,1
	.word	595
	.byte	1,3,2,35,2,11
	.byte	'S21ROM',0,1
	.word	595
	.byte	1,2,2,35,2,11
	.byte	'S22ROM',0,1
	.word	595
	.byte	1,1,2,35,2,11
	.byte	'S23ROM',0,1
	.word	595
	.byte	1,0,2,35,2,11
	.byte	'S24ROM',0,1
	.word	595
	.byte	1,7,2,35,3,11
	.byte	'S25ROM',0,1
	.word	595
	.byte	1,6,2,35,3,11
	.byte	'S26ROM',0,1
	.word	595
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	595
	.byte	2,3,2,35,3,11
	.byte	'BML',0,1
	.word	595
	.byte	2,1,2,35,3,11
	.byte	'TP',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_PROCONOTP_Bits',0,19,254,2,3
	.word	70456
	.byte	10
	.byte	'_Ifx_FLASH_PROCONP_Bits',0,19,129,3,16,4,11
	.byte	'S0L',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'S1L',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'S2L',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'S3L',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'S4L',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'S5L',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'S6L',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'S7L',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'S8L',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'S9L',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'S10L',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'S11L',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'S12L',0,1
	.word	595
	.byte	1,3,2,35,1,11
	.byte	'S13L',0,1
	.word	595
	.byte	1,2,2,35,1,11
	.byte	'S14L',0,1
	.word	595
	.byte	1,1,2,35,1,11
	.byte	'S15L',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'S16L',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'S17L',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'S18L',0,1
	.word	595
	.byte	1,5,2,35,2,11
	.byte	'S19L',0,1
	.word	595
	.byte	1,4,2,35,2,11
	.byte	'S20L',0,1
	.word	595
	.byte	1,3,2,35,2,11
	.byte	'S21L',0,1
	.word	595
	.byte	1,2,2,35,2,11
	.byte	'S22L',0,1
	.word	595
	.byte	1,1,2,35,2,11
	.byte	'S23L',0,1
	.word	595
	.byte	1,0,2,35,2,11
	.byte	'S24L',0,1
	.word	595
	.byte	1,7,2,35,3,11
	.byte	'S25L',0,1
	.word	595
	.byte	1,6,2,35,3,11
	.byte	'S26L',0,1
	.word	595
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	595
	.byte	4,1,2,35,3,11
	.byte	'RPRO',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_PROCONP_Bits',0,19,160,3,3
	.word	71051
	.byte	10
	.byte	'_Ifx_FLASH_PROCONWOP_Bits',0,19,163,3,16,4,11
	.byte	'S0WOP',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'S1WOP',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'S2WOP',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'S3WOP',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'S4WOP',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'S5WOP',0,1
	.word	595
	.byte	1,2,2,35,0,11
	.byte	'S6WOP',0,1
	.word	595
	.byte	1,1,2,35,0,11
	.byte	'S7WOP',0,1
	.word	595
	.byte	1,0,2,35,0,11
	.byte	'S8WOP',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'S9WOP',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'S10WOP',0,1
	.word	595
	.byte	1,5,2,35,1,11
	.byte	'S11WOP',0,1
	.word	595
	.byte	1,4,2,35,1,11
	.byte	'S12WOP',0,1
	.word	595
	.byte	1,3,2,35,1,11
	.byte	'S13WOP',0,1
	.word	595
	.byte	1,2,2,35,1,11
	.byte	'S14WOP',0,1
	.word	595
	.byte	1,1,2,35,1,11
	.byte	'S15WOP',0,1
	.word	595
	.byte	1,0,2,35,1,11
	.byte	'S16WOP',0,1
	.word	595
	.byte	1,7,2,35,2,11
	.byte	'S17WOP',0,1
	.word	595
	.byte	1,6,2,35,2,11
	.byte	'S18WOP',0,1
	.word	595
	.byte	1,5,2,35,2,11
	.byte	'S19WOP',0,1
	.word	595
	.byte	1,4,2,35,2,11
	.byte	'S20WOP',0,1
	.word	595
	.byte	1,3,2,35,2,11
	.byte	'S21WOP',0,1
	.word	595
	.byte	1,2,2,35,2,11
	.byte	'S22WOP',0,1
	.word	595
	.byte	1,1,2,35,2,11
	.byte	'S23WOP',0,1
	.word	595
	.byte	1,0,2,35,2,11
	.byte	'S24WOP',0,1
	.word	595
	.byte	1,7,2,35,3,11
	.byte	'S25WOP',0,1
	.word	595
	.byte	1,6,2,35,3,11
	.byte	'S26WOP',0,1
	.word	595
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	595
	.byte	4,1,2,35,3,11
	.byte	'DATM',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_PROCONWOP_Bits',0,19,194,3,3
	.word	71575
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG0_Bits',0,19,197,3,16,4,11
	.byte	'TAG',0,1
	.word	595
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	420
	.byte	26,0,2,35,0,0,34
	.byte	'Ifx_FLASH_RDB_CFG0_Bits',0,19,201,3,3
	.word	72157
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG1_Bits',0,19,204,3,16,4,11
	.byte	'TAG',0,1
	.word	595
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	420
	.byte	26,0,2,35,0,0,34
	.byte	'Ifx_FLASH_RDB_CFG1_Bits',0,19,208,3,3
	.word	72259
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG2_Bits',0,19,211,3,16,4,11
	.byte	'TAG',0,1
	.word	595
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	420
	.byte	26,0,2,35,0,0,34
	.byte	'Ifx_FLASH_RDB_CFG2_Bits',0,19,215,3,3
	.word	72361
	.byte	10
	.byte	'_Ifx_FLASH_RRAD_Bits',0,19,218,3,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	3,5,2,35,0,11
	.byte	'ADD',0,4
	.word	420
	.byte	29,0,2,35,0,0,34
	.byte	'Ifx_FLASH_RRAD_Bits',0,19,222,3,3
	.word	72463
	.byte	10
	.byte	'_Ifx_FLASH_RRCT_Bits',0,19,225,3,16,4,11
	.byte	'STRT',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'STP',0,1
	.word	595
	.byte	1,6,2,35,0,11
	.byte	'BUSY',0,1
	.word	595
	.byte	1,5,2,35,0,11
	.byte	'DONE',0,1
	.word	595
	.byte	1,4,2,35,0,11
	.byte	'ERR',0,1
	.word	595
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	595
	.byte	3,0,2,35,0,11
	.byte	'EOBM',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	595
	.byte	7,0,2,35,1,11
	.byte	'CNT',0,2
	.word	612
	.byte	16,0,2,35,2,0,34
	.byte	'Ifx_FLASH_RRCT_Bits',0,19,236,3,3
	.word	72557
	.byte	10
	.byte	'_Ifx_FLASH_RRD0_Bits',0,19,239,3,16,4,11
	.byte	'DATA',0,4
	.word	420
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_FLASH_RRD0_Bits',0,19,242,3,3
	.word	72767
	.byte	10
	.byte	'_Ifx_FLASH_RRD1_Bits',0,19,245,3,16,4,11
	.byte	'DATA',0,4
	.word	420
	.byte	32,0,2,35,0,0,34
	.byte	'Ifx_FLASH_RRD1_Bits',0,19,248,3,3
	.word	72840
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_CFG_Bits',0,19,251,3,16,4,11
	.byte	'SEL',0,1
	.word	595
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	595
	.byte	2,0,2,35,0,11
	.byte	'CLR',0,1
	.word	595
	.byte	1,7,2,35,1,11
	.byte	'DIS',0,1
	.word	595
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	420
	.byte	22,0,2,35,0,0,34
	.byte	'Ifx_FLASH_UBAB_CFG_Bits',0,19,130,4,3
	.word	72913
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_STAT_Bits',0,19,133,4,16,4,11
	.byte	'VLD0',0,1
	.word	595
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	420
	.byte	31,0,2,35,0,0,34
	.byte	'Ifx_FLASH_UBAB_STAT_Bits',0,19,137,4,3
	.word	73068
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_TOP_Bits',0,19,140,4,16,4,11
	.byte	'reserved_0',0,1
	.word	595
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	420
	.byte	19,8,2,35,0,11
	.byte	'ERR',0,1
	.word	595
	.byte	6,2,2,35,3,11
	.byte	'VLD',0,1
	.word	595
	.byte	1,1,2,35,3,11
	.byte	'CLR',0,1
	.word	595
	.byte	1,0,2,35,3,0,34
	.byte	'Ifx_FLASH_UBAB_TOP_Bits',0,19,147,4,3
	.word	73173
	.byte	12,19,155,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65578
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_ACCEN0',0,19,160,4,3
	.word	73321
	.byte	12,19,163,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66139
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_ACCEN1',0,19,168,4,3
	.word	73387
	.byte	12,19,171,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66220
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_CBAB_CFG',0,19,176,4,3
	.word	73453
	.byte	12,19,179,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66373
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_CBAB_STAT',0,19,184,4,3
	.word	73521
	.byte	12,19,187,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66621
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_CBAB_TOP',0,19,192,4,3
	.word	73590
	.byte	12,19,195,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66767
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_COMM0',0,19,200,4,3
	.word	73658
	.byte	12,19,203,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66865
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_COMM1',0,19,208,4,3
	.word	73723
	.byte	12,19,211,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66981
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_COMM2',0,19,216,4,3
	.word	73788
	.byte	12,19,219,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67097
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_ECCRD',0,19,224,4,3
	.word	73853
	.byte	12,19,227,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67237
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_ECCRP',0,19,232,4,3
	.word	73918
	.byte	12,19,235,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67377
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_ECCW',0,19,240,4,3
	.word	73983
	.byte	12,19,243,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67516
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_FCON',0,19,248,4,3
	.word	74047
	.byte	12,19,251,4,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67878
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_FPRO',0,19,128,5,3
	.word	74111
	.byte	12,19,131,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68319
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_FSR',0,19,136,5,3
	.word	74175
	.byte	12,19,139,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68925
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_ID',0,19,144,5,3
	.word	74238
	.byte	12,19,147,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69036
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_MARD',0,19,152,5,3
	.word	74300
	.byte	12,19,155,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69250
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_MARP',0,19,160,5,3
	.word	74364
	.byte	12,19,163,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69437
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_PROCOND',0,19,168,5,3
	.word	74428
	.byte	12,19,171,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69761
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_PROCONDBG',0,19,176,5,3
	.word	74495
	.byte	12,19,179,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69904
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_PROCONHSM',0,19,184,5,3
	.word	74564
	.byte	12,19,187,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70093
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_PROCONHSMCOTP',0,19,192,5,3
	.word	74633
	.byte	12,19,195,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70456
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_PROCONOTP',0,19,200,5,3
	.word	74706
	.byte	12,19,203,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71051
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_PROCONP',0,19,208,5,3
	.word	74775
	.byte	12,19,211,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71575
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_PROCONWOP',0,19,216,5,3
	.word	74842
	.byte	12,19,219,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72157
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_RDB_CFG0',0,19,224,5,3
	.word	74911
	.byte	12,19,227,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72259
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_RDB_CFG1',0,19,232,5,3
	.word	74979
	.byte	12,19,235,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72361
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_RDB_CFG2',0,19,240,5,3
	.word	75047
	.byte	12,19,243,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72463
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_RRAD',0,19,248,5,3
	.word	75115
	.byte	12,19,251,5,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72557
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_RRCT',0,19,128,6,3
	.word	75179
	.byte	12,19,131,6,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72767
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_RRD0',0,19,136,6,3
	.word	75243
	.byte	12,19,139,6,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72840
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_RRD1',0,19,144,6,3
	.word	75307
	.byte	12,19,147,6,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72913
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_UBAB_CFG',0,19,152,6,3
	.word	75371
	.byte	12,19,155,6,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73068
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_UBAB_STAT',0,19,160,6,3
	.word	75439
	.byte	12,19,163,6,9,4,13
	.byte	'U',0
	.word	420
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	436
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73173
	.byte	4,2,35,0,0,34
	.byte	'Ifx_FLASH_UBAB_TOP',0,19,168,6,3
	.word	75508
	.byte	10
	.byte	'_Ifx_FLASH_CBAB',0,19,179,6,25,12,13
	.byte	'CFG',0
	.word	73453
	.byte	4,2,35,0,13
	.byte	'STAT',0
	.word	73521
	.byte	4,2,35,4,13
	.byte	'TOP',0
	.word	73590
	.byte	4,2,35,8,0,14
	.word	75576
	.byte	34
	.byte	'Ifx_FLASH_CBAB',0,19,184,6,3
	.word	75639
	.byte	10
	.byte	'_Ifx_FLASH_RDB',0,19,187,6,25,12,13
	.byte	'CFG0',0
	.word	74911
	.byte	4,2,35,0,13
	.byte	'CFG1',0
	.word	74979
	.byte	4,2,35,4,13
	.byte	'CFG2',0
	.word	75047
	.byte	4,2,35,8,0,14
	.word	75668
	.byte	34
	.byte	'Ifx_FLASH_RDB',0,19,192,6,3
	.word	75732
	.byte	10
	.byte	'_Ifx_FLASH_UBAB',0,19,195,6,25,12,13
	.byte	'CFG',0
	.word	75371
	.byte	4,2,35,0,13
	.byte	'STAT',0
	.word	75439
	.byte	4,2,35,4,13
	.byte	'TOP',0
	.word	75508
	.byte	4,2,35,8,0,14
	.word	75760
	.byte	34
	.byte	'Ifx_FLASH_UBAB',0,19,200,6,3
	.word	75823
	.byte	34
	.byte	'Ifx_P_ACCEN0_Bits',0,8,79,3
	.word	8545
	.byte	34
	.byte	'Ifx_P_ACCEN1_Bits',0,8,85,3
	.word	8458
	.byte	34
	.byte	'Ifx_P_ESR_Bits',0,8,107,3
	.word	4801
	.byte	34
	.byte	'Ifx_P_ID_Bits',0,8,115,3
	.word	2854
	.byte	34
	.byte	'Ifx_P_IN_Bits',0,8,137,1,3
	.word	3849
	.byte	34
	.byte	'Ifx_P_IOCR0_Bits',0,8,150,1,3
	.word	2982
	.byte	34
	.byte	'Ifx_P_IOCR12_Bits',0,8,163,1,3
	.word	3629
	.byte	34
	.byte	'Ifx_P_IOCR4_Bits',0,8,176,1,3
	.word	3197
	.byte	34
	.byte	'Ifx_P_IOCR8_Bits',0,8,189,1,3
	.word	3412
	.byte	34
	.byte	'Ifx_P_LPCR0_Bits',0,8,197,1,3
	.word	7817
	.byte	34
	.byte	'Ifx_P_LPCR1_Bits',0,8,205,1,3
	.word	7941
	.byte	34
	.byte	'Ifx_P_LPCR1_P21_Bits',0,8,215,1,3
	.word	8025
	.byte	34
	.byte	'Ifx_P_LPCR2_Bits',0,8,229,1,3
	.word	8205
	.byte	34
	.byte	'Ifx_P_OMCR0_Bits',0,8,240,1,3
	.word	6456
	.byte	34
	.byte	'Ifx_P_OMCR12_Bits',0,8,250,1,3
	.word	6980
	.byte	34
	.byte	'Ifx_P_OMCR4_Bits',0,8,133,2,3
	.word	6630
	.byte	34
	.byte	'Ifx_P_OMCR8_Bits',0,8,144,2,3
	.word	6804
	.byte	34
	.byte	'Ifx_P_OMCR_Bits',0,8,166,2,3
	.word	7469
	.byte	34
	.byte	'Ifx_P_OMR_Bits',0,8,203,2,3
	.word	2283
	.byte	34
	.byte	'Ifx_P_OMSR0_Bits',0,8,213,2,3
	.word	5793
	.byte	34
	.byte	'Ifx_P_OMSR12_Bits',0,8,224,2,3
	.word	6281
	.byte	34
	.byte	'Ifx_P_OMSR4_Bits',0,8,235,2,3
	.word	5940
	.byte	34
	.byte	'Ifx_P_OMSR8_Bits',0,8,246,2,3
	.word	6109
	.byte	34
	.byte	'Ifx_P_OMSR_Bits',0,8,140,3,3
	.word	7136
	.byte	34
	.byte	'Ifx_P_OUT_Bits',0,8,162,3,3
	.word	1967
	.byte	34
	.byte	'Ifx_P_PCSR_Bits',0,8,180,3,3
	.word	5507
	.byte	34
	.byte	'Ifx_P_PDISC_Bits',0,8,202,3,3
	.word	5141
	.byte	34
	.byte	'Ifx_P_PDR0_Bits',0,8,223,3,3
	.word	4172
	.byte	34
	.byte	'Ifx_P_PDR1_Bits',0,8,244,3,3
	.word	4476
	.byte	34
	.byte	'Ifx_P_ACCEN0',0,8,129,4,3
	.word	9072
	.byte	34
	.byte	'Ifx_P_ACCEN1',0,8,137,4,3
	.word	8505
	.byte	34
	.byte	'Ifx_P_ESR',0,8,145,4,3
	.word	5092
	.byte	34
	.byte	'Ifx_P_ID',0,8,153,4,3
	.word	2933
	.byte	34
	.byte	'Ifx_P_IN',0,8,161,4,3
	.word	4123
	.byte	34
	.byte	'Ifx_P_IOCR0',0,8,169,4,3
	.word	3157
	.byte	34
	.byte	'Ifx_P_IOCR12',0,8,177,4,3
	.word	3809
	.byte	34
	.byte	'Ifx_P_IOCR4',0,8,185,4,3
	.word	3372
	.byte	34
	.byte	'Ifx_P_IOCR8',0,8,193,4,3
	.word	3589
	.byte	34
	.byte	'Ifx_P_LPCR0',0,8,201,4,3
	.word	7901
	.byte	34
	.byte	'Ifx_P_LPCR1',0,8,210,4,3
	.word	8150
	.byte	34
	.byte	'Ifx_P_LPCR2',0,8,218,4,3
	.word	8409
	.byte	34
	.byte	'Ifx_P_OMCR',0,8,226,4,3
	.word	7777
	.byte	34
	.byte	'Ifx_P_OMCR0',0,8,234,4,3
	.word	6590
	.byte	34
	.byte	'Ifx_P_OMCR12',0,8,242,4,3
	.word	7096
	.byte	34
	.byte	'Ifx_P_OMCR4',0,8,250,4,3
	.word	6764
	.byte	34
	.byte	'Ifx_P_OMCR8',0,8,130,5,3
	.word	6940
	.byte	34
	.byte	'Ifx_P_OMR',0,8,138,5,3
	.word	2814
	.byte	34
	.byte	'Ifx_P_OMSR',0,8,146,5,3
	.word	7429
	.byte	34
	.byte	'Ifx_P_OMSR0',0,8,154,5,3
	.word	5900
	.byte	34
	.byte	'Ifx_P_OMSR12',0,8,162,5,3
	.word	6416
	.byte	34
	.byte	'Ifx_P_OMSR4',0,8,170,5,3
	.word	6069
	.byte	34
	.byte	'Ifx_P_OMSR8',0,8,178,5,3
	.word	6241
	.byte	34
	.byte	'Ifx_P_OUT',0,8,186,5,3
	.word	2243
	.byte	34
	.byte	'Ifx_P_PCSR',0,8,194,5,3
	.word	5753
	.byte	34
	.byte	'Ifx_P_PDISC',0,8,202,5,3
	.word	5467
	.byte	34
	.byte	'Ifx_P_PDR0',0,8,210,5,3
	.word	4436
	.byte	34
	.byte	'Ifx_P_PDR1',0,8,218,5,3
	.word	4752
	.byte	14
	.word	9112
	.byte	34
	.byte	'Ifx_P',0,8,139,6,3
	.word	77170
	.byte	15,7,83,9,1,16
	.byte	'IfxPort_InputMode_undefined',0,127,16
	.byte	'IfxPort_InputMode_noPullDevice',0,0,16
	.byte	'IfxPort_InputMode_pullDown',0,8,16
	.byte	'IfxPort_InputMode_pullUp',0,16,0,34
	.byte	'IfxPort_InputMode',0,7,89,3
	.word	77190
	.byte	15,7,120,9,1,16
	.byte	'IfxPort_OutputIdx_general',0,128,1,16
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,16
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,16
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,16
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,16
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,16
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,16
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,34
	.byte	'IfxPort_OutputIdx',0,7,130,1,3
	.word	77341
	.byte	15,7,134,1,9,1,16
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,16
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,34
	.byte	'IfxPort_OutputMode',0,7,138,1,3
	.word	77585
	.byte	15,7,144,1,9,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,16
	.byte	'IfxPort_PadDriver_lvdsSpeed1',0,4,16
	.byte	'IfxPort_PadDriver_lvdsSpeed2',0,5,16
	.byte	'IfxPort_PadDriver_lvdsSpeed3',0,6,16
	.byte	'IfxPort_PadDriver_lvdsSpeed4',0,7,16
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,16
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,16
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,16
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,0,34
	.byte	'IfxPort_PadDriver',0,7,158,1,3
	.word	77683
	.byte	34
	.byte	'IfxPort_State',0,7,178,1,3
	.word	9725
	.byte	35,7,190,1,9,8,13
	.byte	'port',0
	.word	9720
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	595
	.byte	1,2,35,4,0,34
	.byte	'IfxPort_Pin',0,7,194,1,3
	.word	78148
	.byte	34
	.byte	'IfxScuCcu_CcuconRegConfig',0,11,216,5,3
	.word	22571
	.byte	34
	.byte	'IfxScuCcu_InitialStepConfig',0,11,227,5,3
	.word	22406
	.byte	34
	.byte	'IfxScuCcu_PllStepsConfig',0,11,236,5,3
	.word	22338
	.byte	34
	.byte	'IfxScuCcu_ClockDistributionConfig',0,11,252,5,3
	.word	22607
	.byte	34
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,11,132,6,3
	.word	22716
	.byte	34
	.byte	'IfxScuCcu_SysPllConfig',0,11,142,6,3
	.word	22486
	.byte	34
	.byte	'IfxScuCcu_Config',0,11,156,6,3
	.word	22752
	.byte	20
	.word	22752
	.byte	38
	.byte	'IfxScuCcu_defaultClockConfig',0,11,178,8,39
	.word	78455
	.byte	1,1,39
	.word	420
	.byte	40,0,38
	.byte	'__ISTACK0',0,13,87,1
	.word	78500
	.byte	1,1,38
	.byte	'__INTTAB_CPU0',0,13,87,1
	.word	78500
	.byte	1,1,38
	.byte	'__TRAPTAB_CPU0',0,13,87,1
	.word	78500
	.byte	1,1,38
	.byte	'__CSA0',0,13,87,1
	.word	78500
	.byte	1,1,38
	.byte	'__CSA0_END',0,13,87,1
	.word	78500
	.byte	1,1,18,32
	.word	1520
	.byte	19,7,0
.L145:
	.byte	20
	.word	78614
.L146:
	.byte	20
	.word	78614
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L41:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,4,1,58,15,59,15,57,15,11,15,0,0,16,40,0,3,8,28,13,0,0
	.byte	17,11,1,0,0,18,1,1,11,15,73,19,0,0,19,33,0,47,15,0,0,20,38,0,73,19,0,0,21,46,1,3,8,54,15,39,12,63,12,60
	.byte	12,0,0,22,5,0,73,19,0,0,23,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,24,5,0,3,8,73,19,0,0,25,46,0,3,8
	.byte	54,15,39,12,63,12,60,12,0,0,26,46,0,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,27,46,1,49,19,0
	.byte	0,28,5,0,49,19,0,0,29,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,30,46,0,3,8,58,15,59,15,57
	.byte	15,73,19,54,15,39,12,63,12,60,12,0,0,31,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,32
	.byte	29,1,49,19,0,0,33,11,0,49,19,0,0,34,22,0,3,8,58,15,59,15,57,15,73,19,0,0,35,19,1,58,15,59,15,57,15,11
	.byte	15,0,0,36,46,0,3,8,58,15,59,15,57,15,54,15,63,12,60,12,0,0,37,21,0,54,15,0,0,38,52,0,3,8,58,15,59,15,57
	.byte	15,73,19,63,12,60,12,0,0,39,1,1,73,19,0,0,40,33,0,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L42:
	.word	.L181-.L180
.L180:
	.half	3
	.word	.L183-.L182
.L182:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std',0
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra\\Sfr\\TC26B\\_Reg',0
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Impl',0
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Std',0
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\Infra\\Platform\\Tricore\\Compilers',0
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxScuWdt.h',0,2,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,4,0,0
	.byte	'IfxPort.h',0,5,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'Compilers.h',0,6,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'IfxScuCcu.h',0,2,0,0
	.byte	'IfxCpu_CStart.h',0,7,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0,0,0,0
	.byte	'IfxScu_cfg.h',0,4,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxFlash_regdef.h',0,3,0,0,0
.L183:
.L181:
	.sdecl	'.debug_info',debug,cluster('_Core0_start')
	.sect	'.debug_info'
.L43:
	.word	1258
	.half	3
	.word	.L44
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L46,.L45
	.byte	2
	.word	.L39
	.byte	3
	.byte	'_Core0_start',0,1,107,6,1,1,1
	.word	.L36,.L57,.L35
	.byte	4
	.word	.L36,.L57
	.byte	5
	.byte	'pcxi',0,1,109,12
	.word	.L58,.L59
	.byte	5
	.byte	'cpuWdtPassword',0,1,110,12
	.word	.L60,.L61
	.byte	6
	.word	.L62,.L63,.L2
	.byte	7
	.word	.L64,.L65
	.byte	8
	.word	.L66,.L63,.L2
	.byte	5
	.byte	'password',0,2,229,3,12
	.word	.L60,.L67
	.byte	0,0,6
	.word	.L68,.L69,.L70
	.byte	7
	.word	.L71,.L72
	.byte	8
	.word	.L73,.L69,.L70
	.byte	8
	.word	.L74,.L75,.L3
	.byte	5
	.byte	'pcon1',0,3,208,7,23
	.word	.L76,.L77
	.byte	0,8
	.word	.L78,.L3,.L70
	.byte	5
	.byte	'coreIndex',0,3,214,7,12
	.word	.L58,.L79
	.byte	5
	.byte	'wdtPassword',0,3,215,7,12
	.word	.L60,.L80
	.byte	6
	.word	.L81,.L3,.L4
	.byte	8
	.word	.L82,.L3,.L4
	.byte	5
	.byte	'reg',0,3,143,6,21
	.word	.L83,.L84
	.byte	0,0,6
	.word	.L62,.L85,.L5
	.byte	7
	.word	.L64,.L65
	.byte	8
	.word	.L66,.L85,.L5
	.byte	5
	.byte	'password',0,2,229,3,12
	.word	.L60,.L86
	.byte	0,0,6
	.word	.L87,.L88,.L89
	.byte	7
	.word	.L90,.L91
	.byte	7
	.word	.L92,.L93
	.byte	9
	.word	.L94,.L88,.L89
	.byte	0,8
	.word	.L95,.L89,.L96
	.byte	5
	.byte	'pcon0',0,3,219,7,23
	.word	.L97,.L98
	.byte	6
	.word	.L99,.L100,.L96
	.byte	7
	.word	.L101,.L102
	.byte	7
	.word	.L103,.L104
	.byte	9
	.word	.L105,.L100,.L96
	.byte	0,0,0,0,0,6
	.word	.L106,.L107,.L108
	.byte	7
	.word	.L109,.L110
	.byte	8
	.word	.L111,.L107,.L108
	.byte	5
	.byte	'coreIndex',0,3,179,7,12
	.word	.L58,.L112
	.byte	5
	.byte	'wdtPassword',0,3,180,7,12
	.word	.L60,.L113
	.byte	6
	.word	.L81,.L107,.L14
	.byte	8
	.word	.L82,.L107,.L14
	.byte	5
	.byte	'reg',0,3,143,6,21
	.word	.L83,.L114
	.byte	0,0,6
	.word	.L62,.L115,.L15
	.byte	7
	.word	.L64,.L65
	.byte	8
	.word	.L66,.L115,.L15
	.byte	5
	.byte	'password',0,2,229,3,12
	.word	.L60,.L116
	.byte	0,0,6
	.word	.L87,.L117,.L118
	.byte	7
	.word	.L90,.L91
	.byte	7
	.word	.L92,.L93
	.byte	9
	.word	.L94,.L117,.L118
	.byte	0,8
	.word	.L119,.L118,.L120
	.byte	5
	.byte	'dcon0',0,3,184,7,23
	.word	.L121,.L122
	.byte	6
	.word	.L99,.L123,.L120
	.byte	7
	.word	.L101,.L102
	.byte	7
	.word	.L103,.L104
	.byte	9
	.word	.L105,.L123,.L120
	.byte	0,0,0,0,6
	.word	.L87,.L124,.L125
	.byte	7
	.word	.L90,.L91
	.byte	7
	.word	.L92,.L93
	.byte	9
	.word	.L94,.L124,.L125
	.byte	0,6
	.word	.L99,.L126,.L127
	.byte	7
	.word	.L101,.L102
	.byte	7
	.word	.L103,.L104
	.byte	9
	.word	.L105,.L126,.L127
	.byte	0,6
	.word	.L128,.L129,.L130
	.byte	7
	.word	.L131,.L132
	.byte	7
	.word	.L133,.L134
	.byte	8
	.word	.L135,.L129,.L130
	.byte	5
	.byte	'k',0,3,221,6,13
	.word	.L58,.L136
	.byte	5
	.byte	'nxt_cxi_val',0,3,222,6,13
	.word	.L58,.L137
	.byte	5
	.byte	'prvCsa',0,3,223,6,13
	.word	.L138,.L139
	.byte	5
	.byte	'nxtCsa',0,3,224,6,13
	.word	.L138,.L140
	.byte	5
	.byte	'numOfCsa',0,3,225,6,13
	.word	.L58,.L141
	.byte	0,0,4
	.word	.L130,.L142
	.byte	5
	.byte	'safetyWdtPassword',0,1,159,1,16
	.word	.L60,.L143
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('_Core0_start')
	.sect	'.debug_abbrev'
.L44:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1
	.byte	49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('_Core0_start')
	.sect	'.debug_line'
.L45:
	.word	.L185-.L184
.L184:
	.half	3
	.word	.L187-.L186
.L186:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std',0
	.byte	'D:\\smartcar\\smartcar\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0,0,0,0
	.byte	'IfxScuWdt.h',0,1,0,0
	.byte	'IfxCpu.h',0,2,0,0,0
.L187:
	.byte	5,86,7,0,5,2
	.word	.L36
	.byte	3,237,0,1,4,2,5,33,9
	.half	.L63-.L36
	.byte	3,252,2,1,5,14,9
	.half	.L147-.L63
	.byte	3,1,1,5,5,9
	.half	.L148-.L147
	.byte	3,2,1,4,1,9
	.half	.L2-.L148
	.byte	3,134,125,1,5,12,9
	.half	.L188-.L2
	.byte	3,1,1,5,21,9
	.half	.L189-.L188
	.byte	3,3,1,5,11,9
	.half	.L190-.L189
	.byte	1,5,19,9
	.half	.L191-.L190
	.byte	3,3,1,5,10,9
	.half	.L149-.L191
	.byte	3,1,1,5,11,9
	.half	.L192-.L149
	.byte	3,1,1,5,28,9
	.half	.L193-.L192
	.byte	3,3,1,4,3,5,5,9
	.half	.L69-.L193
	.byte	3,207,6,1,5,23,7,9
	.half	.L75-.L69
	.byte	3,3,1,9
	.half	.L150-.L75
	.byte	3,1,1,5,15,9
	.half	.L194-.L150
	.byte	3,1,1,5,19,9
	.half	.L3-.L194
	.byte	3,189,126,1,5,37,9
	.half	.L151-.L3
	.byte	3,1,1,5,5,9
	.half	.L195-.L151
	.byte	1,5,83,9
	.half	.L4-.L195
	.byte	3,198,1,1,4,2,5,33,9
	.half	.L85-.L4
	.byte	3,147,124,1,5,14,9
	.half	.L153-.L85
	.byte	3,1,1,5,5,9
	.half	.L154-.L153
	.byte	3,2,1,4,3,5,59,9
	.half	.L5-.L154
	.byte	3,237,3,1,4,2,5,25,9
	.half	.L88-.L5
	.byte	3,221,123,1,5,5,9
	.half	.L152-.L88
	.byte	1,5,38,7,9
	.half	.L196-.L152
	.byte	3,5,1,5,45,9
	.half	.L197-.L196
	.byte	3,1,1,5,50,9
	.half	.L198-.L197
	.byte	1,5,69,9
	.half	.L199-.L198
	.byte	3,127,1,5,26,9
	.half	.L200-.L199
	.byte	3,126,1,5,34,9
	.half	.L6-.L200
	.byte	3,9,1,5,41,9
	.half	.L201-.L6
	.byte	3,1,1,5,46,9
	.half	.L202-.L201
	.byte	1,5,65,9
	.half	.L203-.L202
	.byte	3,127,1,5,22,9
	.half	.L204-.L203
	.byte	3,126,1,5,41,9
	.half	.L205-.L204
	.byte	3,6,1,5,28,9
	.half	.L7-.L205
	.byte	1,5,41,9
	.half	.L206-.L7
	.byte	1,4,3,5,23,7,9
	.half	.L89-.L206
	.byte	3,149,4,1,5,25,9
	.half	.L156-.L89
	.byte	3,1,1,5,32,7,9
	.half	.L207-.L156
	.byte	1,5,36,9
	.half	.L208-.L207
	.byte	1,5,32,9
	.half	.L9-.L208
	.byte	1,5,23,9
	.half	.L10-.L9
	.byte	1,5,15,9
	.half	.L209-.L10
	.byte	3,1,1,5,57,9
	.half	.L210-.L209
	.byte	3,1,1,4,2,5,25,9
	.half	.L100-.L210
	.byte	3,175,124,1,5,5,9
	.half	.L211-.L100
	.byte	1,5,38,7,9
	.half	.L212-.L211
	.byte	3,5,1,5,45,9
	.half	.L213-.L212
	.byte	3,1,1,5,50,9
	.half	.L214-.L213
	.byte	1,5,69,9
	.half	.L215-.L214
	.byte	3,127,1,5,26,9
	.half	.L216-.L215
	.byte	3,126,1,5,34,9
	.half	.L11-.L216
	.byte	3,9,1,5,41,9
	.half	.L217-.L11
	.byte	3,1,1,5,46,9
	.half	.L218-.L217
	.byte	1,5,65,9
	.half	.L219-.L218
	.byte	3,127,1,5,22,9
	.half	.L220-.L219
	.byte	3,126,1,5,41,9
	.half	.L221-.L220
	.byte	3,6,1,5,28,9
	.half	.L12-.L221
	.byte	1,5,41,9
	.half	.L222-.L12
	.byte	1,4,3,5,12,7,9
	.half	.L96-.L222
	.byte	3,196,3,1,4,1,5,25,9
	.half	.L70-.L96
	.byte	3,160,121,1,4,3,5,19,9
	.half	.L107-.L70
	.byte	3,142,5,1,5,37,9
	.half	.L158-.L107
	.byte	3,1,1,5,5,9
	.half	.L223-.L158
	.byte	1,5,83,9
	.half	.L14-.L223
	.byte	3,163,1,1,4,2,5,33,9
	.half	.L115-.L14
	.byte	3,182,124,1,5,14,9
	.half	.L160-.L115
	.byte	3,1,1,5,5,9
	.half	.L161-.L160
	.byte	3,2,1,4,3,5,59,9
	.half	.L15-.L161
	.byte	3,202,3,1,4,2,5,25,9
	.half	.L117-.L15
	.byte	3,128,124,1,5,5,9
	.half	.L159-.L117
	.byte	1,5,38,7,9
	.half	.L224-.L159
	.byte	3,5,1,5,45,9
	.half	.L225-.L224
	.byte	3,1,1,5,50,9
	.half	.L226-.L225
	.byte	1,5,69,9
	.half	.L227-.L226
	.byte	3,127,1,5,26,9
	.half	.L228-.L227
	.byte	3,126,1,5,34,9
	.half	.L16-.L228
	.byte	3,9,1,5,41,9
	.half	.L229-.L16
	.byte	3,1,1,5,46,9
	.half	.L230-.L229
	.byte	1,5,65,9
	.half	.L231-.L230
	.byte	3,127,1,5,22,9
	.half	.L232-.L231
	.byte	3,126,1,5,41,9
	.half	.L233-.L232
	.byte	3,6,1,5,28,9
	.half	.L17-.L233
	.byte	1,5,41,9
	.half	.L234-.L17
	.byte	1,4,3,5,23,7,9
	.half	.L118-.L234
	.byte	3,242,3,1,5,25,9
	.half	.L163-.L118
	.byte	3,1,1,5,32,7,9
	.half	.L235-.L163
	.byte	1,5,36,9
	.half	.L236-.L235
	.byte	1,5,32,9
	.half	.L19-.L236
	.byte	1,5,23,9
	.half	.L20-.L19
	.byte	1,5,15,9
	.half	.L237-.L20
	.byte	3,1,1,5,57,9
	.half	.L238-.L237
	.byte	3,1,1,4,2,5,25,9
	.half	.L123-.L238
	.byte	3,210,124,1,5,5,9
	.half	.L239-.L123
	.byte	1,5,38,7,9
	.half	.L240-.L239
	.byte	3,5,1,5,45,9
	.half	.L241-.L240
	.byte	3,1,1,5,50,9
	.half	.L242-.L241
	.byte	1,5,69,9
	.half	.L243-.L242
	.byte	3,127,1,5,26,9
	.half	.L244-.L243
	.byte	3,126,1,5,34,9
	.half	.L21-.L244
	.byte	3,9,1,5,41,9
	.half	.L245-.L21
	.byte	3,1,1,5,46,9
	.half	.L246-.L245
	.byte	1,5,65,9
	.half	.L247-.L246
	.byte	3,127,1,5,22,9
	.half	.L248-.L247
	.byte	3,126,1,5,41,9
	.half	.L249-.L248
	.byte	3,6,1,5,28,9
	.half	.L22-.L249
	.byte	1,5,41,9
	.half	.L250-.L22
	.byte	1,4,3,5,12,7,9
	.half	.L120-.L250
	.byte	3,161,3,1,4,1,5,55,9
	.half	.L108-.L120
	.byte	3,198,121,1,4,2,5,25,9
	.half	.L124-.L108
	.byte	3,178,2,1,5,5,9
	.half	.L251-.L124
	.byte	1,5,38,7,9
	.half	.L252-.L251
	.byte	3,5,1,5,45,9
	.half	.L253-.L252
	.byte	3,1,1,5,50,9
	.half	.L254-.L253
	.byte	1,5,69,9
	.half	.L255-.L254
	.byte	3,127,1,5,26,9
	.half	.L256-.L255
	.byte	3,126,1,5,34,9
	.half	.L24-.L256
	.byte	3,9,1,5,41,9
	.half	.L257-.L24
	.byte	3,1,1,5,46,9
	.half	.L258-.L257
	.byte	1,5,65,9
	.half	.L259-.L258
	.byte	3,127,1,5,22,9
	.half	.L260-.L259
	.byte	3,126,1,5,41,9
	.half	.L261-.L260
	.byte	3,6,1,5,28,9
	.half	.L25-.L261
	.byte	1,5,41,9
	.half	.L262-.L25
	.byte	1,4,1,5,29,7,9
	.half	.L125-.L262
	.byte	3,193,125,1,5,11,9
	.half	.L263-.L125
	.byte	1,5,29,9
	.half	.L264-.L263
	.byte	3,3,1,5,11,9
	.half	.L265-.L264
	.byte	1,5,29,9
	.half	.L266-.L265
	.byte	3,3,1,5,11,9
	.half	.L267-.L266
	.byte	1,5,53,9
	.half	.L268-.L267
	.byte	3,2,1,4,2,5,25,9
	.half	.L126-.L268
	.byte	3,254,2,1,5,5,9
	.half	.L269-.L126
	.byte	1,5,38,7,9
	.half	.L270-.L269
	.byte	3,5,1,5,45,9
	.half	.L271-.L270
	.byte	3,1,1,5,50,9
	.half	.L272-.L271
	.byte	1,5,69,9
	.half	.L273-.L272
	.byte	3,127,1,5,26,9
	.half	.L274-.L273
	.byte	3,126,1,5,34,9
	.half	.L27-.L274
	.byte	3,9,1,5,41,9
	.half	.L275-.L27
	.byte	3,1,1,5,46,9
	.half	.L276-.L275
	.byte	1,5,65,9
	.half	.L277-.L276
	.byte	3,127,1,5,22,9
	.half	.L278-.L277
	.byte	3,126,1,5,41,9
	.half	.L279-.L278
	.byte	3,6,1,5,28,9
	.half	.L28-.L279
	.byte	1,5,41,9
	.half	.L280-.L28
	.byte	1,4,1,5,5,7,9
	.half	.L127-.L280
	.byte	3,245,124,1,9
	.half	.L281-.L127
	.byte	3,1,1,9
	.half	.L282-.L281
	.byte	3,3,1,9
	.half	.L283-.L282
	.byte	3,1,1,5,30,9
	.half	.L284-.L283
	.byte	3,3,1,5,50,9
	.half	.L285-.L284
	.byte	1,4,3,5,25,9
	.half	.L129-.L285
	.byte	3,196,5,1,5,37,9
	.half	.L167-.L129
	.byte	3,2,1,5,54,9
	.half	.L286-.L167
	.byte	1,5,44,9
	.half	.L287-.L286
	.byte	1,5,64,9
	.half	.L288-.L287
	.byte	1,5,12,9
	.half	.L169-.L288
	.byte	3,2,1,5,29,9
	.half	.L170-.L169
	.byte	1,5,32,9
	.half	.L31-.L170
	.byte	3,2,1,5,39,9
	.half	.L289-.L31
	.byte	1,5,55,9
	.half	.L290-.L289
	.byte	1,5,72,9
	.half	.L291-.L290
	.byte	1,5,90,9
	.half	.L292-.L291
	.byte	1,5,79,9
	.half	.L293-.L292
	.byte	1,5,97,9
	.half	.L294-.L293
	.byte	1,5,61,9
	.half	.L171-.L294
	.byte	1,5,9,9
	.half	.L295-.L171
	.byte	3,2,1,5,19,7,9
	.half	.L296-.L295
	.byte	3,2,1,5,41,9
	.half	.L297-.L296
	.byte	1,5,21,9
	.half	.L32-.L297
	.byte	3,4,1,5,28,9
	.half	.L33-.L32
	.byte	3,3,1,5,9,9
	.half	.L298-.L33
	.byte	1,5,19,7,9
	.half	.L299-.L298
	.byte	3,2,1,5,17,9
	.half	.L34-.L299
	.byte	3,3,1,5,16,9
	.half	.L300-.L34
	.byte	3,1,1,5,32,9
	.half	.L301-.L300
	.byte	3,109,1,5,29,9
	.half	.L30-.L301
	.byte	1,5,15,7,9
	.half	.L302-.L30
	.byte	3,22,1,5,13,9
	.half	.L303-.L302
	.byte	1,4,1,5,71,9
	.half	.L130-.L303
	.byte	3,166,122,1,5,34,9
	.half	.L168-.L130
	.byte	1,5,38,9
	.half	.L173-.L168
	.byte	3,1,1,5,41,9
	.half	.L172-.L173
	.byte	3,1,1,5,19,9
	.half	.L176-.L172
	.byte	3,2,1,5,37,9
	.half	.L304-.L176
	.byte	3,2,1,5,40,9
	.half	.L178-.L304
	.byte	3,1,1,5,5,9
	.half	.L142-.L178
	.byte	3,4,1,5,29,9
	.half	.L305-.L142
	.byte	3,4,1,5,51,9
	.half	.L306-.L305
	.byte	1,5,42,9
	.half	.L307-.L306
	.byte	1,5,5,9
	.half	.L308-.L307
	.byte	3,10,1,5,1,9
	.half	.L309-.L308
	.byte	3,1,1,7,9
	.half	.L47-.L309
	.byte	0,1,1
.L185:
	.sdecl	'.debug_ranges',debug,cluster('_Core0_start')
	.sect	'.debug_ranges'
.L46:
	.word	-1,.L36,0,.L47-.L36,0,0
	.sdecl	'.debug_info',debug,cluster('_START')
	.sect	'.debug_info'
.L48:
	.word	199
	.half	3
	.word	.L49
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1
	.word	.L51,.L50
	.byte	2
	.word	.L39
	.byte	3
	.byte	'_START',0,1,205,1,6,1,1,1
	.word	.L38,.L144,.L37
	.byte	4
	.word	.L38,.L144
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('_START')
	.sect	'.debug_abbrev'
.L49:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('_START')
	.sect	'.debug_line'
.L50:
	.word	.L311-.L310
.L310:
	.half	3
	.word	.L313-.L312
.L312:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0,0,0,0,0
.L313:
	.byte	5,237,1,7,0,5,2
	.word	.L38
	.byte	3,206,1,1,5,1,9
	.half	.L314-.L38
	.byte	3,1,1,7,9
	.half	.L52-.L314
	.byte	0,1,1
.L311:
	.sdecl	'.debug_ranges',debug,cluster('_START')
	.sect	'.debug_ranges'
.L51:
	.word	-1,.L38,0,.L52-.L38,0,0
	.sdecl	'.debug_info',debug,cluster('BootModeHeader_0')
	.sect	'.debug_info'
.L53:
	.word	187
	.half	3
	.word	.L54
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1,2
	.word	.L39
	.byte	3
	.byte	'BootModeHeader_0',0,13,243,1,14
	.word	.L145
	.byte	1,5,3
	.word	BootModeHeader_0
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('BootModeHeader_0')
	.sect	'.debug_abbrev'
.L54:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('BootModeHeader_1')
	.sect	'.debug_info'
.L55:
	.word	187
	.half	3
	.word	.L56
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart\\IfxCpu_CStart0.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\smartcar\\smartcar\\Debug\\',0,12,1,2
	.word	.L39
	.byte	3
	.byte	'BootModeHeader_1',0,13,155,2,14
	.word	.L146
	.byte	1,5,3
	.word	BootModeHeader_1
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('BootModeHeader_1')
	.sect	'.debug_abbrev'
.L56:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_loc',debug,cluster('_Core0_start')
	.sect	'.debug_loc'
.L35:
	.word	-1,.L36,0,.L57-.L36
	.half	2
	.byte	138,0
	.word	0,0
.L112:
	.word	0,0
.L79:
	.word	0,0
.L61:
	.word	0,0
.L132:
	.word	0,0
.L134:
	.word	0,0
.L122:
	.word	-1,.L36,.L163-.L36,.L164-.L36
	.half	1
	.byte	95
	.word	0,0
.L110:
	.word	0,0
.L72:
	.word	0,0
.L136:
	.word	-1,.L36,.L170-.L36,.L168-.L36
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L141:
	.word	-1,.L36,.L169-.L36,.L168-.L36
	.half	1
	.byte	85
	.word	0,0
.L140:
	.word	-1,.L36,.L165-.L36,.L166-.L36
	.half	1
	.byte	111
	.word	0,0
.L137:
	.word	-1,.L36,.L171-.L36,.L30-.L36
	.half	1
	.byte	81
	.word	0,0
.L93:
	.word	0,0
.L67:
	.word	-1,.L36,.L147-.L36,.L148-.L36
	.half	1
	.byte	95
	.word	.L148-.L36,.L57-.L36
	.half	1
	.byte	88
	.word	.L174-.L36,.L172-.L36
	.half	1
	.byte	84
	.word	.L177-.L36,.L178-.L36
	.half	1
	.byte	84
	.word	0,0
.L86:
	.word	-1,.L36,.L153-.L36,.L154-.L36
	.half	5
	.byte	144,32,157,32,0
	.word	.L154-.L36,.L155-.L36
	.half	1
	.byte	83
	.word	0,0
.L116:
	.word	-1,.L36,.L160-.L36,.L161-.L36
	.half	5
	.byte	144,32,157,32,0
	.word	.L161-.L36,.L162-.L36
	.half	1
	.byte	83
	.word	0,0
.L104:
	.word	0,0
.L98:
	.word	-1,.L36,.L156-.L36,.L157-.L36
	.half	1
	.byte	95
	.word	0,0
.L77:
	.word	-1,.L36,.L150-.L36,.L3-.L36
	.half	1
	.byte	95
	.word	0,0
.L59:
	.word	-1,.L36,.L149-.L36,.L150-.L36
	.half	1
	.byte	95
	.word	0,0
.L139:
	.word	-1,.L36,.L167-.L36,.L168-.L36
	.half	1
	.byte	100
	.word	0,0
.L84:
	.word	-1,.L36,.L151-.L36,.L152-.L36
	.half	1
	.byte	95
	.word	0,0
.L114:
	.word	-1,.L36,.L158-.L36,.L159-.L36
	.half	1
	.byte	95
	.word	0,0
.L143:
	.word	-1,.L36,.L168-.L36,.L172-.L36
	.half	1
	.byte	82
	.word	.L173-.L36,.L57-.L36
	.half	1
	.byte	95
	.word	.L175-.L36,.L176-.L36
	.half	1
	.byte	84
	.word	.L179-.L36,.L142-.L36
	.half	1
	.byte	84
	.word	0,0
.L91:
	.word	0,0
.L65:
	.word	0,0
.L102:
	.word	0,0
.L113:
	.word	0,0
.L80:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('_START')
	.sect	'.debug_loc'
.L37:
	.word	-1,.L38,0,.L144-.L38
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L315:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('_Core0_start')
	.sect	'.debug_frame'
	.word	12
	.word	.L315,.L36,.L57-.L36
	.sdecl	'.debug_frame',debug,cluster('_START')
	.sect	'.debug_frame'
	.word	24
	.word	.L315,.L38,.L144-.L38
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   209  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   210  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   211  /* reset the sections defined above, to normal region */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   212  #if defined(__HIGHTEC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   213  #pragma section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   214  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   215  #if defined(__TASKING__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   216  #pragma protect restore
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   217  #pragma section code restore
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   218  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   219  #if defined(__DCC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   220  #pragma section CODE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   221  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   222  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   223  /*******************************************************************************
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   224  **                      Boot Mode Headers                                     **
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   225  *******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   226  /*Boot Mode Header 0 sections to inform linker to locate them at 0x8000 0000 */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   227  #ifndef IFX_CFG_CPUCSTART_BMHD_NOT_NEEDED
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   228  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   229  #if defined(__HIGHTEC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   230  #pragma section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   231  #pragma section ".bmhd_0" a
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   232  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   233  #if defined(__TASKING__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   234  #pragma protect on
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   235  #pragma section farrom "bmhd_0"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   236  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   237  #if defined(__DCC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   238  #pragma section CONST ".bmhd_0" R
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   239  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   240  /** \brief Boot Mode Header 0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   241   * Boot mode header at memory location 0c8000 0000.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   242   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   243  const uint32 BootModeHeader_0[] = {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   244      0x00000000u,                 /* STADBM first user code at 0x8000 0020h */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   245      0xb3590070u,                 /* BMI = 0070h BMHDID = B359h */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   246      0x00000000u,                 /* ChkStart */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   247      0x00000000u,                 /* ChkEnd */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   248      0x00000000u,                 /* CRCrange */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   249      0x00000000u,                 /* !CRCrange */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   250      0x791eb864u,                 /* CRChead */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   251      0x86e1479bu                  /* !CRChead */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   252  };
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   253  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   254  /*reset the sections defined above */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   255  #if defined(__HIGHTEC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   256  #pragma section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   257  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   258  #if defined(__TASKING__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   259  #pragma protect restore
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   260  #pragma section farrom restore
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   261  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   262  #if defined(__DCC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   263  #pragma section CONST
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   264  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   265  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   266  #ifndef IFX_CFG_CPUCSTART_BMI01_NOT_NEEDED
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   267  /*Boot Mode Header 1 sections to inform linker to locate them at 0x8002 0000 */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   268  #if defined(__HIGHTEC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   269  #pragma section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   270  #pragma section ".bmhd_1" a
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   271  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   272  #if defined(__TASKING__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   273  #pragma protect on
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   274  #pragma section farrom "bmhd_1"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   275  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   276  #if defined(__DCC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   277  #pragma section CONST ".bmhd_1" R
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   278  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   279  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   280  /** \brief Boot Mode Header 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   281   * Boot mode header at memory location 0c8002 0000.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   282   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   283  const uint32 BootModeHeader_1[] = {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   284      0x00000000u,                 /* STADBM first user code at 0x8000 0020h */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   285      0xB3590070u,                 /* BMI = 0070h BMHDID = B359h */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   286      0x00000000u,                 /* ChkStart */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   287      0x00000000u,                 /* ChkEnd */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   288      0x00000000u,                 /* CRCrange */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   289      0x00000000u,                 /* !CRCrange */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   290      0x791eb864u,                 /* CRChead */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   291      0x86e1479bu                  /* !CRChead */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   292  };
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   293  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   294  /*reset the sections defined above */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   295  #if defined(__HIGHTEC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   296  #pragma section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   297  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   298  #if defined(__TASKING__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   299  #pragma protect restore
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   300  #pragma section farrom restore
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   301  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   302  #if defined(__DCC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   303  #pragma section CONST
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   304  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   305  #endif /*IFX_CFG_CPUCSTART_BMI01_NOT_NEEDED*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   306  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   307  #endif /*IFX_CFG_CPUCSTART_BMHD_NOT_NEEDED*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   308  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\CStart\IfxCpu_CStart0.c	   309  #endif /*#ifndef IFX_CFG_USE_COMPILER_DEFAULT_LINKER */

	; Module end
